+ '[' 0 -eq 1 ']'
+ echo 'Doing: timeout --foreground --kill-after=5 --signal=SIGINT 121 time metta /opt/logicmoo_workspace/packs_sys/logicmoo_opencog/MeTTa/vspace-metta/examples/baseline_compat/hyperon-pln_metta/dependent-types/ImplicationDirectIntroductionDTLTest.metta'
Doing: timeout --foreground --kill-after=5 --signal=SIGINT 121 time metta /opt/logicmoo_workspace/packs_sys/logicmoo_opencog/MeTTa/vspace-metta/examples/baseline_compat/hyperon-pln_metta/dependent-types/ImplicationDirectIntroductionDTLTest.metta
+ eval 'timeout --foreground --kill-after=5 --signal=SIGINT 121 time metta /opt/logicmoo_workspace/packs_sys/logicmoo_opencog/MeTTa/vspace-metta/examples/baseline_compat/hyperon-pln_metta/dependent-types/ImplicationDirectIntroductionDTLTest.metta'
++ timeout --foreground --kill-after=5 --signal=SIGINT 121 time metta /opt/logicmoo_workspace/packs_sys/logicmoo_opencog/MeTTa/vspace-metta/examples/baseline_compat/hyperon-pln_metta/dependent-types/ImplicationDirectIntroductionDTLTest.metta
[()]
[()]
["===== Test base rule (built-in type checker) ====="]
[(base_prf)]
[(≞ (→ P Q) (ETV (:: (S (S Z)) ∅) (STV 0 0.5)))]
["===== Test recursive rule (built-in type checker) ====="]
[(recursive_prf)]
[(≞ (→ P Q) $etv#803)]
["===== Prove that 2 < 7 (synthesizer) ====="]
[(: (SuccMonotonicity (SuccMonotonicity ZeroLTSucc)) (⍃ (S (S Z)) (S (S (S (S (S (S (S Z)))))))))]
["===== Prove that 2 < 3 (synthesizer) ====="]
[(: (SuccMonotonicity (SuccMonotonicity ZeroLTSucc)) (⍃ (S (S Z)) (S (S (S Z)))))]
["===== Prove that 5 < 7 (synthesizer) ====="]
[(: (SuccMonotonicity (SuccMonotonicity (SuccMonotonicity ZeroLTSucc))) (⍃ (S (S (S Z))) (S (S (S (S (S (S (S Z)))))))))]
["===== Prove P→Q using base rule (synthesizer) ====="]
[(let* (((: $proof2#26183 (⊷ Q (S (S Z)) True)) (synthesize (: $proof2#26183 (⊷ Q (S (S Z)) True)) kb rb Z))) (: (IDIBase P2 $proof2#26183) (≞ (→ P Q) (ETV (:: (S (S Z)) ∅) (STV 1 0.5))))), (: (IDIBase P3 Q3) (≞ (→ P Q) (ETV (:: (S (S (S Z))) ∅) (STV 1 0.5)))), (: (IDIBase P7 Q7) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) ∅) (STV 1 0.5)))), (: (IDIBase P2 Q2) (≞ (→ P Q) (ETV (:: (S (S Z)) ∅) (STV 0 0.5)))), (let* (((: $proof2#27199 (⊷ Q (S (S (S Z))) False)) (synthesize (: $proof2#27199 (⊷ Q (S (S (S Z))) False)) kb rb Z))) (: (IDIBase P3 $proof2#27199) (≞ (→ P Q) (ETV (:: (S (S (S Z))) ∅) (STV 0 0.5))))), (let* (((: $proof2#27199 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) (synthesize (: $proof2#27199 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) kb rb Z))) (: (IDIBase P7 $proof2#27199) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) ∅) (STV 0 0.5))))), (let* (((: $proof2#28118 (⊷ Q (S (S Z)) True)) (synthesize (: $proof2#28118 (⊷ Q (S (S Z)) True)) kb rb Z)) ((: $proof3#28119 (≞ (→ P Q) (ETV (:: $h#28124 $t#28125) (STV $PQs#28126 $PQc#28127)))) (synthesize (: $proof3#28119 (≞ (→ P Q) (ETV (:: $h#28124 $t#28125) (STV $PQs#28126 $PQc#28127)))) kb rb Z)) ((: $proof4#28120 (⍃ $h#28124 (S (S Z)))) (synthesize (: $proof4#28120 (⍃ $h#28124 (S (S Z)))) kb rb Z))) (: (IDIRecursive P2 $proof2#28118 $proof3#28119 $proof4#28120) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: $h#28124 $t#28125)) (STV (/ (+ (* $PQs#28126 (if (<= (if (< (- 1.0 $PQc#28127) 0) (* -1 (- 1.0 $PQc#28127)) (- 1.0 $PQc#28127)) 1e-09) (max-count) (/ (* $PQc#28127 (lookahead)) (- 1.0 $PQc#28127)))) 1) (+ (if (<= (if (< (- 1.0 $PQc#28127) 0) (* -1 (- 1.0 $PQc#28127)) (- 1.0 $PQc#28127)) 1e-09) (max-count) (/ (* $PQc#28127 (lookahead)) (- 1.0 $PQc#28127))) 1)) (/ (+ (if (<= (if (< (- 1.0 $PQc#28127) 0) (* -1 (- 1.0 $PQc#28127)) (- 1.0 $PQc#28127)) 1e-09) (max-count) (/ (* $PQc#28127 (lookahead)) (- 1.0 $PQc#28127))) 1) (+ (+ (if (<= (if (< (- 1.0 $PQc#28127) 0) (* -1 (- 1.0 $PQc#28127)) (- 1.0 $PQc#28127)) 1e-09) (max-count) (/ (* $PQc#28127 (lookahead)) (- 1.0 $PQc#28127))) 1) 1.0))))))), (let* (((: $proof3#28119 (≞ (→ P Q) (ETV (:: $h#28124 $t#28125) (STV $PQs#28126 $PQc#28127)))) (synthesize (: $proof3#28119 (≞ (→ P Q) (ETV (:: $h#28124 $t#28125) (STV $PQs#28126 $PQc#28127)))) kb rb Z)) ((: $proof4#28120 (⍃ $h#28124 (S (S (S Z))))) (synthesize (: $proof4#28120 (⍃ $h#28124 (S (S (S Z))))) kb rb Z))) (: (IDIRecursive P3 Q3 $proof3#28119 $proof4#28120) (≞ (→ P Q) (ETV (:: (S (S (S Z))) (:: $h#28124 $t#28125)) (STV (/ (+ (* $PQs#28126 (if (<= (if (< (- 1.0 $PQc#28127) 0) (* -1 (- 1.0 $PQc#28127)) (- 1.0 $PQc#28127)) 1e-09) (max-count) (/ (* $PQc#28127 (lookahead)) (- 1.0 $PQc#28127)))) 1) (+ (if (<= (if (< (- 1.0 $PQc#28127) 0) (* -1 (- 1.0 $PQc#28127)) (- 1.0 $PQc#28127)) 1e-09) (max-count) (/ (* $PQc#28127 (lookahead)) (- 1.0 $PQc#28127))) 1)) (/ (+ (if (<= (if (< (- 1.0 $PQc#28127) 0) (* -1 (- 1.0 $PQc#28127)) (- 1.0 $PQc#28127)) 1e-09) (max-count) (/ (* $PQc#28127 (lookahead)) (- 1.0 $PQc#28127))) 1) (+ (+ (if (<= (if (< (- 1.0 $PQc#28127) 0) (* -1 (- 1.0 $PQc#28127)) (- 1.0 $PQc#28127)) 1e-09) (max-count) (/ (* $PQc#28127 (lookahead)) (- 1.0 $PQc#28127))) 1) 1.0))))))), (let* (((: $proof3#28119 (≞ (→ P Q) (ETV (:: $h#28124 $t#28125) (STV $PQs#28126 $PQc#28127)))) (synthesize (: $proof3#28119 (≞ (→ P Q) (ETV (:: $h#28124 $t#28125) (STV $PQs#28126 $PQc#28127)))) kb rb Z)) ((: $proof4#28120 (⍃ $h#28124 (S (S (S (S (S (S (S Z))))))))) (synthesize (: $proof4#28120 (⍃ $h#28124 (S (S (S (S (S (S (S Z))))))))) kb rb Z))) (: (IDIRecursive P7 Q7 $proof3#28119 $proof4#28120) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) (:: $h#28124 $t#28125)) (STV (/ (+ (* $PQs#28126 (if (<= (if (< (- 1.0 $PQc#28127) 0) (* -1 (- 1.0 $PQc#28127)) (- 1.0 $PQc#28127)) 1e-09) (max-count) (/ (* $PQc#28127 (lookahead)) (- 1.0 $PQc#28127)))) 1) (+ (if (<= (if (< (- 1.0 $PQc#28127) 0) (* -1 (- 1.0 $PQc#28127)) (- 1.0 $PQc#28127)) 1e-09) (max-count) (/ (* $PQc#28127 (lookahead)) (- 1.0 $PQc#28127))) 1)) (/ (+ (if (<= (if (< (- 1.0 $PQc#28127) 0) (* -1 (- 1.0 $PQc#28127)) (- 1.0 $PQc#28127)) 1e-09) (max-count) (/ (* $PQc#28127 (lookahead)) (- 1.0 $PQc#28127))) 1) (+ (+ (if (<= (if (< (- 1.0 $PQc#28127) 0) (* -1 (- 1.0 $PQc#28127)) (- 1.0 $PQc#28127)) 1e-09) (max-count) (/ (* $PQc#28127 (lookahead)) (- 1.0 $PQc#28127))) 1) 1.0))))))), (let* (((: $proof3#29110 (≞ (→ P Q) (ETV (:: $h#29115 $t#29116) (STV $PQs#29117 $PQc#29118)))) (synthesize (: $proof3#29110 (≞ (→ P Q) (ETV (:: $h#29115 $t#29116) (STV $PQs#29117 $PQc#29118)))) kb rb Z)) ((: $proof4#29111 (⍃ $h#29115 (S (S Z)))) (synthesize (: $proof4#29111 (⍃ $h#29115 (S (S Z)))) kb rb Z))) (: (IDIRecursive P2 Q2 $proof3#29110 $proof4#29111) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: $h#29115 $t#29116)) (STV (/ (* $PQs#29117 (if (<= (if (< (- 1.0 $PQc#29118) 0) (* -1 (- 1.0 $PQc#29118)) (- 1.0 $PQc#29118)) 1e-09) (max-count) (/ (* $PQc#29118 (lookahead)) (- 1.0 $PQc#29118)))) (+ (if (<= (if (< (- 1.0 $PQc#29118) 0) (* -1 (- 1.0 $PQc#29118)) (- 1.0 $PQc#29118)) 1e-09) (max-count) (/ (* $PQc#29118 (lookahead)) (- 1.0 $PQc#29118))) 1)) (/ (+ (if (<= (if (< (- 1.0 $PQc#29118) 0) (* -1 (- 1.0 $PQc#29118)) (- 1.0 $PQc#29118)) 1e-09) (max-count) (/ (* $PQc#29118 (lookahead)) (- 1.0 $PQc#29118))) 1) (+ (+ (if (<= (if (< (- 1.0 $PQc#29118) 0) (* -1 (- 1.0 $PQc#29118)) (- 1.0 $PQc#29118)) 1e-09) (max-count) (/ (* $PQc#29118 (lookahead)) (- 1.0 $PQc#29118))) 1) 1.0))))))), (let* (((: $proof2#29109 (⊷ Q (S (S (S Z))) False)) (synthesize (: $proof2#29109 (⊷ Q (S (S (S Z))) False)) kb rb Z)) ((: $proof3#29110 (≞ (→ P Q) (ETV (:: $h#29115 $t#29116) (STV $PQs#29117 $PQc#29118)))) (synthesize (: $proof3#29110 (≞ (→ P Q) (ETV (:: $h#29115 $t#29116) (STV $PQs#29117 $PQc#29118)))) kb rb Z)) ((: $proof4#29111 (⍃ $h#29115 (S (S (S Z))))) (synthesize (: $proof4#29111 (⍃ $h#29115 (S (S (S Z))))) kb rb Z))) (: (IDIRecursive P3 $proof2#29109 $proof3#29110 $proof4#29111) (≞ (→ P Q) (ETV (:: (S (S (S Z))) (:: $h#29115 $t#29116)) (STV (/ (* $PQs#29117 (if (<= (if (< (- 1.0 $PQc#29118) 0) (* -1 (- 1.0 $PQc#29118)) (- 1.0 $PQc#29118)) 1e-09) (max-count) (/ (* $PQc#29118 (lookahead)) (- 1.0 $PQc#29118)))) (+ (if (<= (if (< (- 1.0 $PQc#29118) 0) (* -1 (- 1.0 $PQc#29118)) (- 1.0 $PQc#29118)) 1e-09) (max-count) (/ (* $PQc#29118 (lookahead)) (- 1.0 $PQc#29118))) 1)) (/ (+ (if (<= (if (< (- 1.0 $PQc#29118) 0) (* -1 (- 1.0 $PQc#29118)) (- 1.0 $PQc#29118)) 1e-09) (max-count) (/ (* $PQc#29118 (lookahead)) (- 1.0 $PQc#29118))) 1) (+ (+ (if (<= (if (< (- 1.0 $PQc#29118) 0) (* -1 (- 1.0 $PQc#29118)) (- 1.0 $PQc#29118)) 1e-09) (max-count) (/ (* $PQc#29118 (lookahead)) (- 1.0 $PQc#29118))) 1) 1.0))))))), (let* (((: $proof2#29109 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) (synthesize (: $proof2#29109 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) kb rb Z)) ((: $proof3#29110 (≞ (→ P Q) (ETV (:: $h#29115 $t#29116) (STV $PQs#29117 $PQc#29118)))) (synthesize (: $proof3#29110 (≞ (→ P Q) (ETV (:: $h#29115 $t#29116) (STV $PQs#29117 $PQc#29118)))) kb rb Z)) ((: $proof4#29111 (⍃ $h#29115 (S (S (S (S (S (S (S Z))))))))) (synthesize (: $proof4#29111 (⍃ $h#29115 (S (S (S (S (S (S (S Z))))))))) kb rb Z))) (: (IDIRecursive P7 $proof2#29109 $proof3#29110 $proof4#29111) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) (:: $h#29115 $t#29116)) (STV (/ (* $PQs#29117 (if (<= (if (< (- 1.0 $PQc#29118) 0) (* -1 (- 1.0 $PQc#29118)) (- 1.0 $PQc#29118)) 1e-09) (max-count) (/ (* $PQc#29118 (lookahead)) (- 1.0 $PQc#29118)))) (+ (if (<= (if (< (- 1.0 $PQc#29118) 0) (* -1 (- 1.0 $PQc#29118)) (- 1.0 $PQc#29118)) 1e-09) (max-count) (/ (* $PQc#29118 (lookahead)) (- 1.0 $PQc#29118))) 1)) (/ (+ (if (<= (if (< (- 1.0 $PQc#29118) 0) (* -1 (- 1.0 $PQc#29118)) (- 1.0 $PQc#29118)) 1e-09) (max-count) (/ (* $PQc#29118 (lookahead)) (- 1.0 $PQc#29118))) 1) (+ (+ (if (<= (if (< (- 1.0 $PQc#29118) 0) (* -1 (- 1.0 $PQc#29118)) (- 1.0 $PQc#29118)) 1e-09) (max-count) (/ (* $PQc#29118 (lookahead)) (- 1.0 $PQc#29118))) 1) 1.0)))))))]
["===== Prove P→Q using base, recursive and order rules (synthesizer) ====="]
[(let* (((: $proof2#34631 (⊷ Q (S (S Z)) True)) (synthesize (: $proof2#34631 (⊷ Q (S (S Z)) True)) kb rb (S (S (S Z)))))) (: (IDIBase P2 $proof2#34631) (≞ (→ P Q) (ETV (:: (S (S Z)) ∅) (STV 1 0.5))))), (: (IDIBase P3 Q3) (≞ (→ P Q) (ETV (:: (S (S (S Z))) ∅) (STV 1 0.5)))), (: (IDIBase P7 Q7) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) ∅) (STV 1 0.5)))), (: (IDIBase P2 Q2) (≞ (→ P Q) (ETV (:: (S (S Z)) ∅) (STV 0 0.5)))), (let* (((: $proof2#37903 (⊷ Q (S (S (S Z))) False)) (synthesize (: $proof2#37903 (⊷ Q (S (S (S Z))) False)) kb rb (S (S (S Z)))))) (: (IDIBase P3 $proof2#37903) (≞ (→ P Q) (ETV (:: (S (S (S Z))) ∅) (STV 0 0.5))))), (let* (((: $proof2#37903 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) (synthesize (: $proof2#37903 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) kb rb (S (S (S Z)))))) (: (IDIBase P7 $proof2#37903) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) ∅) (STV 0 0.5))))), (let* (((: $proof2#41078 (⊷ Q (S (S Z)) True)) (synthesize (: $proof2#41078 (⊷ Q (S (S Z)) True)) kb rb (S (S (S Z))))) ((: $proof3#41079 (≞ (→ P Q) (ETV (:: $h#41084 $t#41085) (STV $PQs#41086 $PQc#41087)))) (synthesize (: $proof3#41079 (≞ (→ P Q) (ETV (:: $h#41084 $t#41085) (STV $PQs#41086 $PQc#41087)))) kb rb (S (S (S Z))))) ((: $proof4#41080 (⍃ $h#41084 (S (S Z)))) (synthesize (: $proof4#41080 (⍃ $h#41084 (S (S Z)))) kb rb (S (S (S Z)))))) (: (IDIRecursive P2 $proof2#41078 $proof3#41079 $proof4#41080) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: $h#41084 $t#41085)) (STV (/ (+ (* $PQs#41086 (if (<= (if (< (- 1.0 $PQc#41087) 0) (* -1 (- 1.0 $PQc#41087)) (- 1.0 $PQc#41087)) 1e-09) (max-count) (/ (* $PQc#41087 (lookahead)) (- 1.0 $PQc#41087)))) 1) (+ (if (<= (if (< (- 1.0 $PQc#41087) 0) (* -1 (- 1.0 $PQc#41087)) (- 1.0 $PQc#41087)) 1e-09) (max-count) (/ (* $PQc#41087 (lookahead)) (- 1.0 $PQc#41087))) 1)) (/ (+ (if (<= (if (< (- 1.0 $PQc#41087) 0) (* -1 (- 1.0 $PQc#41087)) (- 1.0 $PQc#41087)) 1e-09) (max-count) (/ (* $PQc#41087 (lookahead)) (- 1.0 $PQc#41087))) 1) (+ (+ (if (<= (if (< (- 1.0 $PQc#41087) 0) (* -1 (- 1.0 $PQc#41087)) (- 1.0 $PQc#41087)) 1e-09) (max-count) (/ (* $PQc#41087 (lookahead)) (- 1.0 $PQc#41087))) 1) 1.0))))))), (: (IDIRecursive P3 Q3 (IDIBase P2 Q2) (SuccMonotonicity (SuccMonotonicity ZeroLTSucc))) (≞ (→ P Q) (ETV (:: (S (S (S Z))) (:: (S (S Z)) ∅)) (STV 0.5 0.6666666666666666)))), (: (IDIRecursive P7 Q7 (IDIBase P3 Q3) (SuccMonotonicity (SuccMonotonicity (SuccMonotonicity ZeroLTSucc)))) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) (:: (S (S (S Z))) ∅)) (STV 1.0 0.6666666666666666)))), (: (IDIRecursive P7 Q7 (IDIBase P2 Q2) (SuccMonotonicity (SuccMonotonicity ZeroLTSucc))) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) (:: (S (S Z)) ∅)) (STV 0.5 0.6666666666666666)))), (: (IDIRecursive P7 Q7 (IDIRecursive P3 Q3 (IDIBase P2 Q2) (SuccMonotonicity (SuccMonotonicity ZeroLTSucc))) (SuccMonotonicity (SuccMonotonicity (SuccMonotonicity ZeroLTSucc)))) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) (:: (S (S (S Z))) (:: (S (S Z)) ∅))) (STV 0.6666666666666666 0.75)))), (let* (((: $proof4#156227 (⍃ (S (S (S Z))) (S (S Z)))) (synthesize (: $proof4#156227 (⍃ (S (S (S Z))) (S (S Z)))) kb rb (S (S (S Z)))))) (: (IDIRecursive P2 Q2 (IDIBase P3 Q3) $proof4#156227) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: (S (S (S Z))) ∅)) (STV (/ (* 1 (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5)))) (+ (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5))) 1)) (/ (+ (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5))) 1) (+ (+ (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5))) 1) 1.0))))))), (let* (((: $proof4#156227 (⍃ (S (S (S (S (S (S (S Z))))))) (S (S Z)))) (synthesize (: $proof4#156227 (⍃ (S (S (S (S (S (S (S Z))))))) (S (S Z)))) kb rb (S (S (S Z)))))) (: (IDIRecursive P2 Q2 (IDIBase P7 Q7) $proof4#156227) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: (S (S (S (S (S (S (S Z))))))) ∅)) (STV (/ (* 1 (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5)))) (+ (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5))) 1)) (/ (+ (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5))) 1) (+ (+ (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5))) 1) 1.0))))))), (let* (((: $proof4#156227 (⍃ (S (S Z)) (S (S Z)))) (synthesize (: $proof4#156227 (⍃ (S (S Z)) (S (S Z)))) kb rb (S (S (S Z)))))) (: (IDIRecursive P2 Q2 (IDIBase P2 Q2) $proof4#156227) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: (S (S Z)) ∅)) (STV (/ (* 0 (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5)))) (+ (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5))) 1)) (/ (+ (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5))) 1) (+ (+ (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5))) 1) 1.0))))))), (let* (((: $proof4#156227 (⍃ (S (S (S Z))) (S (S Z)))) (synthesize (: $proof4#156227 (⍃ (S (S (S Z))) (S (S Z)))) kb rb (S (S (S Z)))))) (: (IDIRecursive P2 Q2 (IDIRecursive P3 Q3 (IDIBase P2 Q2) (SuccMonotonicity (SuccMonotonicity ZeroLTSucc))) $proof4#156227) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: (S (S (S Z))) (:: (S (S Z)) ∅))) (STV (/ (* 0.5 (if (<= (if (< (- 1.0 0.6666666666666666) 0) (* -1 (- 1.0 0.6666666666666666)) (- 1.0 0.6666666666666666)) 1e-09) (max-count) (/ (* 0.6666666666666666 (lookahead)) (- 1.0 0.6666666666666666)))) (+ (if (<= (if (< (- 1.0 0.6666666666666666) 0) (* -1 (- 1.0 0.6666666666666666)) (- 1.0 0.6666666666666666)) 1e-09) (max-count) (/ (* 0.6666666666666666 (lookahead)) (- 1.0 0.6666666666666666))) 1)) (/ (+ (if (<= (if (< (- 1.0 0.6666666666666666) 0) (* -1 (- 1.0 0.6666666666666666)) (- 1.0 0.6666666666666666)) 1e-09) (max-count) (/ (* 0.6666666666666666 (lookahead)) (- 1.0 0.6666666666666666))) 1) (+ (+ (if (<= (if (< (- 1.0 0.6666666666666666) 0) (* -1 (- 1.0 0.6666666666666666)) (- 1.0 0.6666666666666666)) 1e-09) (max-count) (/ (* 0.6666666666666666 (lookahead)) (- 1.0 0.6666666666666666))) 1) 1.0))))))), (let* (((: $proof4#156227 (⍃ (S (S (S (S (S (S (S Z))))))) (S (S Z)))) (synthesize (: $proof4#156227 (⍃ (S (S (S (S (S (S (S Z))))))) (S (S Z)))) kb rb (S (S (S Z)))))) (: (IDIRecursive P2 Q2 (IDIRecursive P7 Q7 (IDIBase P2 Q2) (SuccMonotonicity (SuccMonotonicity ZeroLTSucc))) $proof4#156227) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: (S (S (S (S (S (S (S Z))))))) (:: (S (S Z)) ∅))) (STV (/ (* 0.5 (if (<= (if (< (- 1.0 0.6666666666666666) 0) (* -1 (- 1.0 0.6666666666666666)) (- 1.0 0.6666666666666666)) 1e-09) (max-count) (/ (* 0.6666666666666666 (lookahead)) (- 1.0 0.6666666666666666)))) (+ (if (<= (if (< (- 1.0 0.6666666666666666) 0) (* -1 (- 1.0 0.6666666666666666)) (- 1.0 0.6666666666666666)) 1e-09) (max-count) (/ (* 0.6666666666666666 (lookahead)) (- 1.0 0.6666666666666666))) 1)) (/ (+ (if (<= (if (< (- 1.0 0.6666666666666666) 0) (* -1 (- 1.0 0.6666666666666666)) (- 1.0 0.6666666666666666)) 1e-09) (max-count) (/ (* 0.6666666666666666 (lookahead)) (- 1.0 0.6666666666666666))) 1) (+ (+ (if (<= (if (< (- 1.0 0.6666666666666666) 0) (* -1 (- 1.0 0.6666666666666666)) (- 1.0 0.6666666666666666)) 1e-09) (max-count) (/ (* 0.6666666666666666 (lookahead)) (- 1.0 0.6666666666666666))) 1) 1.0))))))), (let* (((: $proof2#156225 (⊷ Q (S (S (S Z))) False)) (synthesize (: $proof2#156225 (⊷ Q (S (S (S Z))) False)) kb rb (S (S (S Z))))) ((: $proof3#156226 (≞ (→ P Q) (ETV (:: $h#156231 $t#156232) (STV $PQs#156233 $PQc#156234)))) (synthesize (: $proof3#156226 (≞ (→ P Q) (ETV (:: $h#156231 $t#156232) (STV $PQs#156233 $PQc#156234)))) kb rb (S (S (S Z))))) ((: $proof4#156227 (⍃ $h#156231 (S (S (S Z))))) (synthesize (: $proof4#156227 (⍃ $h#156231 (S (S (S Z))))) kb rb (S (S (S Z)))))) (: (IDIRecursive P3 $proof2#156225 $proof3#156226 $proof4#156227) (≞ (→ P Q) (ETV (:: (S (S (S Z))) (:: $h#156231 $t#156232)) (STV (/ (* $PQs#156233 (if (<= (if (< (- 1.0 $PQc#156234) 0) (* -1 (- 1.0 $PQc#156234)) (- 1.0 $PQc#156234)) 1e-09) (max-count) (/ (* $PQc#156234 (lookahead)) (- 1.0 $PQc#156234)))) (+ (if (<= (if (< (- 1.0 $PQc#156234) 0) (* -1 (- 1.0 $PQc#156234)) (- 1.0 $PQc#156234)) 1e-09) (max-count) (/ (* $PQc#156234 (lookahead)) (- 1.0 $PQc#156234))) 1)) (/ (+ (if (<= (if (< (- 1.0 $PQc#156234) 0) (* -1 (- 1.0 $PQc#156234)) (- 1.0 $PQc#156234)) 1e-09) (max-count) (/ (* $PQc#156234 (lookahead)) (- 1.0 $PQc#156234))) 1) (+ (+ (if (<= (if (< (- 1.0 $PQc#156234) 0) (* -1 (- 1.0 $PQc#156234)) (- 1.0 $PQc#156234)) 1e-09) (max-count) (/ (* $PQc#156234 (lookahead)) (- 1.0 $PQc#156234))) 1) 1.0))))))), (let* (((: $proof2#156225 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) (synthesize (: $proof2#156225 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) kb rb (S (S (S Z))))) ((: $proof3#156226 (≞ (→ P Q) (ETV (:: $h#156231 $t#156232) (STV $PQs#156233 $PQc#156234)))) (synthesize (: $proof3#156226 (≞ (→ P Q) (ETV (:: $h#156231 $t#156232) (STV $PQs#156233 $PQc#156234)))) kb rb (S (S (S Z))))) ((: $proof4#156227 (⍃ $h#156231 (S (S (S (S (S (S (S Z))))))))) (synthesize (: $proof4#156227 (⍃ $h#156231 (S (S (S (S (S (S (S Z))))))))) kb rb (S (S (S Z)))))) (: (IDIRecursive P7 $proof2#156225 $proof3#156226 $proof4#156227) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) (:: $h#156231 $t#156232)) (STV (/ (* $PQs#156233 (if (<= (if (< (- 1.0 $PQc#156234) 0) (* -1 (- 1.0 $PQc#156234)) (- 1.0 $PQc#156234)) 1e-09) (max-count) (/ (* $PQc#156234 (lookahead)) (- 1.0 $PQc#156234)))) (+ (if (<= (if (< (- 1.0 $PQc#156234) 0) (* -1 (- 1.0 $PQc#156234)) (- 1.0 $PQc#156234)) 1e-09) (max-count) (/ (* $PQc#156234 (lookahead)) (- 1.0 $PQc#156234))) 1)) (/ (+ (if (<= (if (< (- 1.0 $PQc#156234) 0) (* -1 (- 1.0 $PQc#156234)) (- 1.0 $PQc#156234)) 1e-09) (max-count) (/ (* $PQc#156234 (lookahead)) (- 1.0 $PQc#156234))) 1) (+ (+ (if (<= (if (< (- 1.0 $PQc#156234) 0) (* -1 (- 1.0 $PQc#156234)) (- 1.0 $PQc#156234)) 1e-09) (max-count) (/ (* $PQc#156234 (lookahead)) (- 1.0 $PQc#156234))) 1) 1.0)))))))]
