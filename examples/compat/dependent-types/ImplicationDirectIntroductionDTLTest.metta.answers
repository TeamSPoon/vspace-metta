[]
[]
["===== Test base rule (built-in type checker) ====="]
[(base_prf)]
[(≞ (→ P Q) (ETV (:: (S (S Z)) ∅) (STV 0 0.5)))]
["===== Test recursive rule (built-in type checker) ====="]
[(recursive_prf)]
[(≞ (→ P Q) $etv#733)]
["===== Prove that 2 < 7 (synthesizer) ====="]
[(: (SuccMonotonicity (SuccMonotonicity ZeroLTSucc)) (⍃ (S (S Z)) (S (S (S (S (S (S (S Z)))))))))]
["===== Prove P→Q using base rule (synthesizer) ====="]
[(let* (((: $proof1#6842 (⊷ P $a#6846 False)) (synthesize (: $proof1#6842 (⊷ P $a#6846 False)) kb rb Z)) ((: $proof2#6843 (⊷ Q $a#6846 $qa#6813)) (synthesize (: $proof2#6843 (⊷ Q $a#6846 $qa#6813)) kb rb Z))) (: (IDIBase $proof1#6842 $proof2#6843) (≞ (→ P Q) (ETV (:: $a#6846 ∅) (STV 1 0))))), (: (IDIBase P2 Q2) (≞ (→ P Q) (ETV (:: (S (S Z)) ∅) (STV 0 0.5)))), (let* (((: $proof2#6890 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) (synthesize (: $proof2#6890 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) kb rb Z))) (: (IDIBase P7 $proof2#6890) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) ∅) (STV 0 0.5))))), (let* (((: $proof2#7109 (⊷ Q (S (S Z)) True)) (synthesize (: $proof2#7109 (⊷ Q (S (S Z)) True)) kb rb Z))) (: (IDIBase P2 $proof2#7109) (≞ (→ P Q) (ETV (:: (S (S Z)) ∅) (STV 1 0.5))))), (: (IDIBase P7 Q7) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) ∅) (STV 1 0.5)))), (let* (((: $proof1#7484 (⊷ P $a#7490 False)) (synthesize (: $proof1#7484 (⊷ P $a#7490 False)) kb rb Z)) ((: $proof2#7485 (⊷ Q $a#7490 $qa#7437)) (synthesize (: $proof2#7485 (⊷ Q $a#7490 $qa#7437)) kb rb Z)) ((: $proof3#7486 (≞ (→ P Q) (ETV (:: $h#7491 $t#7492) (STV $PQs#7493 $PQc#7494)))) (synthesize (: $proof3#7486 (≞ (→ P Q) (ETV (:: $h#7491 $t#7492) (STV $PQs#7493 $PQc#7494)))) kb rb Z)) ((: $proof4#7487 (⍃ $h#7491 $a#7490)) (synthesize (: $proof4#7487 (⍃ $h#7491 $a#7490)) kb rb Z))) (: (IDIRecursive $proof1#7484 $proof2#7485 $proof3#7486 $proof4#7487) (≞ (→ P Q) (ETV (:: $a#7490 (:: $h#7491 $t#7492)) (STV $PQs#7493 $PQc#7494))))), (let* (((: $proof3#7541 (≞ (→ P Q) (ETV (:: $h#7546 $t#7547) (STV $PQs#7548 $PQc#7549)))) (synthesize (: $proof3#7541 (≞ (→ P Q) (ETV (:: $h#7546 $t#7547) (STV $PQs#7548 $PQc#7549)))) kb rb Z)) ((: $proof4#7542 (⍃ $h#7546 (S (S Z)))) (synthesize (: $proof4#7542 (⍃ $h#7546 (S (S Z)))) kb rb Z))) (: (IDIRecursive P2 Q2 $proof3#7541 $proof4#7542) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: $h#7546 $t#7547)) (STV (/ (* $PQs#7548 (* $PQc#7549 1.0)) (- (+ (* $PQc#7549 1.0) 1) $PQc#7549)) (/ (+ 1 (if (or (< (if (< (- 1.0 $PQc#7549) 0) (* -1 (- 1.0 $PQc#7549)) (- 1.0 $PQc#7549)) 1e-09) False) (max-count) (/ (* $PQc#7549 (lookahead)) (- 1.0 $PQc#7549)))) (+ (+ 1 (if (or (< (if (< (- 1.0 $PQc#7549) 0) (* -1 (- 1.0 $PQc#7549)) (- 1.0 $PQc#7549)) 1e-09) False) (max-count) (/ (* $PQc#7549 (lookahead)) (- 1.0 $PQc#7549)))) 1.0))))))), (let* (((: $proof2#7540 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) (synthesize (: $proof2#7540 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) kb rb Z)) ((: $proof3#7541 (≞ (→ P Q) (ETV (:: $h#7546 $t#7547) (STV $PQs#7548 $PQc#7549)))) (synthesize (: $proof3#7541 (≞ (→ P Q) (ETV (:: $h#7546 $t#7547) (STV $PQs#7548 $PQc#7549)))) kb rb Z)) ((: $proof4#7542 (⍃ $h#7546 (S (S (S (S (S (S (S Z))))))))) (synthesize (: $proof4#7542 (⍃ $h#7546 (S (S (S (S (S (S (S Z))))))))) kb rb Z))) (: (IDIRecursive P7 $proof2#7540 $proof3#7541 $proof4#7542) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) (:: $h#7546 $t#7547)) (STV (/ (* $PQs#7548 (* $PQc#7549 1.0)) (- (+ (* $PQc#7549 1.0) 1) $PQc#7549)) (/ (+ 1 (if (or (< (if (< (- 1.0 $PQc#7549) 0) (* -1 (- 1.0 $PQc#7549)) (- 1.0 $PQc#7549)) 1e-09) False) (max-count) (/ (* $PQc#7549 (lookahead)) (- 1.0 $PQc#7549)))) (+ (+ 1 (if (or (< (if (< (- 1.0 $PQc#7549) 0) (* -1 (- 1.0 $PQc#7549)) (- 1.0 $PQc#7549)) 1e-09) False) (max-count) (/ (* $PQc#7549 (lookahead)) (- 1.0 $PQc#7549)))) 1.0))))))), (let* (((: $proof2#7763 (⊷ Q (S (S Z)) True)) (synthesize (: $proof2#7763 (⊷ Q (S (S Z)) True)) kb rb Z)) ((: $proof3#7764 (≞ (→ P Q) (ETV (:: $h#7769 $t#7770) (STV $PQs#7771 $PQc#7772)))) (synthesize (: $proof3#7764 (≞ (→ P Q) (ETV (:: $h#7769 $t#7770) (STV $PQs#7771 $PQc#7772)))) kb rb Z)) ((: $proof4#7765 (⍃ $h#7769 (S (S Z)))) (synthesize (: $proof4#7765 (⍃ $h#7769 (S (S Z)))) kb rb Z))) (: (IDIRecursive P2 $proof2#7763 $proof3#7764 $proof4#7765) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: $h#7769 $t#7770)) (STV $PQs#7771 (/ (+ 1 (if (or (< (if (< (- 1.0 $PQc#7772) 0) (* -1 (- 1.0 $PQc#7772)) (- 1.0 $PQc#7772)) 1e-09) False) (max-count) (/ (* $PQc#7772 (lookahead)) (- 1.0 $PQc#7772)))) (+ (+ 1 (if (or (< (if (< (- 1.0 $PQc#7772) 0) (* -1 (- 1.0 $PQc#7772)) (- 1.0 $PQc#7772)) 1e-09) False) (max-count) (/ (* $PQc#7772 (lookahead)) (- 1.0 $PQc#7772)))) 1.0))))))), (let* (((: $proof3#7764 (≞ (→ P Q) (ETV (:: $h#7769 $t#7770) (STV $PQs#7771 $PQc#7772)))) (synthesize (: $proof3#7764 (≞ (→ P Q) (ETV (:: $h#7769 $t#7770) (STV $PQs#7771 $PQc#7772)))) kb rb Z)) ((: $proof4#7765 (⍃ $h#7769 (S (S (S (S (S (S (S Z))))))))) (synthesize (: $proof4#7765 (⍃ $h#7769 (S (S (S (S (S (S (S Z))))))))) kb rb Z))) (: (IDIRecursive P7 Q7 $proof3#7764 $proof4#7765) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) (:: $h#7769 $t#7770)) (STV $PQs#7771 (/ (+ 1 (if (or (< (if (< (- 1.0 $PQc#7772) 0) (* -1 (- 1.0 $PQc#7772)) (- 1.0 $PQc#7772)) 1e-09) False) (max-count) (/ (* $PQc#7772 (lookahead)) (- 1.0 $PQc#7772)))) (+ (+ 1 (if (or (< (if (< (- 1.0 $PQc#7772) 0) (* -1 (- 1.0 $PQc#7772)) (- 1.0 $PQc#7772)) 1e-09) False) (max-count) (/ (* $PQc#7772 (lookahead)) (- 1.0 $PQc#7772)))) 1.0)))))))]
["===== Prove P→Q using base, recursive and order rules (synthesizer) ====="]
[(let* (((: $proof1#10439 (⊷ P $a#10443 False)) (synthesize (: $proof1#10439 (⊷ P $a#10443 False)) kb rb (S (S Z)))) ((: $proof2#10440 (⊷ Q $a#10443 $qa#10410)) (synthesize (: $proof2#10440 (⊷ Q $a#10443 $qa#10410)) kb rb (S (S Z))))) (: (IDIBase $proof1#10439 $proof2#10440) (≞ (→ P Q) (ETV (:: $a#10443 ∅) (STV 1 0))))), (: (IDIBase P2 Q2) (≞ (→ P Q) (ETV (:: (S (S Z)) ∅) (STV 0 0.5)))), (let* (((: $proof2#10928 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) (synthesize (: $proof2#10928 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) kb rb (S (S Z))))) (: (IDIBase P7 $proof2#10928) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) ∅) (STV 0 0.5))))), (let* (((: $proof2#12749 (⊷ Q (S (S Z)) True)) (synthesize (: $proof2#12749 (⊷ Q (S (S Z)) True)) kb rb (S (S Z))))) (: (IDIBase P2 $proof2#12749) (≞ (→ P Q) (ETV (:: (S (S Z)) ∅) (STV 1 0.5))))), (: (IDIBase P7 Q7) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) ∅) (STV 1 0.5)))), (let* (((: $proof1#14726 (⊷ P $a#14732 False)) (synthesize (: $proof1#14726 (⊷ P $a#14732 False)) kb rb (S (S Z)))) ((: $proof2#14727 (⊷ Q $a#14732 $qa#14679)) (synthesize (: $proof2#14727 (⊷ Q $a#14732 $qa#14679)) kb rb (S (S Z)))) ((: $proof3#14728 (≞ (→ P Q) (ETV (:: $h#14733 $t#14734) (STV $PQs#14735 $PQc#14736)))) (synthesize (: $proof3#14728 (≞ (→ P Q) (ETV (:: $h#14733 $t#14734) (STV $PQs#14735 $PQc#14736)))) kb rb (S (S Z)))) ((: $proof4#14729 (⍃ $h#14733 $a#14732)) (synthesize (: $proof4#14729 (⍃ $h#14733 $a#14732)) kb rb (S (S Z))))) (: (IDIRecursive $proof1#14726 $proof2#14727 $proof3#14728 $proof4#14729) (≞ (→ P Q) (ETV (:: $a#14732 (:: $h#14733 $t#14734)) (STV $PQs#14735 $PQc#14736))))), (let* (((: $proof4#15225 (⍃ (S (S Z)) (S (S Z)))) (synthesize (: $proof4#15225 (⍃ (S (S Z)) (S (S Z)))) kb rb (S (S Z))))) (: (IDIRecursive P2 Q2 (IDIBase P2 Q2) $proof4#15225) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: (S (S Z)) ∅)) (STV (/ (* 0 (* 0.5 1.0)) (- (+ (* 0.5 1.0) 1) 0.5)) (/ (+ 1 (if (or (< (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) False) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5)))) (+ (+ 1 (if (or (< (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) False) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5)))) 1.0))))))), (let* (((: $proof4#15225 (⍃ (S (S (S (S (S (S (S Z))))))) (S (S Z)))) (synthesize (: $proof4#15225 (⍃ (S (S (S (S (S (S (S Z))))))) (S (S Z)))) kb rb (S (S Z))))) (: (IDIRecursive P2 Q2 (IDIBase P7 Q7) $proof4#15225) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: (S (S (S (S (S (S (S Z))))))) ∅)) (STV (/ (* 1 (* 0.5 1.0)) (- (+ (* 0.5 1.0) 1) 0.5)) (/ (+ 1 (if (or (< (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) False) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5)))) (+ (+ 1 (if (or (< (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) False) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5)))) 1.0))))))), (let* (((: $proof2#15223 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) (synthesize (: $proof2#15223 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) kb rb (S (S Z)))) ((: $proof3#15224 (≞ (→ P Q) (ETV (:: $h#15229 $t#15230) (STV $PQs#15231 $PQc#15232)))) (synthesize (: $proof3#15224 (≞ (→ P Q) (ETV (:: $h#15229 $t#15230) (STV $PQs#15231 $PQc#15232)))) kb rb (S (S Z)))) ((: $proof4#15225 (⍃ $h#15229 (S (S (S (S (S (S (S Z))))))))) (synthesize (: $proof4#15225 (⍃ $h#15229 (S (S (S (S (S (S (S Z))))))))) kb rb (S (S Z))))) (: (IDIRecursive P7 $proof2#15223 $proof3#15224 $proof4#15225) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) (:: $h#15229 $t#15230)) (STV (/ (* $PQs#15231 (* $PQc#15232 1.0)) (- (+ (* $PQc#15232 1.0) 1) $PQc#15232)) (/ (+ 1 (if (or (< (if (< (- 1.0 $PQc#15232) 0) (* -1 (- 1.0 $PQc#15232)) (- 1.0 $PQc#15232)) 1e-09) False) (max-count) (/ (* $PQc#15232 (lookahead)) (- 1.0 $PQc#15232)))) (+ (+ 1 (if (or (< (if (< (- 1.0 $PQc#15232) 0) (* -1 (- 1.0 $PQc#15232)) (- 1.0 $PQc#15232)) 1e-09) False) (max-count) (/ (* $PQc#15232 (lookahead)) (- 1.0 $PQc#15232)))) 1.0))))))), (let* (((: $proof2#34838 (⊷ Q (S (S Z)) True)) (synthesize (: $proof2#34838 (⊷ Q (S (S Z)) True)) kb rb (S (S Z)))) ((: $proof3#34839 (≞ (→ P Q) (ETV (:: $h#34844 $t#34845) (STV $PQs#34846 $PQc#34847)))) (synthesize (: $proof3#34839 (≞ (→ P Q) (ETV (:: $h#34844 $t#34845) (STV $PQs#34846 $PQc#34847)))) kb rb (S (S Z)))) ((: $proof4#34840 (⍃ $h#34844 (S (S Z)))) (synthesize (: $proof4#34840 (⍃ $h#34844 (S (S Z)))) kb rb (S (S Z))))) (: (IDIRecursive P2 $proof2#34838 $proof3#34839 $proof4#34840) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: $h#34844 $t#34845)) (STV $PQs#34846 (/ (+ 1 (if (or (< (if (< (- 1.0 $PQc#34847) 0) (* -1 (- 1.0 $PQc#34847)) (- 1.0 $PQc#34847)) 1e-09) False) (max-count) (/ (* $PQc#34847 (lookahead)) (- 1.0 $PQc#34847)))) (+ (+ 1 (if (or (< (if (< (- 1.0 $PQc#34847) 0) (* -1 (- 1.0 $PQc#34847)) (- 1.0 $PQc#34847)) 1e-09) False) (max-count) (/ (* $PQc#34847 (lookahead)) (- 1.0 $PQc#34847)))) 1.0))))))), (: (IDIRecursive P7 Q7 (IDIBase P2 Q2) (SuccMonotonicity (SuccMonotonicity ZeroLTSucc))) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) (:: (S (S Z)) ∅)) (STV 0 0.6666666666666666)))), (let* (((: $proof4#34840 (⍃ (S (S (S (S (S (S (S Z))))))) (S (S (S (S (S (S (S Z))))))))) (synthesize (: $proof4#34840 (⍃ (S (S (S (S (S (S (S Z))))))) (S (S (S (S (S (S (S Z))))))))) kb rb (S (S Z))))) (: (IDIRecursive P7 Q7 (IDIBase P7 Q7) $proof4#34840) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) (:: (S (S (S (S (S (S (S Z))))))) ∅)) (STV 1 (/ (+ 1 (if (or (< (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) False) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5)))) (+ (+ 1 (if (or (< (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) False) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5)))) 1.0)))))))]
23.33user 0.04system 0:23.37elapsed 100%CPU (0avgtext+0avgdata 56884maxresident)k
0inputs+0outputs (0major+10220minor)pagefaults 0swaps
