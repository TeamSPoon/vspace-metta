[]
[]
[]
[deduction_idi_prf]
[(≞ (→ P Q) $tv#912)]
["===== Prove that P→Q based on one piece of evidence ====="]
[(Error (assertEqualToResult (synthesize (: $proof (≞ (→ P Q) $etv)) kb rb (fromNumber 1)) ((: (IDIBase P2 Q2) (≞ (→ P Q) (ETV (:: (S (S Z)) ∅) (STV 0 0.5)))) (: (IDIBase P7 Q2) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) ∅) (STV 1 0.5)))))) 
Expected: [(: (IDIBase P2 Q2) (≞ (→ P Q) (ETV (:: (S (S Z)) ∅) (STV 0 0.5)))), (: (IDIBase P7 Q2) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) ∅) (STV 1 0.5))))]
Got: [(let* (((: $proof#4076 (≞ (→ P Q) (ETV $evidence#3202 $etv))) (synthesize (: $proof#4076 (≞ (→ P Q) (ETV $evidence#3202 $etv))) kb rb Z))) (: (EvidenceElimination $proof#4076) (≞ (→ P Q) $etv))), (let* (((: $proof4#4197 (≞ (→ P P) (STV $PQs#4203 $PQc#4208))) (synthesize (: $proof4#4197 (≞ (→ P P) (STV $PQs#4203 $PQc#4208))) kb rb Z)) ((: $proof5#4198 (≞ (→ P Q) (STV $QRs#4204 $QRc#4209))) (synthesize (: $proof5#4198 (≞ (→ P Q) (STV $QRs#4204 $QRc#4209))) kb rb Z))) (: (Deduction Pm Pm Qm $proof4#4197 $proof5#4198) (≞ (→ P Q) (STV (if (< 0.9999 0.2) 0.3 (+ (* $PQs#4203 $QRs#4204) (/ (* (- 1 $PQs#4203) (- 0.3 (* 0.2 $QRs#4204))) (- 1 0.2)))) (if (< 0.3 (if (< 0.3 (if (< 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)) 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209))) 0.3 (if (< 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)) 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)))) 0.3 (if (< 0.3 (if (< 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)) 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209))) 0.3 (if (< 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)) 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)))))))), (let* (((: $proof4#4197 (≞ (→ P Q) (STV $PQs#4203 $PQc#4208))) (synthesize (: $proof4#4197 (≞ (→ P Q) (STV $PQs#4203 $PQc#4208))) kb rb Z)) ((: $proof5#4198 (≞ (→ Q Q) (STV $QRs#4204 $QRc#4209))) (synthesize (: $proof5#4198 (≞ (→ Q Q) (STV $QRs#4204 $QRc#4209))) kb rb Z))) (: (Deduction Pm Qm Qm $proof4#4197 $proof5#4198) (≞ (→ P Q) (STV (if (< 0.9999 0.3) 0.3 (+ (* $PQs#4203 $QRs#4204) (/ (* (- 1 $PQs#4203) (- 0.3 (* 0.3 $QRs#4204))) (- 1 0.3)))) (if (< 0.3 (if (< 0.2 (if (< 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)) 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209))) 0.2 (if (< 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)) 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)))) 0.3 (if (< 0.2 (if (< 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)) 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209))) 0.2 (if (< 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)) 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)))))))), (let* (((: $proof4#4197 (≞ (→ P R) (STV $PQs#4203 $PQc#4208))) (synthesize (: $proof4#4197 (≞ (→ P R) (STV $PQs#4203 $PQc#4208))) kb rb Z)) ((: $proof5#4198 (≞ (→ R Q) (STV $QRs#4204 $QRc#4209))) (synthesize (: $proof5#4198 (≞ (→ R Q) (STV $QRs#4204 $QRc#4209))) kb rb Z))) (: (Deduction Pm Rm Qm $proof4#4197 $proof5#4198) (≞ (→ P Q) (STV (if (< 0.9999 0.4) 0.3 (+ (* $PQs#4203 $QRs#4204) (/ (* (- 1 $PQs#4203) (- 0.3 (* 0.4 $QRs#4204))) (- 1 0.4)))) (if (< 0.3 (if (< 0.1 (if (< 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)) 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209))) 0.1 (if (< 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)) 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)))) 0.3 (if (< 0.1 (if (< 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)) 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209))) 0.1 (if (< 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)) 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)))))))), (let* (((: $proof4#4197 (≞ (→ P (→ Q R)) (STV $PQs#4203 $PQc#4208))) (synthesize (: $proof4#4197 (≞ (→ P (→ Q R)) (STV $PQs#4203 $PQc#4208))) kb rb Z)) ((: $proof5#4198 (≞ (→ (→ Q R) Q) (STV $QRs#4204 $QRc#4209))) (synthesize (: $proof5#4198 (≞ (→ (→ Q R) Q) (STV $QRs#4204 $QRc#4209))) kb rb Z))) (: (Deduction Pm QRm Qm $proof4#4197 $proof5#4198) (≞ (→ P Q) (STV (if (< 0.9999 0.9) 0.3 (+ (* $PQs#4203 $QRs#4204) (/ (* (- 1 $PQs#4203) (- 0.3 (* 0.9 $QRs#4204))) (- 1 0.9)))) (if (< 0.3 (if (< 0.7 (if (< 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)) 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209))) 0.7 (if (< 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)) 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)))) 0.3 (if (< 0.7 (if (< 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)) 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209))) 0.7 (if (< 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)) 0.2 (if (< $PQc#4208 $QRc#4209) $PQc#4208 $QRc#4209)))))))), (let* (((: $proof3#4943 (≞ (→ P Q) (ETV (:: $h#4948 $t#4949) (STV $PQs#4950 $PQc#4951)))) (synthesize (: $proof3#4943 (≞ (→ P Q) (ETV (:: $h#4948 $t#4949) (STV $PQs#4950 $PQc#4951)))) kb rb Z)) ((: $proof4#4944 (⍃ $h#4948 (S (S Z)))) (synthesize (: $proof4#4944 (⍃ $h#4948 (S (S Z)))) kb rb Z))) (: (IDIRecursive P2 Q2 $proof3#4943 $proof4#4944) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: $h#4948 $t#4949)) (STV (/ (* $PQs#4950 (* $PQc#4951 1.0)) (- (+ (* $PQc#4951 1.0) 1) $PQc#4951)) (/ (+ 1 (if (or (< (if (< (- 1.0 $PQc#4951) 0) (* -1 (- 1.0 $PQc#4951)) (- 1.0 $PQc#4951)) 1e-09) False) (max-count) (/ (* $PQc#4951 (lookahead)) (- 1.0 $PQc#4951)))) (+ (+ 1 (if (or (< (if (< (- 1.0 $PQc#4951) 0) (* -1 (- 1.0 $PQc#4951)) (- 1.0 $PQc#4951)) 1e-09) False) (max-count) (/ (* $PQc#4951 (lookahead)) (- 1.0 $PQc#4951)))) 1.0))))))), (let* (((: $proof2#4942 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) (synthesize (: $proof2#4942 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) kb rb Z)) ((: $proof3#4943 (≞ (→ P Q) (ETV (:: $h#4948 $t#4949) (STV $PQs#4950 $PQc#4951)))) (synthesize (: $proof3#4943 (≞ (→ P Q) (ETV (:: $h#4948 $t#4949) (STV $PQs#4950 $PQc#4951)))) kb rb Z)) ((: $proof4#4944 (⍃ $h#4948 (S (S (S (S (S (S (S Z))))))))) (synthesize (: $proof4#4944 (⍃ $h#4948 (S (S (S (S (S (S (S Z))))))))) kb rb Z))) (: (IDIRecursive P7 $proof2#4942 $proof3#4943 $proof4#4944) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) (:: $h#4948 $t#4949)) (STV (/ (* $PQs#4950 (* $PQc#4951 1.0)) (- (+ (* $PQc#4951 1.0) 1) $PQc#4951)) (/ (+ 1 (if (or (< (if (< (- 1.0 $PQc#4951) 0) (* -1 (- 1.0 $PQc#4951)) (- 1.0 $PQc#4951)) 1e-09) False) (max-count) (/ (* $PQc#4951 (lookahead)) (- 1.0 $PQc#4951)))) (+ (+ 1 (if (or (< (if (< (- 1.0 $PQc#4951) 0) (* -1 (- 1.0 $PQc#4951)) (- 1.0 $PQc#4951)) 1e-09) False) (max-count) (/ (* $PQc#4951 (lookahead)) (- 1.0 $PQc#4951)))) 1.0))))))), (let* (((: $proof1#5208 (⊷ P $a#5214 False)) (synthesize (: $proof1#5208 (⊷ P $a#5214 False)) kb rb Z)) ((: $proof2#5209 (⊷ Q $a#5214 $qa#4881)) (synthesize (: $proof2#5209 (⊷ Q $a#5214 $qa#4881)) kb rb Z)) ((: $proof3#5210 (≞ (→ P Q) (ETV (:: $h#5215 $t#5216) (STV $PQs#5217 $PQc#5218)))) (synthesize (: $proof3#5210 (≞ (→ P Q) (ETV (:: $h#5215 $t#5216) (STV $PQs#5217 $PQc#5218)))) kb rb Z)) ((: $proof4#5211 (⍃ $h#5215 $a#5214)) (synthesize (: $proof4#5211 (⍃ $h#5215 $a#5214)) kb rb Z))) (: (IDIRecursive $proof1#5208 $proof2#5209 $proof3#5210 $proof4#5211) (≞ (→ P Q) (ETV (:: $a#5214 (:: $h#5215 $t#5216)) (STV $PQs#5217 $PQc#5218))))), (let* (((: $proof2#5280 (⊷ Q (S (S Z)) True)) (synthesize (: $proof2#5280 (⊷ Q (S (S Z)) True)) kb rb Z)) ((: $proof3#5281 (≞ (→ P Q) (ETV (:: $h#5286 $t#5287) (STV $PQs#5288 $PQc#5289)))) (synthesize (: $proof3#5281 (≞ (→ P Q) (ETV (:: $h#5286 $t#5287) (STV $PQs#5288 $PQc#5289)))) kb rb Z)) ((: $proof4#5282 (⍃ $h#5286 (S (S Z)))) (synthesize (: $proof4#5282 (⍃ $h#5286 (S (S Z)))) kb rb Z))) (: (IDIRecursive P2 $proof2#5280 $proof3#5281 $proof4#5282) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: $h#5286 $t#5287)) (STV $PQs#5288 (/ (+ 1 (if (or (< (if (< (- 1.0 $PQc#5289) 0) (* -1 (- 1.0 $PQc#5289)) (- 1.0 $PQc#5289)) 1e-09) False) (max-count) (/ (* $PQc#5289 (lookahead)) (- 1.0 $PQc#5289)))) (+ (+ 1 (if (or (< (if (< (- 1.0 $PQc#5289) 0) (* -1 (- 1.0 $PQc#5289)) (- 1.0 $PQc#5289)) 1e-09) False) (max-count) (/ (* $PQc#5289 (lookahead)) (- 1.0 $PQc#5289)))) 1.0))))))), (let* (((: $proof3#5281 (≞ (→ P Q) (ETV (:: $h#5286 $t#5287) (STV $PQs#5288 $PQc#5289)))) (synthesize (: $proof3#5281 (≞ (→ P Q) (ETV (:: $h#5286 $t#5287) (STV $PQs#5288 $PQc#5289)))) kb rb Z)) ((: $proof4#5282 (⍃ $h#5286 (S (S (S (S (S (S (S Z))))))))) (synthesize (: $proof4#5282 (⍃ $h#5286 (S (S (S (S (S (S (S Z))))))))) kb rb Z))) (: (IDIRecursive P7 Q7 $proof3#5281 $proof4#5282) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) (:: $h#5286 $t#5287)) (STV $PQs#5288 (/ (+ 1 (if (or (< (if (< (- 1.0 $PQc#5289) 0) (* -1 (- 1.0 $PQc#5289)) (- 1.0 $PQc#5289)) 1e-09) False) (max-count) (/ (* $PQc#5289 (lookahead)) (- 1.0 $PQc#5289)))) (+ (+ 1 (if (or (< (if (< (- 1.0 $PQc#5289) 0) (* -1 (- 1.0 $PQc#5289)) (- 1.0 $PQc#5289)) 1e-09) False) (max-count) (/ (* $PQc#5289 (lookahead)) (- 1.0 $PQc#5289)))) 1.0))))))), (: (IDIBase P2 Q2) (≞ (→ P Q) (ETV (:: (S (S Z)) ∅) (STV 0 0.5)))), (let* (((: $proof2#5617 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) (synthesize (: $proof2#5617 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) kb rb Z))) (: (IDIBase P7 $proof2#5617) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) ∅) (STV 0 0.5))))), (let* (((: $proof2#5868 (⊷ Q (S (S Z)) True)) (synthesize (: $proof2#5868 (⊷ Q (S (S Z)) True)) kb rb Z))) (: (IDIBase P2 $proof2#5868) (≞ (→ P Q) (ETV (:: (S (S Z)) ∅) (STV 1 0.5))))), (: (IDIBase P7 Q7) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) ∅) (STV 1 0.5)))), (let* (((: $proof1#6158 (⊷ P $a#6162 False)) (synthesize (: $proof1#6158 (⊷ P $a#6162 False)) kb rb Z)) ((: $proof2#6159 (⊷ Q $a#6162 $qa#5572)) (synthesize (: $proof2#6159 (⊷ Q $a#6162 $qa#5572)) kb rb Z))) (: (IDIBase $proof1#6158 $proof2#6159) (≞ (→ P Q) (ETV (:: $a#6162 ∅) (STV 1 0)))))]
Missed result: (: (IDIBase P7 Q2) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) ∅) (STV 1 0.5)))))]
3.15user 0.01system 0:03.16elapsed 99%CPU (0avgtext+0avgdata 36388maxresident)k
0inputs+0outputs (0major+5067minor)pagefaults 0swaps
