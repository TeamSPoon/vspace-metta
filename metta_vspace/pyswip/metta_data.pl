
metta_impl(['type-cast', Atom, Type, Space], [fn, [chain, [eval, ['get-metatype', Atom]], Meta, [eval, ['if-equal', Type, Meta, [return, Atom], [chain, [eval, ['collapse-get-type', Atom, Space]], Actual_types, [chain, [eval, ['foldl-atom', Actual_types, 'False', A, B, [chain, [eval, ['match-types', B, Type, 'True', 'False']], Is_b_comp, [chain, [eval, [or, A, Is_b_comp]], Or, Or]]]], Is_some_comp, [eval, [if, Is_some_comp, [return, Atom], [return, ['Error', Atom, 'BadType']]]]]]]]]]).
metta_impl(['type-cast', Atom, Type, Space], [chain, [eval, ['get-type', Atom, Space]], Actual_type, [eval, [switch, [Actual_type, Type], [[['%Undefined%', _], Atom], [[_, '%Undefined%'], Atom], [[Type, _], Atom], [_, ['Error', Atom, 'BadType']]]]]]).
metta_impl(['switch-internal', Atom, [[Pattern, Template], Tail]], [match, Atom, Pattern, Template, [eval, [switch, Atom, Tail]]]).
metta_impl(['switch-internal', Atom, [[Pattern, Template], Tail]], [fn, [unify, Atom, Pattern, [return, Template], [chain, [eval, [switch, Atom, Tail]], Ret, [return, Ret]]]]).
metta_impl([switch, Atom, Cases], [fn, [chain, [decons, Cases], List, [chain, [eval, ['switch-internal', Atom, List]], Res, [chain, [eval, ['if-not-reducible', Res, 'Empty', Res]], X, [return, X]]]]]).
metta_impl([switch, Atom, Cases], [chain, [decons, Cases], List, [eval, ['switch-internal', Atom, List]]]).
metta_impl([subst, Atom, Var, Templ], [match, Atom, Var, Templ, ['Error', [subst, Atom, Var, Templ], 'subst expects a variable as a second argument']]).
metta_impl(['return-on-error', Atom, Then], [fn, [eval, ['if-empty', Atom, [return, [return, 'Empty']], [eval, ['if-error', Atom, [return, [return, Atom]], [return, Then]]]]]]).
metta_impl(['return-on-error', Atom, Then], [eval, ['if-empty', Atom, 'Empty', [eval, ['if-error', Atom, Atom, Then]]]]).
metta_impl([reduce, Atom, Var, Templ], [chain, [eval, Atom], Res, [eval, ['if-error', Res, Res, [eval, ['if-empty', Res, [eval, [subst, Atom, Var, Templ]], [eval, [reduce, Res, Var, Templ]]]]]]]).
metta_impl(['metta-call', Atom, Type, Space], [fn, [eval, ['if-error', Atom, [return, Atom], [chain, [eval, Atom], Result, [eval, ['if-not-reducible', Result, [return, Atom], [eval, ['if-empty', Result, [return, 'Empty'], [eval, ['if-error', Result, [return, Result], [chain, [eval, [interpret, Result, Type, Space]], Ret, [return, Ret]]]]]]]]]]]]).
metta_impl(['match-types', Type1, Type2, Then, Else], [fn, [eval, ['if-equal', Type1, '%Undefined%', [return, Then], [eval, ['if-equal', Type2, '%Undefined%', [return, Then], [eval, ['if-equal', Type1, 'Atom', [return, Then], [eval, ['if-equal', Type2, 'Atom', [return, Then], [unify, Type1, Type2, [return, Then], [return, Else]]]]]]]]]]]).
metta_impl([match, Space, Pattern, Template], [unify, Pattern, Space, Template, 'Empty']).
metta_impl(['map-atom', List, Var, Map], [fn, [eval, ['if-decons', List, Head, Tail, [chain, [eval, ['map-atom', Tail, Var, Map]], Tail_mapped, [chain, [eval, [apply, Head, Var, Map]], Map_expr, [chain, Map_expr, Head_mapped, [chain, [cons, Head_mapped, Tail_mapped], Res, [return, Res]]]]], [return, []]]]]).
metta_impl([let, Pattern, Atom, Template], [unify, Atom, Pattern, Template, 'Empty']).
metta_impl(['let*', Pairs, Template], [eval, ['if-decons', Pairs, [Pattern, Atom], Tail, [let, Pattern, Atom, ['let*', Tail, Template]], Template]]).
metta_impl(['is-function', Type], [fn, [chain, [eval, ['get-metatype', Type]], Meta, [eval, [switch, [Type, Meta], [[[_, 'Expression'], [eval, ['if-decons', Type, Head, _tail, [unify, Head, ->, [return, 'True'], [return, 'False']], [return, ['Error', ['is-function', Type], 'is-function non-empty expression as an argument']]]]], [_, [return, 'False']]]]]]]).
metta_impl(['is-function', Type], [chain, [eval, ['get-metatype', Type]], Meta, [eval, [switch, [Type, Meta], [[[_, 'Expression'], [chain, [eval, [car, Type]], Head, [match, Head, ->, 'True', 'False']]], [_, 'False']]]]]).
metta_impl(['interpret-tuple', Atom, Space], [match, Atom, [], Atom, [eval, ['if-decons', Atom, Head, Tail, [chain, [eval, [interpret, Head, '%Undefined%', Space]], Rhead, [chain, [eval, ['interpret-tuple', Tail, Space]], Rtail, [cons, Rhead, Rtail]]], ['Error', ['interpret-tuple', Atom, Space], 'Non-empty expression atom is expected as an argument']]]]).
metta_impl(['interpret-tuple', Atom, Space], [fn, [unify, Atom, [], [return, Atom], [eval, ['if-decons', Atom, Head, Tail, [chain, [eval, [interpret, Head, '%Undefined%', Space]], Rhead, [eval, ['if-empty', Rhead, [return, 'Empty'], [chain, [eval, ['interpret-tuple', Tail, Space]], Rtail, [eval, ['if-empty', Rtail, [return, 'Empty'], [chain, [cons, Rhead, Rtail], Ret, [return, Ret]]]]]]]], [return, ['Error', ['interpret-tuple', Atom, Space], 'Non-empty expression atom is expected as an argument']]]]]]).
metta_impl(['interpret-func', Expr, Type, Space], [eval, ['if-decons', Expr, Op, Args, [chain, [eval, [interpret, Op, Type, Space]], Reduced_op, [eval, ['return-on-error', Reduced_op, [eval, ['if-decons', Type, Arrow, Arg_types, [chain, [eval, ['interpret-args', Expr, Args, Arg_types, Space]], Reduced_args, [eval, ['return-on-error', Reduced_args, [cons, Reduced_op, Reduced_args]]]], ['Error', Type, 'Function type expected']]]]]], ['Error', Expr, 'Non-empty expression atom is expected']]]).
metta_impl(['interpret-func', Expr, Type, Ret_type, Space], [fn, [eval, ['if-decons', Expr, Op, Args, [chain, [eval, [interpret, Op, Type, Space]], Reduced_op, [eval, ['return-on-error', Reduced_op, [eval, ['if-decons', Type, Arrow, Arg_types, [chain, [eval, ['interpret-args', Expr, Args, Arg_types, Ret_type, Space]], Reduced_args, [eval, ['return-on-error', Reduced_args, [chain, [cons, Reduced_op, Reduced_args], R, [return, R]]]]], [return, ['Error', Type, 'Function type expected']]]]]]], [return, ['Error', Expr, 'Non-empty expression atom is expected']]]]]).
metta_impl(['interpret-expression', Atom, Type, Space], [fn, [eval, ['if-decons', Atom, Op, Args, [chain, [eval, ['get-type', Op, Space]], Op_type, [chain, [eval, ['is-function', Op_type]], Is_func, [unify, Is_func, 'True', [chain, [eval, ['interpret-func', Atom, Op_type, Type, Space]], Reduced_atom, [chain, [eval, ['metta-call', Reduced_atom, Type, Space]], Ret, [return, Ret]]], [chain, [eval, ['interpret-tuple', Atom, Space]], Reduced_atom, [chain, [eval, ['metta-call', Reduced_atom, Type, Space]], Ret, [return, Ret]]]]]], [chain, [eval, ['type-cast', Atom, Type, Space]], Ret, [return, Ret]]]]]).
metta_impl(['interpret-expression', Atom, Type, Space], [eval, ['if-decons', Atom, Op, Args, [chain, [eval, ['get-type', Op, Space]], Op_type, [chain, [eval, ['is-function', Op_type]], Is_func, [match, Is_func, 'True', [chain, [eval, ['interpret-func', Atom, Op_type, Space]], Reduced_atom, [eval, [call, Reduced_atom, Type, Space]]], [chain, [eval, ['interpret-tuple', Atom, Space]], Reduced_atom, [eval, [call, Reduced_atom, Type, Space]]]]]], [eval, ['type-cast', Atom, Type, Space]]]]).
metta_impl(['interpret-args-tail', Atom, Head, Args_tail, Args_tail_types, Space], [chain, [eval, ['interpret-args', Atom, Args_tail, Args_tail_types, Space]], Reduced_tail, [eval, ['return-on-error', Reduced_tail, [cons, Head, Reduced_tail]]]]).
metta_impl(['interpret-args-tail', Atom, Head, Args_tail, Args_tail_types, Ret_type, Space], [fn, [chain, [eval, ['interpret-args', Atom, Args_tail, Args_tail_types, Ret_type, Space]], Reduced_tail, [eval, ['return-on-error', Reduced_tail, [chain, [cons, Head, Reduced_tail], Ret, [return, Ret]]]]]]).
metta_impl(['interpret-args', Atom, Args, Arg_types, Space], [match, Args, [], [match, Arg_types, [Ret], [], ['Error', Atom, 'BadType']], [eval, ['if-decons', Args, Head, Tail, [eval, ['if-decons', Arg_types, Head_type, Tail_types, [chain, [eval, [interpret, Head, Head_type, Space]], Reduced_head, [eval, ['if-equal', Reduced_head, Head, [eval, ['interpret-args-tail', Atom, Reduced_head, Tail, Tail_types, Space]], [eval, ['return-on-error', Reduced_head, [eval, ['interpret-args-tail', Atom, Reduced_head, Tail, Tail_types, Space]]]]]]], ['Error', Atom, 'BadType']]], ['Error', ['interpret-atom', Atom, Args, Arg_types, Space], 'Non-empty expression atom is expected']]]]).
metta_impl(['interpret-args', Atom, Args, Arg_types, Ret_type, Space], [fn, [unify, Args, [], [eval, ['if-decons', Arg_types, Actual_ret_type, _tail, [eval, ['match-types', Actual_ret_type, Ret_type, [return, []], [return, ['Error', Atom, 'BadType']]]], [return, ['Error', ['interpret-args', Atom, Args, Arg_types, Ret_type, Space], 'interpret-args expects a non-empty value for $arg-types argument']]]], [eval, ['if-decons', Args, Head, Tail, [eval, ['if-decons', Arg_types, Head_type, Tail_types, [chain, [eval, [interpret, Head, Head_type, Space]], Reduced_head, [eval, ['if-equal', Reduced_head, Head, [chain, [eval, ['interpret-args-tail', Atom, Reduced_head, Tail, Tail_types, Ret_type, Space]], Ret, [return, Ret]], [eval, ['return-on-error', Reduced_head, [chain, [eval, ['interpret-args-tail', Atom, Reduced_head, Tail, Tail_types, Ret_type, Space]], Ret, [return, Ret]]]]]]], [return, ['Error', Atom, 'BadType']]]], [return, ['Error', ['interpret-atom', Atom, Args, Arg_types, Space], 'Non-empty expression atom is expected']]]]]]).
metta_impl([interpret, Atom, Type, Space], [fn, [chain, [eval, ['get-metatype', Atom]], Meta, [eval, ['if-equal', Type, 'Atom', [return, Atom], [eval, ['if-equal', Type, Meta, [return, Atom], [eval, [switch, [Type, Meta], [[[_type, 'Variable'], [return, Atom]], [[_type, 'Symbol'], [chain, [eval, ['type-cast', Atom, Type, Space]], Ret, [return, Ret]]], [[_type, 'Grounded'], [chain, [eval, ['type-cast', Atom, Type, Space]], Ret, [return, Ret]]], [[_type, 'Expression'], [chain, [eval, ['interpret-expression', Atom, Type, Space]], Ret, [return, Ret]]]]]]]]]]]]).
metta_impl([interpret, Atom, Type, Space], [chain, [eval, ['get-metatype', Atom]], Meta, [eval, [switch, [Type, Meta], [[['Atom', _meta], Atom], [[Meta, Meta], Atom], [[_type, 'Variable'], Atom], [[_type, 'Symbol'], [eval, ['type-cast', Atom, Type, Space]]], [[_type, 'Grounded'], [eval, ['type-cast', Atom, Type, Space]]], [[_type, 'Expression'], [eval, ['interpret-expression', Atom, Type, Space]]]]]]]).
metta_impl(['if-not-reducible', Atom, Then, Else], [fn, [eval, ['if-equal', Atom, 'NotReducible', [return, Then], [return, Else]]]]).
metta_impl(['if-non-empty-expression', Atom, Then, Else], [fn, [chain, [eval, ['get-metatype', Atom]], Type, [eval, ['if-equal', Type, 'Expression', [eval, ['if-equal', Atom, [], [return, Else], [return, Then]]], [return, Else]]]]]).
metta_impl(['if-non-empty-expression', Atom, Then, Else], [chain, [eval, ['get-metatype', Atom]], Type, [eval, ['if-equal', Type, 'Expression', [eval, ['if-equal', Atom, [], Else, Then]], Else]]]).
metta_impl(['if-error', Atom, Then, Else], [fn, [eval, ['if-decons', Atom, Head, _, [eval, ['if-equal', Head, 'Error', [return, Then], [return, Else]]], [return, Else]]]]).
metta_impl(['if-error', Atom, Then, Else], [eval, ['if-decons', Atom, Head, _, [eval, ['if-equal', Head, 'Error', Then, Else]], Else]]).
metta_impl(['if-empty', Atom, Then, Else], [fn, [eval, ['if-equal', Atom, 'Empty', [return, Then], [return, Else]]]]).
metta_impl(['if-empty', Atom, Then, Else], [eval, ['if-equal', Atom, 'Empty', Then, Else]]).
metta_impl(['if-decons', Atom, Head, Tail, Then, Else], [fn, [eval, ['if-non-empty-expression', Atom, [chain, [decons, Atom], List, [unify, List, [Head, Tail], [return, Then], [return, Else]]], [return, Else]]]]).
metta_impl(['if-decons', Atom, Head, Tail, Then, Else], [eval, ['if-non-empty-expression', Atom, [chain, [decons, Atom], List, [match, List, [Head, Tail], Then, Else]], Else]]).
metta_impl(['foldl-atom', List, Init, A, B, Op], [fn, [eval, ['if-decons', List, Head, Tail, [chain, [eval, [apply, Init, A, Op]], Op_init, [chain, [eval, [apply, Head, B, Op_init]], Op_head, [chain, Op_head, Head_folded, [chain, [eval, ['foldl-atom', Tail, Head_folded, A, B, Op]], Res, [return, Res]]]]], [return, Init]]]]).
metta_impl(['filter-atom', List, Var, Filter], [fn, [eval, ['if-decons', List, Head, Tail, [chain, [eval, ['filter-atom', Tail, Var, Filter]], Tail_filtered, [chain, [eval, [apply, Head, Var, Filter]], Filter_expr, [chain, Filter_expr, Is_filtered, [eval, [if, Is_filtered, [chain, [cons, Head, Tail_filtered], Res, [return, Res]], [return, Tail_filtered]]]]]], [return, []]]]]).
metta_impl(['cdr-atom', Atom], [eval, ['if-decons', Atom, _, Tail, Tail, ['Error', ['cdr-atom', Atom], 'cdr-atom expects a non-empty expression as an argument']]]).
metta_impl(['car-atom', Atom], [eval, ['if-decons', Atom, Head, _, Head, ['Error', ['car-atom', Atom], 'car-atom expects a non-empty expression as an argument']]]).
metta_impl([car, Atom], [eval, ['if-decons', Atom, Head, _, Head, ['Error', [car, Atom], 'car expects a non-empty expression as an argument']]]).
metta_impl([call, Atom, Type, Space], [chain, [eval, Atom], Result, [eval, ['if-empty', Result, Atom, [eval, ['if-error', Result, Result, [eval, [interpret, Result, Type, Space]]]]]]]).
metta_impl([apply, Atom, Var, Templ], [fn, [chain, [eval, [id, Atom]], Var, [return, Templ]]]).
metta_impl([and, 'True', 'True'], 'True').
metta_impl([and, 'True', 'False'], 'False').
metta_impl([and, 'False', 'True'], 'False').
metta_impl([and, 'False', 'False'], 'False').
metta_impl([or, 'True', 'True'], 'True').
metta_impl([or, 'True', 'False'], 'True').
metta_impl([or, 'False', 'True'], 'True').
metta_impl([or, 'False', 'False'], 'False').
metta_impl([unquote, [quote, Atom]], Atom).
metta_impl([quote, Atom], 'NotReducible').
metta_impl([nop], []).
metta_impl([nop, X], []).
metta_impl([if, 'True', Then, Else], Then).
metta_impl([if, 'False', Then, Else], Else).
metta_impl([id, X], X).

