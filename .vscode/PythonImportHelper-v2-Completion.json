[
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "atexit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "atexit",
        "description": "atexit",
        "detail": "atexit",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "find_library",
        "importPath": "ctypes.util",
        "description": "ctypes.util",
        "isExtraImport": true,
        "detail": "ctypes.util",
        "documentation": {}
    },
    {
        "label": "find_library",
        "importPath": "ctypes.util",
        "description": "ctypes.util",
        "isExtraImport": true,
        "detail": "ctypes.util",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Popen",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "PIPE",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Popen",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "PIPE",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pyswip.core",
        "description": "pyswip.core",
        "isExtraImport": true,
        "detail": "pyswip.core",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pyswip.core",
        "description": "pyswip.core",
        "isExtraImport": true,
        "detail": "pyswip.core",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pyswip.core",
        "description": "pyswip.core",
        "isExtraImport": true,
        "detail": "pyswip.core",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pyswip.core",
        "description": "pyswip.core",
        "isExtraImport": true,
        "detail": "pyswip.core",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pyswip.core",
        "description": "pyswip.core",
        "isExtraImport": true,
        "detail": "pyswip.core",
        "documentation": {}
    },
    {
        "label": "getTerm",
        "importPath": "pyswip.easy",
        "description": "pyswip.easy",
        "isExtraImport": true,
        "detail": "pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getList",
        "importPath": "pyswip.easy",
        "description": "pyswip.easy",
        "isExtraImport": true,
        "detail": "pyswip.easy",
        "documentation": {}
    },
    {
        "label": "registerForeign",
        "importPath": "pyswip.easy",
        "description": "pyswip.easy",
        "isExtraImport": true,
        "detail": "pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getList",
        "importPath": "pyswip.easy",
        "description": "pyswip.easy",
        "isExtraImport": true,
        "detail": "pyswip.easy",
        "documentation": {}
    },
    {
        "label": "registerForeign",
        "importPath": "pyswip.easy",
        "description": "pyswip.easy",
        "isExtraImport": true,
        "detail": "pyswip.easy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pyswip.easy",
        "description": "pyswip.easy",
        "isExtraImport": true,
        "detail": "pyswip.easy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pyswip.easy",
        "description": "pyswip.easy",
        "isExtraImport": true,
        "detail": "pyswip.easy",
        "documentation": {}
    },
    {
        "label": "registerForeign",
        "importPath": "pyswip.easy",
        "description": "pyswip.easy",
        "isExtraImport": true,
        "detail": "pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getAtomChars",
        "importPath": "pyswip.easy",
        "description": "pyswip.easy",
        "isExtraImport": true,
        "detail": "pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getTerm",
        "importPath": "pyswip.easy",
        "description": "pyswip.easy",
        "isExtraImport": true,
        "detail": "pyswip.easy",
        "documentation": {}
    },
    {
        "label": "pyswip.prolog",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyswip.prolog",
        "description": "pyswip.prolog",
        "detail": "pyswip.prolog",
        "documentation": {}
    },
    {
        "label": "Prolog",
        "importPath": "pyswip.prolog",
        "description": "pyswip.prolog",
        "isExtraImport": true,
        "detail": "pyswip.prolog",
        "documentation": {}
    },
    {
        "label": "Prolog",
        "importPath": "pyswip.prolog",
        "description": "pyswip.prolog",
        "isExtraImport": true,
        "detail": "pyswip.prolog",
        "documentation": {}
    },
    {
        "label": "Prolog",
        "importPath": "pyswip.prolog",
        "description": "pyswip.prolog",
        "isExtraImport": true,
        "detail": "pyswip.prolog",
        "documentation": {}
    },
    {
        "label": "Prolog",
        "importPath": "pyswip.prolog",
        "description": "pyswip.prolog",
        "isExtraImport": true,
        "detail": "pyswip.prolog",
        "documentation": {}
    },
    {
        "label": "Prolog",
        "importPath": "pyswip.prolog",
        "description": "pyswip.prolog",
        "isExtraImport": true,
        "detail": "pyswip.prolog",
        "documentation": {}
    },
    {
        "label": "Prolog",
        "importPath": "pyswip.prolog",
        "description": "pyswip.prolog",
        "isExtraImport": true,
        "detail": "pyswip.prolog",
        "documentation": {}
    },
    {
        "label": "Prolog",
        "importPath": "pyswip.prolog",
        "description": "pyswip.prolog",
        "isExtraImport": true,
        "detail": "pyswip.prolog",
        "documentation": {}
    },
    {
        "label": "Prolog",
        "importPath": "pyswip.prolog",
        "description": "pyswip.prolog",
        "isExtraImport": true,
        "detail": "pyswip.prolog",
        "documentation": {}
    },
    {
        "label": "pyswip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyswip",
        "description": "pyswip",
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "Prolog",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "Functor",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "Variable",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "Prolog",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "Prolog",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "Functor",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "Variable",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "call",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "Prolog",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "registerForeign",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "Atom",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "Prolog",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "registerForeign",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "PL_foreign_context",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "PL_foreign_control",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "PL_FIRST_CALL",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "PL_REDO",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "PL_PRUNED",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "PL_retry",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "PL_FA_NONDETERMINISTIC",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "Variable",
        "importPath": "pyswip",
        "description": "pyswip",
        "isExtraImport": true,
        "detail": "pyswip",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "doctest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "doctest",
        "description": "doctest",
        "detail": "doctest",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "_mbstate_t_value",
        "kind": 6,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "class _mbstate_t_value(Union):\n    _fields_ = [(\"__wch\", wint_t),\n                (\"__wchb\", c_char * 4)]\nclass mbstate_t(Structure):\n    _fields_ = [(\"__count\", c_int),\n                (\"__value\", _mbstate_t_value)]\n# stream related funcs\nSread_function = CFUNCTYPE(ssize_t, c_void_p, c_char_p, c_size_t)\nSwrite_function = CFUNCTYPE(ssize_t, c_void_p, c_char_p, c_size_t)\nSseek_function = CFUNCTYPE(c_long, c_void_p, c_long, c_int)",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "mbstate_t",
        "kind": 6,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "class mbstate_t(Structure):\n    _fields_ = [(\"__count\", c_int),\n                (\"__value\", _mbstate_t_value)]\n# stream related funcs\nSread_function = CFUNCTYPE(ssize_t, c_void_p, c_char_p, c_size_t)\nSwrite_function = CFUNCTYPE(ssize_t, c_void_p, c_char_p, c_size_t)\nSseek_function = CFUNCTYPE(c_long, c_void_p, c_long, c_int)\nSseek64_function = CFUNCTYPE(c_int64, c_void_p, c_int64, c_int)\nSclose_function = CFUNCTYPE(c_int, c_void_p)\nScontrol_function = CFUNCTYPE(c_int, c_void_p, c_int, c_void_p)",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "IOFUNCTIONS",
        "kind": 6,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "class IOFUNCTIONS(Structure):\n    _fields_ = [(\"read\",Sread_function),\n                (\"write\",Swrite_function),\n                (\"seek\",Sseek_function),\n                (\"close\",Sclose_function),\n                (\"seek64\",Sseek64_function),\n                (\"reserved\",intptr_t*2)]\n# IOENC\nENC_UNKNOWN,ENC_OCTET,ENC_ASCII,ENC_ISO_LATIN_1,ENC_ANSI,ENC_UTF8,ENC_UNICODE_BE,ENC_UNICODE_LE,ENC_WCHAR = tuple(range(9))\nIOENC = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "IOPOS",
        "kind": 6,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "class IOPOS(Structure):\n    _fields_ = [(\"byteno\",c_int64),\n                (\"charno\",c_int64),\n                (\"lineno\",c_int),\n                (\"linepos\",c_int),\n                (\"reserved\", intptr_t*2)]\n# IOSTREAM\nclass IOSTREAM(Structure):\n    _fields_ = [(\"bufp\",c_char_p),\n                (\"limitp\",c_char_p),",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "IOSTREAM",
        "kind": 6,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "class IOSTREAM(Structure):\n    _fields_ = [(\"bufp\",c_char_p),\n                (\"limitp\",c_char_p),\n                (\"buffer\",c_char_p),\n                (\"unbuffer\",c_char_p),\n                (\"lastc\",c_int),\n                (\"magic\",c_int),\n                (\"bufsize\",c_int),\n                (\"flags\",c_int),\n                (\"posbuf\",IOPOS),",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "ExitHook",
        "kind": 6,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "class ExitHook(object):\n    def __init__(self):\n        self.exit_code = None\n        self.exception = None\n    def hook(self):\n        self._orig_exit = sys.exit\n        sys.exit = self.exit\n    def exit(self, code=0):\n        self.exit_code = code\n        self._orig_exit(code)",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "walk",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "def walk(path, name):\n    \"\"\"\n    This function is a 2-time recursive func,\n    that findin file in dirs\n    :parameters:\n      -  `path` (str) - Directory path\n      -  `name` (str) - Name of file, that we lookin for\n    :returns:\n        Path to the swipl so, path to the resource file\n    :returns type:",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "get_swi_ver",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "def get_swi_ver():\n    import re\n    swi_ver = input(\n                'Please enter you SWI-Prolog version in format \"X.Y.Z\": ')\n    match = re.search(r'[0-9]+\\.[0-9]+\\.[0-9]+', swi_ver)\n    if match is None:\n        raise InputError('Error, type normal version')\n    return swi_ver\ndef _findSwiplMacOSHome():\n    \"\"\"",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "str_to_bytes",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "def str_to_bytes(string):\n    \"\"\"\n    Turns a string into a bytes if necessary (i.e. if it is not already a bytes\n    object or None).\n    If string is None, int or c_char_p it will be returned directly.\n    :param string: The string that shall be transformed\n    :type string: str, bytes or type(None)\n    :return: Transformed string\n    :rtype: c_char_p compatible object (bytes, c_char_p, int or None)\n    \"\"\"",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "list_to_bytes_list",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "def list_to_bytes_list(strList):\n    \"\"\"\n    This function turns an array of strings into a pointer array\n    with pointers pointing to the encodings of those strings\n    Possibly contained bytes are kept as they are.\n    :param strList: List of strings that shall be converted\n    :type strList: List of strings\n    :returns: Pointer array with pointers pointing to bytes\n    :raises: TypeError if strList is not list, set or tuple\n    \"\"\"",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "check_strings",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "def check_strings(strings, arrays):\n    \"\"\"\n    Decorator function which can be used to automatically turn an incoming\n    string into a bytes object and an incoming list to a pointer array if\n    necessary.\n    :param strings: Indices of the arguments must be pointers to bytes\n    :type strings: List of integers\n    :param arrays: Indices of the arguments must be arrays of pointers to bytes\n    :type arrays: List of integers\n    \"\"\"",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_STRINGS_MARK",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "def PL_STRINGS_MARK():\n    __PL_mark = buf_mark_t()\n    PL_mark_string_buffers(byref(__PL_mark))\n    try:\n        yield\n    finally:\n        PL_release_string_buffers_from_mark(__PL_mark)\nPL_open_foreign_frame = _lib.PL_open_foreign_frame\nPL_open_foreign_frame.restype = fid_t\nPL_foreign_control = _lib.PL_foreign_control",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "cleanupProlog",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "def cleanupProlog():\n    # only do something if prolog has been initialised\n    if PL_is_initialised(None,None):\n        # clean up the prolog system using the caught exit code\n        # if exit code is None, the program exits normally and we can use 0\n        # instead.\n        # TODO Prolog documentation says cleanup with code 0 may be interrupted\n        # If the program has come to an end the prolog system should not\n        # interfere with that. Therefore we may want to use 1 instead of 0.\n        PL_cleanup(int(_hook.exit_code or 0))",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "_stringMap",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "_stringMap = {}\ndef str_to_bytes(string):\n    \"\"\"\n    Turns a string into a bytes if necessary (i.e. if it is not already a bytes\n    object or None).\n    If string is None, int or c_char_p it will be returned directly.\n    :param string: The string that shall be transformed\n    :type string: str, bytes or type(None)\n    :return: Transformed string\n    :rtype: c_char_p compatible object (bytes, c_char_p, int or None)",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "_lib",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "_lib = CDLL(_path, mode=RTLD_GLOBAL)\n#       /*******************************\n#        *\t      VERSIONS\t\t*\n#        *******************************/\nPL_VERSION_SYSTEM\t=1\t# Prolog version\nPL_VERSION_FLI\t\t=2\t# PL_* compatibility\nPL_VERSION_REC\t\t=3\t# PL_record_external() compatibility\nPL_VERSION_QLF\t\t=4\t# Saved QLF format version\nPL_VERSION_QLF_LOAD\t=5\t# Min loadable QLF format version\nPL_VERSION_VM\t\t=6\t# VM signature",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PYSWIP_MAXSTR",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PYSWIP_MAXSTR = 1024\nc_int_p = c_void_p\nc_long_p = c_void_p\nc_double_p = c_void_p\nc_uint_p = c_void_p\n#\n# constants (from SWI-Prolog.h)\n# /* PL_unify_term( arguments */\nif PL_VERSION<80200:\n    # constants (from SWI-Prolog.h)",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "c_int_p",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "c_int_p = c_void_p\nc_long_p = c_void_p\nc_double_p = c_void_p\nc_uint_p = c_void_p\n#\n# constants (from SWI-Prolog.h)\n# /* PL_unify_term( arguments */\nif PL_VERSION<80200:\n    # constants (from SWI-Prolog.h)\n    # PL_unify_term() arguments",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "c_long_p",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "c_long_p = c_void_p\nc_double_p = c_void_p\nc_uint_p = c_void_p\n#\n# constants (from SWI-Prolog.h)\n# /* PL_unify_term( arguments */\nif PL_VERSION<80200:\n    # constants (from SWI-Prolog.h)\n    # PL_unify_term() arguments\n    PL_VARIABLE = 1  # nothing",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "c_double_p",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "c_double_p = c_void_p\nc_uint_p = c_void_p\n#\n# constants (from SWI-Prolog.h)\n# /* PL_unify_term( arguments */\nif PL_VERSION<80200:\n    # constants (from SWI-Prolog.h)\n    # PL_unify_term() arguments\n    PL_VARIABLE = 1  # nothing\n    PL_ATOM = 2  # const char",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "c_uint_p",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "c_uint_p = c_void_p\n#\n# constants (from SWI-Prolog.h)\n# /* PL_unify_term( arguments */\nif PL_VERSION<80200:\n    # constants (from SWI-Prolog.h)\n    # PL_unify_term() arguments\n    PL_VARIABLE = 1  # nothing\n    PL_ATOM = 2  # const char\n    PL_INTEGER = 3  # int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_FIRST_CALL",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_FIRST_CALL = 0\nPL_CUTTED = 1\nPL_PRUNED = PL_CUTTED\nPL_REDO = 2\nPL_FA_NOTRACE = 0x01  # foreign cannot be traced\nPL_FA_TRANSPARENT = 0x02  # foreign is module transparent\nPL_FA_NONDETERMINISTIC  = 0x04  # foreign is non-deterministic\nPL_FA_VARARGS = 0x08  # call using t0, ac, ctx\nPL_FA_CREF = 0x10  # Internal: has clause-reference */\n#        /*******************************",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_CUTTED",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_CUTTED = 1\nPL_PRUNED = PL_CUTTED\nPL_REDO = 2\nPL_FA_NOTRACE = 0x01  # foreign cannot be traced\nPL_FA_TRANSPARENT = 0x02  # foreign is module transparent\nPL_FA_NONDETERMINISTIC  = 0x04  # foreign is non-deterministic\nPL_FA_VARARGS = 0x08  # call using t0, ac, ctx\nPL_FA_CREF = 0x10  # Internal: has clause-reference */\n#        /*******************************\n#        *       CALL-BACK      *",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_PRUNED",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_PRUNED = PL_CUTTED\nPL_REDO = 2\nPL_FA_NOTRACE = 0x01  # foreign cannot be traced\nPL_FA_TRANSPARENT = 0x02  # foreign is module transparent\nPL_FA_NONDETERMINISTIC  = 0x04  # foreign is non-deterministic\nPL_FA_VARARGS = 0x08  # call using t0, ac, ctx\nPL_FA_CREF = 0x10  # Internal: has clause-reference */\n#        /*******************************\n#        *       CALL-BACK      *\n#        *******************************/",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_REDO",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_REDO = 2\nPL_FA_NOTRACE = 0x01  # foreign cannot be traced\nPL_FA_TRANSPARENT = 0x02  # foreign is module transparent\nPL_FA_NONDETERMINISTIC  = 0x04  # foreign is non-deterministic\nPL_FA_VARARGS = 0x08  # call using t0, ac, ctx\nPL_FA_CREF = 0x10  # Internal: has clause-reference */\n#        /*******************************\n#        *       CALL-BACK      *\n#        *******************************/\nPL_Q_DEBUG = 0x01  # = TRUE for backward compatibility",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_FA_NOTRACE",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_FA_NOTRACE = 0x01  # foreign cannot be traced\nPL_FA_TRANSPARENT = 0x02  # foreign is module transparent\nPL_FA_NONDETERMINISTIC  = 0x04  # foreign is non-deterministic\nPL_FA_VARARGS = 0x08  # call using t0, ac, ctx\nPL_FA_CREF = 0x10  # Internal: has clause-reference */\n#        /*******************************\n#        *       CALL-BACK      *\n#        *******************************/\nPL_Q_DEBUG = 0x01  # = TRUE for backward compatibility\nPL_Q_NORMAL = 0x02  # normal usage",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_FA_TRANSPARENT",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_FA_TRANSPARENT = 0x02  # foreign is module transparent\nPL_FA_NONDETERMINISTIC  = 0x04  # foreign is non-deterministic\nPL_FA_VARARGS = 0x08  # call using t0, ac, ctx\nPL_FA_CREF = 0x10  # Internal: has clause-reference */\n#        /*******************************\n#        *       CALL-BACK      *\n#        *******************************/\nPL_Q_DEBUG = 0x01  # = TRUE for backward compatibility\nPL_Q_NORMAL = 0x02  # normal usage\nPL_Q_NODEBUG =  0x04  # use this one",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_FA_VARARGS",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_FA_VARARGS = 0x08  # call using t0, ac, ctx\nPL_FA_CREF = 0x10  # Internal: has clause-reference */\n#        /*******************************\n#        *       CALL-BACK      *\n#        *******************************/\nPL_Q_DEBUG = 0x01  # = TRUE for backward compatibility\nPL_Q_NORMAL = 0x02  # normal usage\nPL_Q_NODEBUG =  0x04  # use this one\nPL_Q_CATCH_EXCEPTION = 0x08  # handle exceptions in C\nPL_Q_PASS_EXCEPTION = 0x10  # pass to parent environment",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_FA_CREF",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_FA_CREF = 0x10  # Internal: has clause-reference */\n#        /*******************************\n#        *       CALL-BACK      *\n#        *******************************/\nPL_Q_DEBUG = 0x01  # = TRUE for backward compatibility\nPL_Q_NORMAL = 0x02  # normal usage\nPL_Q_NODEBUG =  0x04  # use this one\nPL_Q_CATCH_EXCEPTION = 0x08  # handle exceptions in C\nPL_Q_PASS_EXCEPTION = 0x10  # pass to parent environment\nPL_Q_DETERMINISTIC = 0x20  # call was deterministic",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_Q_DEBUG",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_Q_DEBUG = 0x01  # = TRUE for backward compatibility\nPL_Q_NORMAL = 0x02  # normal usage\nPL_Q_NODEBUG =  0x04  # use this one\nPL_Q_CATCH_EXCEPTION = 0x08  # handle exceptions in C\nPL_Q_PASS_EXCEPTION = 0x10  # pass to parent environment\nPL_Q_DETERMINISTIC = 0x20  # call was deterministic\n#        /*******************************\n#        *         BLOBS        *\n#        *******************************/\n#define PL_BLOB_MAGIC_B 0x75293a00  /* Magic to validate a blob-type */",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_Q_NORMAL",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_Q_NORMAL = 0x02  # normal usage\nPL_Q_NODEBUG =  0x04  # use this one\nPL_Q_CATCH_EXCEPTION = 0x08  # handle exceptions in C\nPL_Q_PASS_EXCEPTION = 0x10  # pass to parent environment\nPL_Q_DETERMINISTIC = 0x20  # call was deterministic\n#        /*******************************\n#        *         BLOBS        *\n#        *******************************/\n#define PL_BLOB_MAGIC_B 0x75293a00  /* Magic to validate a blob-type */\n#define PL_BLOB_VERSION 1       /* Current version */",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_Q_NODEBUG",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_Q_NODEBUG =  0x04  # use this one\nPL_Q_CATCH_EXCEPTION = 0x08  # handle exceptions in C\nPL_Q_PASS_EXCEPTION = 0x10  # pass to parent environment\nPL_Q_DETERMINISTIC = 0x20  # call was deterministic\n#        /*******************************\n#        *         BLOBS        *\n#        *******************************/\n#define PL_BLOB_MAGIC_B 0x75293a00  /* Magic to validate a blob-type */\n#define PL_BLOB_VERSION 1       /* Current version */\n#define PL_BLOB_MAGIC   (PL_BLOB_MAGIC_B|PL_BLOB_VERSION)",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_Q_CATCH_EXCEPTION",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_Q_CATCH_EXCEPTION = 0x08  # handle exceptions in C\nPL_Q_PASS_EXCEPTION = 0x10  # pass to parent environment\nPL_Q_DETERMINISTIC = 0x20  # call was deterministic\n#        /*******************************\n#        *         BLOBS        *\n#        *******************************/\n#define PL_BLOB_MAGIC_B 0x75293a00  /* Magic to validate a blob-type */\n#define PL_BLOB_VERSION 1       /* Current version */\n#define PL_BLOB_MAGIC   (PL_BLOB_MAGIC_B|PL_BLOB_VERSION)\n#define PL_BLOB_UNIQUE  0x01        /* Blob content is unique */",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_Q_PASS_EXCEPTION",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_Q_PASS_EXCEPTION = 0x10  # pass to parent environment\nPL_Q_DETERMINISTIC = 0x20  # call was deterministic\n#        /*******************************\n#        *         BLOBS        *\n#        *******************************/\n#define PL_BLOB_MAGIC_B 0x75293a00  /* Magic to validate a blob-type */\n#define PL_BLOB_VERSION 1       /* Current version */\n#define PL_BLOB_MAGIC   (PL_BLOB_MAGIC_B|PL_BLOB_VERSION)\n#define PL_BLOB_UNIQUE  0x01        /* Blob content is unique */\n#define PL_BLOB_TEXT    0x02        /* blob contains text */",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_Q_DETERMINISTIC",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_Q_DETERMINISTIC = 0x20  # call was deterministic\n#        /*******************************\n#        *         BLOBS        *\n#        *******************************/\n#define PL_BLOB_MAGIC_B 0x75293a00  /* Magic to validate a blob-type */\n#define PL_BLOB_VERSION 1       /* Current version */\n#define PL_BLOB_MAGIC   (PL_BLOB_MAGIC_B|PL_BLOB_VERSION)\n#define PL_BLOB_UNIQUE  0x01        /* Blob content is unique */\n#define PL_BLOB_TEXT    0x02        /* blob contains text */\n#define PL_BLOB_NOCOPY  0x04        /* do not copy the data */",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "argv",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "argv = list_to_bytes_list(sys.argv + [None])\nargc = len(sys.argv)\n#                  /*******************************\n#                  *             TYPES            *\n#                  *******************************/\n#\n# typedef uintptr_t       atom_t;         /* Prolog atom */\n# typedef uintptr_t       functor_t;      /* Name/arity pair */\n# typedef void *          module_t;       /* Prolog module */\n# typedef void *          predicate_t;    /* Prolog procedure */",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "argc",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "argc = len(sys.argv)\n#                  /*******************************\n#                  *             TYPES            *\n#                  *******************************/\n#\n# typedef uintptr_t       atom_t;         /* Prolog atom */\n# typedef uintptr_t       functor_t;      /* Name/arity pair */\n# typedef void *          module_t;       /* Prolog module */\n# typedef void *          predicate_t;    /* Prolog procedure */\n# typedef void *          record_t;       /* Prolog recorded term */",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "atom_t",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "atom_t = c_uint_p\nfunctor_t = c_uint_p\nmodule_t = c_void_p\npredicate_t = c_void_p\nrecord_t = c_void_p\nterm_t = c_uint_p\nqid_t = c_uint_p\nPL_fid_t = c_uint_p\nfid_t = c_uint_p\ncontrol_t = c_void_p",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "functor_t",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "functor_t = c_uint_p\nmodule_t = c_void_p\npredicate_t = c_void_p\nrecord_t = c_void_p\nterm_t = c_uint_p\nqid_t = c_uint_p\nPL_fid_t = c_uint_p\nfid_t = c_uint_p\ncontrol_t = c_void_p\nPL_engine_t = c_void_p",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "module_t",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "module_t = c_void_p\npredicate_t = c_void_p\nrecord_t = c_void_p\nterm_t = c_uint_p\nqid_t = c_uint_p\nPL_fid_t = c_uint_p\nfid_t = c_uint_p\ncontrol_t = c_void_p\nPL_engine_t = c_void_p\nPL_atomic_t = c_uint_p",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "predicate_t",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "predicate_t = c_void_p\nrecord_t = c_void_p\nterm_t = c_uint_p\nqid_t = c_uint_p\nPL_fid_t = c_uint_p\nfid_t = c_uint_p\ncontrol_t = c_void_p\nPL_engine_t = c_void_p\nPL_atomic_t = c_uint_p\nforeign_t = c_uint_p",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "record_t",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "record_t = c_void_p\nterm_t = c_uint_p\nqid_t = c_uint_p\nPL_fid_t = c_uint_p\nfid_t = c_uint_p\ncontrol_t = c_void_p\nPL_engine_t = c_void_p\nPL_atomic_t = c_uint_p\nforeign_t = c_uint_p\npl_wchar_t = c_wchar",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "term_t",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "term_t = c_uint_p\nqid_t = c_uint_p\nPL_fid_t = c_uint_p\nfid_t = c_uint_p\ncontrol_t = c_void_p\nPL_engine_t = c_void_p\nPL_atomic_t = c_uint_p\nforeign_t = c_uint_p\npl_wchar_t = c_wchar\nintptr_t = c_long",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "qid_t",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "qid_t = c_uint_p\nPL_fid_t = c_uint_p\nfid_t = c_uint_p\ncontrol_t = c_void_p\nPL_engine_t = c_void_p\nPL_atomic_t = c_uint_p\nforeign_t = c_uint_p\npl_wchar_t = c_wchar\nintptr_t = c_long\nssize_t = intptr_t",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_fid_t",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_fid_t = c_uint_p\nfid_t = c_uint_p\ncontrol_t = c_void_p\nPL_engine_t = c_void_p\nPL_atomic_t = c_uint_p\nforeign_t = c_uint_p\npl_wchar_t = c_wchar\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "fid_t",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "fid_t = c_uint_p\ncontrol_t = c_void_p\nPL_engine_t = c_void_p\nPL_atomic_t = c_uint_p\nforeign_t = c_uint_p\npl_wchar_t = c_wchar\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nbuf_mark_t = c_uint_p",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "control_t",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "control_t = c_void_p\nPL_engine_t = c_void_p\nPL_atomic_t = c_uint_p\nforeign_t = c_uint_p\npl_wchar_t = c_wchar\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nbuf_mark_t = c_uint_p\nPL_initialise = _lib.PL_initialise",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_engine_t",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_engine_t = c_void_p\nPL_atomic_t = c_uint_p\nforeign_t = c_uint_p\npl_wchar_t = c_wchar\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nbuf_mark_t = c_uint_p\nPL_initialise = _lib.PL_initialise\nPL_initialise = check_strings(None, 1)(PL_initialise)",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_atomic_t",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_atomic_t = c_uint_p\nforeign_t = c_uint_p\npl_wchar_t = c_wchar\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nbuf_mark_t = c_uint_p\nPL_initialise = _lib.PL_initialise\nPL_initialise = check_strings(None, 1)(PL_initialise)\nPL_mark_string_buffers = _lib.PL_mark_string_buffers",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "foreign_t",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "foreign_t = c_uint_p\npl_wchar_t = c_wchar\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nbuf_mark_t = c_uint_p\nPL_initialise = _lib.PL_initialise\nPL_initialise = check_strings(None, 1)(PL_initialise)\nPL_mark_string_buffers = _lib.PL_mark_string_buffers\nPL_mark_string_buffers.argtypes = [buf_mark_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "pl_wchar_t",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "pl_wchar_t = c_wchar\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nbuf_mark_t = c_uint_p\nPL_initialise = _lib.PL_initialise\nPL_initialise = check_strings(None, 1)(PL_initialise)\nPL_mark_string_buffers = _lib.PL_mark_string_buffers\nPL_mark_string_buffers.argtypes = [buf_mark_t]\nPL_release_string_buffers_from_mark = _lib.PL_release_string_buffers_from_mark",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "intptr_t",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "intptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nbuf_mark_t = c_uint_p\nPL_initialise = _lib.PL_initialise\nPL_initialise = check_strings(None, 1)(PL_initialise)\nPL_mark_string_buffers = _lib.PL_mark_string_buffers\nPL_mark_string_buffers.argtypes = [buf_mark_t]\nPL_release_string_buffers_from_mark = _lib.PL_release_string_buffers_from_mark\nPL_release_string_buffers_from_mark.argtypes = [buf_mark_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "ssize_t",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "ssize_t = intptr_t\nwint_t = c_uint\nbuf_mark_t = c_uint_p\nPL_initialise = _lib.PL_initialise\nPL_initialise = check_strings(None, 1)(PL_initialise)\nPL_mark_string_buffers = _lib.PL_mark_string_buffers\nPL_mark_string_buffers.argtypes = [buf_mark_t]\nPL_release_string_buffers_from_mark = _lib.PL_release_string_buffers_from_mark\nPL_release_string_buffers_from_mark.argtypes = [buf_mark_t]\n@contextmanager",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "wint_t",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "wint_t = c_uint\nbuf_mark_t = c_uint_p\nPL_initialise = _lib.PL_initialise\nPL_initialise = check_strings(None, 1)(PL_initialise)\nPL_mark_string_buffers = _lib.PL_mark_string_buffers\nPL_mark_string_buffers.argtypes = [buf_mark_t]\nPL_release_string_buffers_from_mark = _lib.PL_release_string_buffers_from_mark\nPL_release_string_buffers_from_mark.argtypes = [buf_mark_t]\n@contextmanager\ndef PL_STRINGS_MARK():",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "buf_mark_t",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "buf_mark_t = c_uint_p\nPL_initialise = _lib.PL_initialise\nPL_initialise = check_strings(None, 1)(PL_initialise)\nPL_mark_string_buffers = _lib.PL_mark_string_buffers\nPL_mark_string_buffers.argtypes = [buf_mark_t]\nPL_release_string_buffers_from_mark = _lib.PL_release_string_buffers_from_mark\nPL_release_string_buffers_from_mark.argtypes = [buf_mark_t]\n@contextmanager\ndef PL_STRINGS_MARK():\n    __PL_mark = buf_mark_t()",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_initialise",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_initialise = _lib.PL_initialise\nPL_initialise = check_strings(None, 1)(PL_initialise)\nPL_mark_string_buffers = _lib.PL_mark_string_buffers\nPL_mark_string_buffers.argtypes = [buf_mark_t]\nPL_release_string_buffers_from_mark = _lib.PL_release_string_buffers_from_mark\nPL_release_string_buffers_from_mark.argtypes = [buf_mark_t]\n@contextmanager\ndef PL_STRINGS_MARK():\n    __PL_mark = buf_mark_t()\n    PL_mark_string_buffers(byref(__PL_mark))",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_initialise",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_initialise = check_strings(None, 1)(PL_initialise)\nPL_mark_string_buffers = _lib.PL_mark_string_buffers\nPL_mark_string_buffers.argtypes = [buf_mark_t]\nPL_release_string_buffers_from_mark = _lib.PL_release_string_buffers_from_mark\nPL_release_string_buffers_from_mark.argtypes = [buf_mark_t]\n@contextmanager\ndef PL_STRINGS_MARK():\n    __PL_mark = buf_mark_t()\n    PL_mark_string_buffers(byref(__PL_mark))\n    try:",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_mark_string_buffers",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_mark_string_buffers = _lib.PL_mark_string_buffers\nPL_mark_string_buffers.argtypes = [buf_mark_t]\nPL_release_string_buffers_from_mark = _lib.PL_release_string_buffers_from_mark\nPL_release_string_buffers_from_mark.argtypes = [buf_mark_t]\n@contextmanager\ndef PL_STRINGS_MARK():\n    __PL_mark = buf_mark_t()\n    PL_mark_string_buffers(byref(__PL_mark))\n    try:\n        yield",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_mark_string_buffers.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_mark_string_buffers.argtypes = [buf_mark_t]\nPL_release_string_buffers_from_mark = _lib.PL_release_string_buffers_from_mark\nPL_release_string_buffers_from_mark.argtypes = [buf_mark_t]\n@contextmanager\ndef PL_STRINGS_MARK():\n    __PL_mark = buf_mark_t()\n    PL_mark_string_buffers(byref(__PL_mark))\n    try:\n        yield\n    finally:",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_release_string_buffers_from_mark",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_release_string_buffers_from_mark = _lib.PL_release_string_buffers_from_mark\nPL_release_string_buffers_from_mark.argtypes = [buf_mark_t]\n@contextmanager\ndef PL_STRINGS_MARK():\n    __PL_mark = buf_mark_t()\n    PL_mark_string_buffers(byref(__PL_mark))\n    try:\n        yield\n    finally:\n        PL_release_string_buffers_from_mark(__PL_mark)",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_release_string_buffers_from_mark.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_release_string_buffers_from_mark.argtypes = [buf_mark_t]\n@contextmanager\ndef PL_STRINGS_MARK():\n    __PL_mark = buf_mark_t()\n    PL_mark_string_buffers(byref(__PL_mark))\n    try:\n        yield\n    finally:\n        PL_release_string_buffers_from_mark(__PL_mark)\nPL_open_foreign_frame = _lib.PL_open_foreign_frame",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_open_foreign_frame",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_open_foreign_frame = _lib.PL_open_foreign_frame\nPL_open_foreign_frame.restype = fid_t\nPL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restype = c_int\nPL_foreign_context = _lib.PL_foreign_context\nPL_foreign_context.argtypes = [control_t]\nPL_foreign_context.restype = intptr_t\nPL_retry = _lib._PL_retry\nPL_retry.argtypes = [intptr_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_open_foreign_frame.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_open_foreign_frame.restype = fid_t\nPL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restype = c_int\nPL_foreign_context = _lib.PL_foreign_context\nPL_foreign_context.argtypes = [control_t]\nPL_foreign_context.restype = intptr_t\nPL_retry = _lib._PL_retry\nPL_retry.argtypes = [intptr_t]\nPL_retry.restype = foreign_t",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_control",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restype = c_int\nPL_foreign_context = _lib.PL_foreign_context\nPL_foreign_context.argtypes = [control_t]\nPL_foreign_context.restype = intptr_t\nPL_retry = _lib._PL_retry\nPL_retry.argtypes = [intptr_t]\nPL_retry.restype = foreign_t\nPL_new_term_ref = _lib.PL_new_term_ref",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_control.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restype = c_int\nPL_foreign_context = _lib.PL_foreign_context\nPL_foreign_context.argtypes = [control_t]\nPL_foreign_context.restype = intptr_t\nPL_retry = _lib._PL_retry\nPL_retry.argtypes = [intptr_t]\nPL_retry.restype = foreign_t\nPL_new_term_ref = _lib.PL_new_term_ref\nPL_new_term_ref.restype = term_t",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_control.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_foreign_control.restype = c_int\nPL_foreign_context = _lib.PL_foreign_context\nPL_foreign_context.argtypes = [control_t]\nPL_foreign_context.restype = intptr_t\nPL_retry = _lib._PL_retry\nPL_retry.argtypes = [intptr_t]\nPL_retry.restype = foreign_t\nPL_new_term_ref = _lib.PL_new_term_ref\nPL_new_term_ref.restype = term_t\nPL_new_term_refs = _lib.PL_new_term_refs",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_context",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_foreign_context = _lib.PL_foreign_context\nPL_foreign_context.argtypes = [control_t]\nPL_foreign_context.restype = intptr_t\nPL_retry = _lib._PL_retry\nPL_retry.argtypes = [intptr_t]\nPL_retry.restype = foreign_t\nPL_new_term_ref = _lib.PL_new_term_ref\nPL_new_term_ref.restype = term_t\nPL_new_term_refs = _lib.PL_new_term_refs\nPL_new_term_refs.argtypes = [c_int]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_context.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_foreign_context.argtypes = [control_t]\nPL_foreign_context.restype = intptr_t\nPL_retry = _lib._PL_retry\nPL_retry.argtypes = [intptr_t]\nPL_retry.restype = foreign_t\nPL_new_term_ref = _lib.PL_new_term_ref\nPL_new_term_ref.restype = term_t\nPL_new_term_refs = _lib.PL_new_term_refs\nPL_new_term_refs.argtypes = [c_int]\nPL_new_term_refs.restype = term_t",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_context.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_foreign_context.restype = intptr_t\nPL_retry = _lib._PL_retry\nPL_retry.argtypes = [intptr_t]\nPL_retry.restype = foreign_t\nPL_new_term_ref = _lib.PL_new_term_ref\nPL_new_term_ref.restype = term_t\nPL_new_term_refs = _lib.PL_new_term_refs\nPL_new_term_refs.argtypes = [c_int]\nPL_new_term_refs.restype = term_t\nPL_chars_to_term = _lib.PL_chars_to_term",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_retry",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_retry = _lib._PL_retry\nPL_retry.argtypes = [intptr_t]\nPL_retry.restype = foreign_t\nPL_new_term_ref = _lib.PL_new_term_ref\nPL_new_term_ref.restype = term_t\nPL_new_term_refs = _lib.PL_new_term_refs\nPL_new_term_refs.argtypes = [c_int]\nPL_new_term_refs.restype = term_t\nPL_chars_to_term = _lib.PL_chars_to_term\nPL_chars_to_term.argtypes = [c_char_p, term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_retry.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_retry.argtypes = [intptr_t]\nPL_retry.restype = foreign_t\nPL_new_term_ref = _lib.PL_new_term_ref\nPL_new_term_ref.restype = term_t\nPL_new_term_refs = _lib.PL_new_term_refs\nPL_new_term_refs.argtypes = [c_int]\nPL_new_term_refs.restype = term_t\nPL_chars_to_term = _lib.PL_chars_to_term\nPL_chars_to_term.argtypes = [c_char_p, term_t]\nPL_chars_to_term.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_retry.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_retry.restype = foreign_t\nPL_new_term_ref = _lib.PL_new_term_ref\nPL_new_term_ref.restype = term_t\nPL_new_term_refs = _lib.PL_new_term_refs\nPL_new_term_refs.argtypes = [c_int]\nPL_new_term_refs.restype = term_t\nPL_chars_to_term = _lib.PL_chars_to_term\nPL_chars_to_term.argtypes = [c_char_p, term_t]\nPL_chars_to_term.restype = c_int\nPL_chars_to_term = check_strings(0, None)(PL_chars_to_term)",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_term_ref",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_new_term_ref = _lib.PL_new_term_ref\nPL_new_term_ref.restype = term_t\nPL_new_term_refs = _lib.PL_new_term_refs\nPL_new_term_refs.argtypes = [c_int]\nPL_new_term_refs.restype = term_t\nPL_chars_to_term = _lib.PL_chars_to_term\nPL_chars_to_term.argtypes = [c_char_p, term_t]\nPL_chars_to_term.restype = c_int\nPL_chars_to_term = check_strings(0, None)(PL_chars_to_term)\nPL_call = _lib.PL_call",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_term_ref.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_new_term_ref.restype = term_t\nPL_new_term_refs = _lib.PL_new_term_refs\nPL_new_term_refs.argtypes = [c_int]\nPL_new_term_refs.restype = term_t\nPL_chars_to_term = _lib.PL_chars_to_term\nPL_chars_to_term.argtypes = [c_char_p, term_t]\nPL_chars_to_term.restype = c_int\nPL_chars_to_term = check_strings(0, None)(PL_chars_to_term)\nPL_call = _lib.PL_call\nPL_call.argtypes = [term_t, module_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_term_refs",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_new_term_refs = _lib.PL_new_term_refs\nPL_new_term_refs.argtypes = [c_int]\nPL_new_term_refs.restype = term_t\nPL_chars_to_term = _lib.PL_chars_to_term\nPL_chars_to_term.argtypes = [c_char_p, term_t]\nPL_chars_to_term.restype = c_int\nPL_chars_to_term = check_strings(0, None)(PL_chars_to_term)\nPL_call = _lib.PL_call\nPL_call.argtypes = [term_t, module_t]\nPL_call.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_term_refs.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_new_term_refs.argtypes = [c_int]\nPL_new_term_refs.restype = term_t\nPL_chars_to_term = _lib.PL_chars_to_term\nPL_chars_to_term.argtypes = [c_char_p, term_t]\nPL_chars_to_term.restype = c_int\nPL_chars_to_term = check_strings(0, None)(PL_chars_to_term)\nPL_call = _lib.PL_call\nPL_call.argtypes = [term_t, module_t]\nPL_call.restype = c_int\nPL_call_predicate = _lib.PL_call_predicate",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_term_refs.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_new_term_refs.restype = term_t\nPL_chars_to_term = _lib.PL_chars_to_term\nPL_chars_to_term.argtypes = [c_char_p, term_t]\nPL_chars_to_term.restype = c_int\nPL_chars_to_term = check_strings(0, None)(PL_chars_to_term)\nPL_call = _lib.PL_call\nPL_call.argtypes = [term_t, module_t]\nPL_call.restype = c_int\nPL_call_predicate = _lib.PL_call_predicate\nPL_call_predicate.argtypes = [module_t, c_int, predicate_t, term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_chars_to_term",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_chars_to_term = _lib.PL_chars_to_term\nPL_chars_to_term.argtypes = [c_char_p, term_t]\nPL_chars_to_term.restype = c_int\nPL_chars_to_term = check_strings(0, None)(PL_chars_to_term)\nPL_call = _lib.PL_call\nPL_call.argtypes = [term_t, module_t]\nPL_call.restype = c_int\nPL_call_predicate = _lib.PL_call_predicate\nPL_call_predicate.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_call_predicate.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_chars_to_term.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_chars_to_term.argtypes = [c_char_p, term_t]\nPL_chars_to_term.restype = c_int\nPL_chars_to_term = check_strings(0, None)(PL_chars_to_term)\nPL_call = _lib.PL_call\nPL_call.argtypes = [term_t, module_t]\nPL_call.restype = c_int\nPL_call_predicate = _lib.PL_call_predicate\nPL_call_predicate.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_call_predicate.restype = c_int\nPL_discard_foreign_frame = _lib.PL_discard_foreign_frame",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_chars_to_term.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_chars_to_term.restype = c_int\nPL_chars_to_term = check_strings(0, None)(PL_chars_to_term)\nPL_call = _lib.PL_call\nPL_call.argtypes = [term_t, module_t]\nPL_call.restype = c_int\nPL_call_predicate = _lib.PL_call_predicate\nPL_call_predicate.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_call_predicate.restype = c_int\nPL_discard_foreign_frame = _lib.PL_discard_foreign_frame\nPL_discard_foreign_frame.argtypes = [fid_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_chars_to_term",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_chars_to_term = check_strings(0, None)(PL_chars_to_term)\nPL_call = _lib.PL_call\nPL_call.argtypes = [term_t, module_t]\nPL_call.restype = c_int\nPL_call_predicate = _lib.PL_call_predicate\nPL_call_predicate.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_call_predicate.restype = c_int\nPL_discard_foreign_frame = _lib.PL_discard_foreign_frame\nPL_discard_foreign_frame.argtypes = [fid_t]\nPL_discard_foreign_frame.restype = None",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_call",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_call = _lib.PL_call\nPL_call.argtypes = [term_t, module_t]\nPL_call.restype = c_int\nPL_call_predicate = _lib.PL_call_predicate\nPL_call_predicate.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_call_predicate.restype = c_int\nPL_discard_foreign_frame = _lib.PL_discard_foreign_frame\nPL_discard_foreign_frame.argtypes = [fid_t]\nPL_discard_foreign_frame.restype = None\nPL_put_chars = _lib.PL_put_chars",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_call.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_call.argtypes = [term_t, module_t]\nPL_call.restype = c_int\nPL_call_predicate = _lib.PL_call_predicate\nPL_call_predicate.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_call_predicate.restype = c_int\nPL_discard_foreign_frame = _lib.PL_discard_foreign_frame\nPL_discard_foreign_frame.argtypes = [fid_t]\nPL_discard_foreign_frame.restype = None\nPL_put_chars = _lib.PL_put_chars\nPL_put_chars.argtypes = [term_t, c_int, c_size_t, c_char_p]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_call.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_call.restype = c_int\nPL_call_predicate = _lib.PL_call_predicate\nPL_call_predicate.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_call_predicate.restype = c_int\nPL_discard_foreign_frame = _lib.PL_discard_foreign_frame\nPL_discard_foreign_frame.argtypes = [fid_t]\nPL_discard_foreign_frame.restype = None\nPL_put_chars = _lib.PL_put_chars\nPL_put_chars.argtypes = [term_t, c_int, c_size_t, c_char_p]\nPL_put_chars.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_call_predicate",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_call_predicate = _lib.PL_call_predicate\nPL_call_predicate.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_call_predicate.restype = c_int\nPL_discard_foreign_frame = _lib.PL_discard_foreign_frame\nPL_discard_foreign_frame.argtypes = [fid_t]\nPL_discard_foreign_frame.restype = None\nPL_put_chars = _lib.PL_put_chars\nPL_put_chars.argtypes = [term_t, c_int, c_size_t, c_char_p]\nPL_put_chars.restype = c_int\nPL_put_list_chars = _lib.PL_put_list_chars",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_call_predicate.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_call_predicate.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_call_predicate.restype = c_int\nPL_discard_foreign_frame = _lib.PL_discard_foreign_frame\nPL_discard_foreign_frame.argtypes = [fid_t]\nPL_discard_foreign_frame.restype = None\nPL_put_chars = _lib.PL_put_chars\nPL_put_chars.argtypes = [term_t, c_int, c_size_t, c_char_p]\nPL_put_chars.restype = c_int\nPL_put_list_chars = _lib.PL_put_list_chars\nPL_put_list_chars.argtypes = [term_t, c_char_p]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_call_predicate.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_call_predicate.restype = c_int\nPL_discard_foreign_frame = _lib.PL_discard_foreign_frame\nPL_discard_foreign_frame.argtypes = [fid_t]\nPL_discard_foreign_frame.restype = None\nPL_put_chars = _lib.PL_put_chars\nPL_put_chars.argtypes = [term_t, c_int, c_size_t, c_char_p]\nPL_put_chars.restype = c_int\nPL_put_list_chars = _lib.PL_put_list_chars\nPL_put_list_chars.argtypes = [term_t, c_char_p]\nPL_put_list_chars.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_discard_foreign_frame",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_discard_foreign_frame = _lib.PL_discard_foreign_frame\nPL_discard_foreign_frame.argtypes = [fid_t]\nPL_discard_foreign_frame.restype = None\nPL_put_chars = _lib.PL_put_chars\nPL_put_chars.argtypes = [term_t, c_int, c_size_t, c_char_p]\nPL_put_chars.restype = c_int\nPL_put_list_chars = _lib.PL_put_list_chars\nPL_put_list_chars.argtypes = [term_t, c_char_p]\nPL_put_list_chars.restype = c_int\nPL_put_list_chars = check_strings(1, None)(PL_put_list_chars)",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_discard_foreign_frame.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_discard_foreign_frame.argtypes = [fid_t]\nPL_discard_foreign_frame.restype = None\nPL_put_chars = _lib.PL_put_chars\nPL_put_chars.argtypes = [term_t, c_int, c_size_t, c_char_p]\nPL_put_chars.restype = c_int\nPL_put_list_chars = _lib.PL_put_list_chars\nPL_put_list_chars.argtypes = [term_t, c_char_p]\nPL_put_list_chars.restype = c_int\nPL_put_list_chars = check_strings(1, None)(PL_put_list_chars)\n#PL_EXPORT(void)                PL_register_atom(atom_t a);",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_discard_foreign_frame.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_discard_foreign_frame.restype = None\nPL_put_chars = _lib.PL_put_chars\nPL_put_chars.argtypes = [term_t, c_int, c_size_t, c_char_p]\nPL_put_chars.restype = c_int\nPL_put_list_chars = _lib.PL_put_list_chars\nPL_put_list_chars.argtypes = [term_t, c_char_p]\nPL_put_list_chars.restype = c_int\nPL_put_list_chars = check_strings(1, None)(PL_put_list_chars)\n#PL_EXPORT(void)                PL_register_atom(atom_t a);\nPL_register_atom = _lib.PL_register_atom",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_chars = _lib.PL_put_chars\nPL_put_chars.argtypes = [term_t, c_int, c_size_t, c_char_p]\nPL_put_chars.restype = c_int\nPL_put_list_chars = _lib.PL_put_list_chars\nPL_put_list_chars.argtypes = [term_t, c_char_p]\nPL_put_list_chars.restype = c_int\nPL_put_list_chars = check_strings(1, None)(PL_put_list_chars)\n#PL_EXPORT(void)                PL_register_atom(atom_t a);\nPL_register_atom = _lib.PL_register_atom\nPL_register_atom.argtypes = [atom_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_chars.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_chars.argtypes = [term_t, c_int, c_size_t, c_char_p]\nPL_put_chars.restype = c_int\nPL_put_list_chars = _lib.PL_put_list_chars\nPL_put_list_chars.argtypes = [term_t, c_char_p]\nPL_put_list_chars.restype = c_int\nPL_put_list_chars = check_strings(1, None)(PL_put_list_chars)\n#PL_EXPORT(void)                PL_register_atom(atom_t a);\nPL_register_atom = _lib.PL_register_atom\nPL_register_atom.argtypes = [atom_t]\nPL_register_atom.restype = None",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_chars.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_chars.restype = c_int\nPL_put_list_chars = _lib.PL_put_list_chars\nPL_put_list_chars.argtypes = [term_t, c_char_p]\nPL_put_list_chars.restype = c_int\nPL_put_list_chars = check_strings(1, None)(PL_put_list_chars)\n#PL_EXPORT(void)                PL_register_atom(atom_t a);\nPL_register_atom = _lib.PL_register_atom\nPL_register_atom.argtypes = [atom_t]\nPL_register_atom.restype = None\n#PL_EXPORT(void)                PL_unregister_atom(atom_t a);",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_list_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_list_chars = _lib.PL_put_list_chars\nPL_put_list_chars.argtypes = [term_t, c_char_p]\nPL_put_list_chars.restype = c_int\nPL_put_list_chars = check_strings(1, None)(PL_put_list_chars)\n#PL_EXPORT(void)                PL_register_atom(atom_t a);\nPL_register_atom = _lib.PL_register_atom\nPL_register_atom.argtypes = [atom_t]\nPL_register_atom.restype = None\n#PL_EXPORT(void)                PL_unregister_atom(atom_t a);\nPL_unregister_atom = _lib.PL_unregister_atom",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_list_chars.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_list_chars.argtypes = [term_t, c_char_p]\nPL_put_list_chars.restype = c_int\nPL_put_list_chars = check_strings(1, None)(PL_put_list_chars)\n#PL_EXPORT(void)                PL_register_atom(atom_t a);\nPL_register_atom = _lib.PL_register_atom\nPL_register_atom.argtypes = [atom_t]\nPL_register_atom.restype = None\n#PL_EXPORT(void)                PL_unregister_atom(atom_t a);\nPL_unregister_atom = _lib.PL_unregister_atom\nPL_unregister_atom.argtypes = [atom_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_list_chars.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_list_chars.restype = c_int\nPL_put_list_chars = check_strings(1, None)(PL_put_list_chars)\n#PL_EXPORT(void)                PL_register_atom(atom_t a);\nPL_register_atom = _lib.PL_register_atom\nPL_register_atom.argtypes = [atom_t]\nPL_register_atom.restype = None\n#PL_EXPORT(void)                PL_unregister_atom(atom_t a);\nPL_unregister_atom = _lib.PL_unregister_atom\nPL_unregister_atom.argtypes = [atom_t]\nPL_unregister_atom.restype = None",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_list_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_list_chars = check_strings(1, None)(PL_put_list_chars)\n#PL_EXPORT(void)                PL_register_atom(atom_t a);\nPL_register_atom = _lib.PL_register_atom\nPL_register_atom.argtypes = [atom_t]\nPL_register_atom.restype = None\n#PL_EXPORT(void)                PL_unregister_atom(atom_t a);\nPL_unregister_atom = _lib.PL_unregister_atom\nPL_unregister_atom.argtypes = [atom_t]\nPL_unregister_atom.restype = None\n#PL_EXPORT(atom_t)      PL_functor_name(functor_t f);",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_register_atom",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_register_atom = _lib.PL_register_atom\nPL_register_atom.argtypes = [atom_t]\nPL_register_atom.restype = None\n#PL_EXPORT(void)                PL_unregister_atom(atom_t a);\nPL_unregister_atom = _lib.PL_unregister_atom\nPL_unregister_atom.argtypes = [atom_t]\nPL_unregister_atom.restype = None\n#PL_EXPORT(atom_t)      PL_functor_name(functor_t f);\nPL_functor_name = _lib.PL_functor_name\nPL_functor_name.argtypes = [functor_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_register_atom.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_register_atom.argtypes = [atom_t]\nPL_register_atom.restype = None\n#PL_EXPORT(void)                PL_unregister_atom(atom_t a);\nPL_unregister_atom = _lib.PL_unregister_atom\nPL_unregister_atom.argtypes = [atom_t]\nPL_unregister_atom.restype = None\n#PL_EXPORT(atom_t)      PL_functor_name(functor_t f);\nPL_functor_name = _lib.PL_functor_name\nPL_functor_name.argtypes = [functor_t]\nPL_functor_name.restype = atom_t",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_register_atom.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_register_atom.restype = None\n#PL_EXPORT(void)                PL_unregister_atom(atom_t a);\nPL_unregister_atom = _lib.PL_unregister_atom\nPL_unregister_atom.argtypes = [atom_t]\nPL_unregister_atom.restype = None\n#PL_EXPORT(atom_t)      PL_functor_name(functor_t f);\nPL_functor_name = _lib.PL_functor_name\nPL_functor_name.argtypes = [functor_t]\nPL_functor_name.restype = atom_t\n#PL_EXPORT(int)         PL_functor_arity(functor_t f);",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unregister_atom",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unregister_atom = _lib.PL_unregister_atom\nPL_unregister_atom.argtypes = [atom_t]\nPL_unregister_atom.restype = None\n#PL_EXPORT(atom_t)      PL_functor_name(functor_t f);\nPL_functor_name = _lib.PL_functor_name\nPL_functor_name.argtypes = [functor_t]\nPL_functor_name.restype = atom_t\n#PL_EXPORT(int)         PL_functor_arity(functor_t f);\nPL_functor_arity = _lib.PL_functor_arity\nPL_functor_arity.argtypes = [functor_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unregister_atom.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unregister_atom.argtypes = [atom_t]\nPL_unregister_atom.restype = None\n#PL_EXPORT(atom_t)      PL_functor_name(functor_t f);\nPL_functor_name = _lib.PL_functor_name\nPL_functor_name.argtypes = [functor_t]\nPL_functor_name.restype = atom_t\n#PL_EXPORT(int)         PL_functor_arity(functor_t f);\nPL_functor_arity = _lib.PL_functor_arity\nPL_functor_arity.argtypes = [functor_t]\nPL_functor_arity.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unregister_atom.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unregister_atom.restype = None\n#PL_EXPORT(atom_t)      PL_functor_name(functor_t f);\nPL_functor_name = _lib.PL_functor_name\nPL_functor_name.argtypes = [functor_t]\nPL_functor_name.restype = atom_t\n#PL_EXPORT(int)         PL_functor_arity(functor_t f);\nPL_functor_arity = _lib.PL_functor_arity\nPL_functor_arity.argtypes = [functor_t]\nPL_functor_arity.restype = c_int\n#                       /* Get C-values from Prolog terms */",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_functor_name",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_functor_name = _lib.PL_functor_name\nPL_functor_name.argtypes = [functor_t]\nPL_functor_name.restype = atom_t\n#PL_EXPORT(int)         PL_functor_arity(functor_t f);\nPL_functor_arity = _lib.PL_functor_arity\nPL_functor_arity.argtypes = [functor_t]\nPL_functor_arity.restype = c_int\n#                       /* Get C-values from Prolog terms */\n#PL_EXPORT(int)         PL_get_atom(term_t t, atom_t *a);\nPL_get_atom = _lib.PL_get_atom",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_functor_name.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_functor_name.argtypes = [functor_t]\nPL_functor_name.restype = atom_t\n#PL_EXPORT(int)         PL_functor_arity(functor_t f);\nPL_functor_arity = _lib.PL_functor_arity\nPL_functor_arity.argtypes = [functor_t]\nPL_functor_arity.restype = c_int\n#                       /* Get C-values from Prolog terms */\n#PL_EXPORT(int)         PL_get_atom(term_t t, atom_t *a);\nPL_get_atom = _lib.PL_get_atom\nPL_get_atom.argtypes = [term_t, POINTER(atom_t)]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_functor_name.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_functor_name.restype = atom_t\n#PL_EXPORT(int)         PL_functor_arity(functor_t f);\nPL_functor_arity = _lib.PL_functor_arity\nPL_functor_arity.argtypes = [functor_t]\nPL_functor_arity.restype = c_int\n#                       /* Get C-values from Prolog terms */\n#PL_EXPORT(int)         PL_get_atom(term_t t, atom_t *a);\nPL_get_atom = _lib.PL_get_atom\nPL_get_atom.argtypes = [term_t, POINTER(atom_t)]\nPL_get_atom.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_functor_arity",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_functor_arity = _lib.PL_functor_arity\nPL_functor_arity.argtypes = [functor_t]\nPL_functor_arity.restype = c_int\n#                       /* Get C-values from Prolog terms */\n#PL_EXPORT(int)         PL_get_atom(term_t t, atom_t *a);\nPL_get_atom = _lib.PL_get_atom\nPL_get_atom.argtypes = [term_t, POINTER(atom_t)]\nPL_get_atom.restype = c_int\n#PL_EXPORT(int)         PL_get_bool(term_t t, int *value);\nPL_get_bool = _lib.PL_get_bool",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_functor_arity.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_functor_arity.argtypes = [functor_t]\nPL_functor_arity.restype = c_int\n#                       /* Get C-values from Prolog terms */\n#PL_EXPORT(int)         PL_get_atom(term_t t, atom_t *a);\nPL_get_atom = _lib.PL_get_atom\nPL_get_atom.argtypes = [term_t, POINTER(atom_t)]\nPL_get_atom.restype = c_int\n#PL_EXPORT(int)         PL_get_bool(term_t t, int *value);\nPL_get_bool = _lib.PL_get_bool\nPL_get_bool.argtypes = [term_t, POINTER(c_int)]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_functor_arity.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_functor_arity.restype = c_int\n#                       /* Get C-values from Prolog terms */\n#PL_EXPORT(int)         PL_get_atom(term_t t, atom_t *a);\nPL_get_atom = _lib.PL_get_atom\nPL_get_atom.argtypes = [term_t, POINTER(atom_t)]\nPL_get_atom.restype = c_int\n#PL_EXPORT(int)         PL_get_bool(term_t t, int *value);\nPL_get_bool = _lib.PL_get_bool\nPL_get_bool.argtypes = [term_t, POINTER(c_int)]\nPL_get_bool.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_atom",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_atom = _lib.PL_get_atom\nPL_get_atom.argtypes = [term_t, POINTER(atom_t)]\nPL_get_atom.restype = c_int\n#PL_EXPORT(int)         PL_get_bool(term_t t, int *value);\nPL_get_bool = _lib.PL_get_bool\nPL_get_bool.argtypes = [term_t, POINTER(c_int)]\nPL_get_bool.restype = c_int\n#PL_EXPORT(int)         PL_get_atom_chars(term_t t, char **a);\nPL_get_atom_chars = _lib.PL_get_atom_chars  # FIXME\nPL_get_atom_chars.argtypes = [term_t, POINTER(c_char_p)]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_atom.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_atom.argtypes = [term_t, POINTER(atom_t)]\nPL_get_atom.restype = c_int\n#PL_EXPORT(int)         PL_get_bool(term_t t, int *value);\nPL_get_bool = _lib.PL_get_bool\nPL_get_bool.argtypes = [term_t, POINTER(c_int)]\nPL_get_bool.restype = c_int\n#PL_EXPORT(int)         PL_get_atom_chars(term_t t, char **a);\nPL_get_atom_chars = _lib.PL_get_atom_chars  # FIXME\nPL_get_atom_chars.argtypes = [term_t, POINTER(c_char_p)]\nPL_get_atom_chars.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_atom.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_atom.restype = c_int\n#PL_EXPORT(int)         PL_get_bool(term_t t, int *value);\nPL_get_bool = _lib.PL_get_bool\nPL_get_bool.argtypes = [term_t, POINTER(c_int)]\nPL_get_bool.restype = c_int\n#PL_EXPORT(int)         PL_get_atom_chars(term_t t, char **a);\nPL_get_atom_chars = _lib.PL_get_atom_chars  # FIXME\nPL_get_atom_chars.argtypes = [term_t, POINTER(c_char_p)]\nPL_get_atom_chars.restype = c_int\nPL_get_atom_chars = check_strings(None, 1)(PL_get_atom_chars)",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_bool",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_bool = _lib.PL_get_bool\nPL_get_bool.argtypes = [term_t, POINTER(c_int)]\nPL_get_bool.restype = c_int\n#PL_EXPORT(int)         PL_get_atom_chars(term_t t, char **a);\nPL_get_atom_chars = _lib.PL_get_atom_chars  # FIXME\nPL_get_atom_chars.argtypes = [term_t, POINTER(c_char_p)]\nPL_get_atom_chars.restype = c_int\nPL_get_atom_chars = check_strings(None, 1)(PL_get_atom_chars)\nPL_get_string_chars = _lib.PL_get_string\nPL_get_string_chars.argtypes = [term_t, POINTER(c_char_p), c_int_p]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_bool.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_bool.argtypes = [term_t, POINTER(c_int)]\nPL_get_bool.restype = c_int\n#PL_EXPORT(int)         PL_get_atom_chars(term_t t, char **a);\nPL_get_atom_chars = _lib.PL_get_atom_chars  # FIXME\nPL_get_atom_chars.argtypes = [term_t, POINTER(c_char_p)]\nPL_get_atom_chars.restype = c_int\nPL_get_atom_chars = check_strings(None, 1)(PL_get_atom_chars)\nPL_get_string_chars = _lib.PL_get_string\nPL_get_string_chars.argtypes = [term_t, POINTER(c_char_p), c_int_p]\nPL_get_chars = _lib.PL_get_chars  # FIXME:",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_bool.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_bool.restype = c_int\n#PL_EXPORT(int)         PL_get_atom_chars(term_t t, char **a);\nPL_get_atom_chars = _lib.PL_get_atom_chars  # FIXME\nPL_get_atom_chars.argtypes = [term_t, POINTER(c_char_p)]\nPL_get_atom_chars.restype = c_int\nPL_get_atom_chars = check_strings(None, 1)(PL_get_atom_chars)\nPL_get_string_chars = _lib.PL_get_string\nPL_get_string_chars.argtypes = [term_t, POINTER(c_char_p), c_int_p]\nPL_get_chars = _lib.PL_get_chars  # FIXME:\nPL_get_chars.argtypes = [term_t, POINTER(c_char_p), c_uint]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_atom_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_atom_chars = _lib.PL_get_atom_chars  # FIXME\nPL_get_atom_chars.argtypes = [term_t, POINTER(c_char_p)]\nPL_get_atom_chars.restype = c_int\nPL_get_atom_chars = check_strings(None, 1)(PL_get_atom_chars)\nPL_get_string_chars = _lib.PL_get_string\nPL_get_string_chars.argtypes = [term_t, POINTER(c_char_p), c_int_p]\nPL_get_chars = _lib.PL_get_chars  # FIXME:\nPL_get_chars.argtypes = [term_t, POINTER(c_char_p), c_uint]\nPL_get_chars.restype = c_int\nPL_get_chars = check_strings(None, 1)(PL_get_chars)",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_atom_chars.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_atom_chars.argtypes = [term_t, POINTER(c_char_p)]\nPL_get_atom_chars.restype = c_int\nPL_get_atom_chars = check_strings(None, 1)(PL_get_atom_chars)\nPL_get_string_chars = _lib.PL_get_string\nPL_get_string_chars.argtypes = [term_t, POINTER(c_char_p), c_int_p]\nPL_get_chars = _lib.PL_get_chars  # FIXME:\nPL_get_chars.argtypes = [term_t, POINTER(c_char_p), c_uint]\nPL_get_chars.restype = c_int\nPL_get_chars = check_strings(None, 1)(PL_get_chars)\nPL_get_integer = _lib.PL_get_integer",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_atom_chars.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_atom_chars.restype = c_int\nPL_get_atom_chars = check_strings(None, 1)(PL_get_atom_chars)\nPL_get_string_chars = _lib.PL_get_string\nPL_get_string_chars.argtypes = [term_t, POINTER(c_char_p), c_int_p]\nPL_get_chars = _lib.PL_get_chars  # FIXME:\nPL_get_chars.argtypes = [term_t, POINTER(c_char_p), c_uint]\nPL_get_chars.restype = c_int\nPL_get_chars = check_strings(None, 1)(PL_get_chars)\nPL_get_integer = _lib.PL_get_integer\nPL_get_integer.argtypes = [term_t, POINTER(c_int)]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_atom_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_atom_chars = check_strings(None, 1)(PL_get_atom_chars)\nPL_get_string_chars = _lib.PL_get_string\nPL_get_string_chars.argtypes = [term_t, POINTER(c_char_p), c_int_p]\nPL_get_chars = _lib.PL_get_chars  # FIXME:\nPL_get_chars.argtypes = [term_t, POINTER(c_char_p), c_uint]\nPL_get_chars.restype = c_int\nPL_get_chars = check_strings(None, 1)(PL_get_chars)\nPL_get_integer = _lib.PL_get_integer\nPL_get_integer.argtypes = [term_t, POINTER(c_int)]\nPL_get_integer.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_string_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_string_chars = _lib.PL_get_string\nPL_get_string_chars.argtypes = [term_t, POINTER(c_char_p), c_int_p]\nPL_get_chars = _lib.PL_get_chars  # FIXME:\nPL_get_chars.argtypes = [term_t, POINTER(c_char_p), c_uint]\nPL_get_chars.restype = c_int\nPL_get_chars = check_strings(None, 1)(PL_get_chars)\nPL_get_integer = _lib.PL_get_integer\nPL_get_integer.argtypes = [term_t, POINTER(c_int)]\nPL_get_integer.restype = c_int\nPL_get_long = _lib.PL_get_long",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_string_chars.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_string_chars.argtypes = [term_t, POINTER(c_char_p), c_int_p]\nPL_get_chars = _lib.PL_get_chars  # FIXME:\nPL_get_chars.argtypes = [term_t, POINTER(c_char_p), c_uint]\nPL_get_chars.restype = c_int\nPL_get_chars = check_strings(None, 1)(PL_get_chars)\nPL_get_integer = _lib.PL_get_integer\nPL_get_integer.argtypes = [term_t, POINTER(c_int)]\nPL_get_integer.restype = c_int\nPL_get_long = _lib.PL_get_long\nPL_get_long.argtypes = [term_t, POINTER(c_long)]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_chars = _lib.PL_get_chars  # FIXME:\nPL_get_chars.argtypes = [term_t, POINTER(c_char_p), c_uint]\nPL_get_chars.restype = c_int\nPL_get_chars = check_strings(None, 1)(PL_get_chars)\nPL_get_integer = _lib.PL_get_integer\nPL_get_integer.argtypes = [term_t, POINTER(c_int)]\nPL_get_integer.restype = c_int\nPL_get_long = _lib.PL_get_long\nPL_get_long.argtypes = [term_t, POINTER(c_long)]\nPL_get_long.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_chars.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_chars.argtypes = [term_t, POINTER(c_char_p), c_uint]\nPL_get_chars.restype = c_int\nPL_get_chars = check_strings(None, 1)(PL_get_chars)\nPL_get_integer = _lib.PL_get_integer\nPL_get_integer.argtypes = [term_t, POINTER(c_int)]\nPL_get_integer.restype = c_int\nPL_get_long = _lib.PL_get_long\nPL_get_long.argtypes = [term_t, POINTER(c_long)]\nPL_get_long.restype = c_int\nPL_get_float = _lib.PL_get_float",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_chars.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_chars.restype = c_int\nPL_get_chars = check_strings(None, 1)(PL_get_chars)\nPL_get_integer = _lib.PL_get_integer\nPL_get_integer.argtypes = [term_t, POINTER(c_int)]\nPL_get_integer.restype = c_int\nPL_get_long = _lib.PL_get_long\nPL_get_long.argtypes = [term_t, POINTER(c_long)]\nPL_get_long.restype = c_int\nPL_get_float = _lib.PL_get_float\nPL_get_float.argtypes = [term_t, c_double_p]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_chars = check_strings(None, 1)(PL_get_chars)\nPL_get_integer = _lib.PL_get_integer\nPL_get_integer.argtypes = [term_t, POINTER(c_int)]\nPL_get_integer.restype = c_int\nPL_get_long = _lib.PL_get_long\nPL_get_long.argtypes = [term_t, POINTER(c_long)]\nPL_get_long.restype = c_int\nPL_get_float = _lib.PL_get_float\nPL_get_float.argtypes = [term_t, c_double_p]\nPL_get_float.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_integer",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_integer = _lib.PL_get_integer\nPL_get_integer.argtypes = [term_t, POINTER(c_int)]\nPL_get_integer.restype = c_int\nPL_get_long = _lib.PL_get_long\nPL_get_long.argtypes = [term_t, POINTER(c_long)]\nPL_get_long.restype = c_int\nPL_get_float = _lib.PL_get_float\nPL_get_float.argtypes = [term_t, c_double_p]\nPL_get_float.restype = c_int\nPL_get_functor = _lib.PL_get_functor",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_integer.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_integer.argtypes = [term_t, POINTER(c_int)]\nPL_get_integer.restype = c_int\nPL_get_long = _lib.PL_get_long\nPL_get_long.argtypes = [term_t, POINTER(c_long)]\nPL_get_long.restype = c_int\nPL_get_float = _lib.PL_get_float\nPL_get_float.argtypes = [term_t, c_double_p]\nPL_get_float.restype = c_int\nPL_get_functor = _lib.PL_get_functor\nPL_get_functor.argtypes = [term_t, POINTER(functor_t)]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_integer.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_integer.restype = c_int\nPL_get_long = _lib.PL_get_long\nPL_get_long.argtypes = [term_t, POINTER(c_long)]\nPL_get_long.restype = c_int\nPL_get_float = _lib.PL_get_float\nPL_get_float.argtypes = [term_t, c_double_p]\nPL_get_float.restype = c_int\nPL_get_functor = _lib.PL_get_functor\nPL_get_functor.argtypes = [term_t, POINTER(functor_t)]\nPL_get_functor.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_long",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_long = _lib.PL_get_long\nPL_get_long.argtypes = [term_t, POINTER(c_long)]\nPL_get_long.restype = c_int\nPL_get_float = _lib.PL_get_float\nPL_get_float.argtypes = [term_t, c_double_p]\nPL_get_float.restype = c_int\nPL_get_functor = _lib.PL_get_functor\nPL_get_functor.argtypes = [term_t, POINTER(functor_t)]\nPL_get_functor.restype = c_int\nPL_get_name_arity = _lib.PL_get_name_arity",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_long.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_long.argtypes = [term_t, POINTER(c_long)]\nPL_get_long.restype = c_int\nPL_get_float = _lib.PL_get_float\nPL_get_float.argtypes = [term_t, c_double_p]\nPL_get_float.restype = c_int\nPL_get_functor = _lib.PL_get_functor\nPL_get_functor.argtypes = [term_t, POINTER(functor_t)]\nPL_get_functor.restype = c_int\nPL_get_name_arity = _lib.PL_get_name_arity\nPL_get_name_arity.argtypes = [term_t, POINTER(atom_t), POINTER(c_int)]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_long.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_long.restype = c_int\nPL_get_float = _lib.PL_get_float\nPL_get_float.argtypes = [term_t, c_double_p]\nPL_get_float.restype = c_int\nPL_get_functor = _lib.PL_get_functor\nPL_get_functor.argtypes = [term_t, POINTER(functor_t)]\nPL_get_functor.restype = c_int\nPL_get_name_arity = _lib.PL_get_name_arity\nPL_get_name_arity.argtypes = [term_t, POINTER(atom_t), POINTER(c_int)]\nPL_get_name_arity.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_float",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_float = _lib.PL_get_float\nPL_get_float.argtypes = [term_t, c_double_p]\nPL_get_float.restype = c_int\nPL_get_functor = _lib.PL_get_functor\nPL_get_functor.argtypes = [term_t, POINTER(functor_t)]\nPL_get_functor.restype = c_int\nPL_get_name_arity = _lib.PL_get_name_arity\nPL_get_name_arity.argtypes = [term_t, POINTER(atom_t), POINTER(c_int)]\nPL_get_name_arity.restype = c_int\nPL_get_arg = _lib.PL_get_arg",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_float.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_float.argtypes = [term_t, c_double_p]\nPL_get_float.restype = c_int\nPL_get_functor = _lib.PL_get_functor\nPL_get_functor.argtypes = [term_t, POINTER(functor_t)]\nPL_get_functor.restype = c_int\nPL_get_name_arity = _lib.PL_get_name_arity\nPL_get_name_arity.argtypes = [term_t, POINTER(atom_t), POINTER(c_int)]\nPL_get_name_arity.restype = c_int\nPL_get_arg = _lib.PL_get_arg\nPL_get_arg.argtypes = [c_int, term_t, term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_float.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_float.restype = c_int\nPL_get_functor = _lib.PL_get_functor\nPL_get_functor.argtypes = [term_t, POINTER(functor_t)]\nPL_get_functor.restype = c_int\nPL_get_name_arity = _lib.PL_get_name_arity\nPL_get_name_arity.argtypes = [term_t, POINTER(atom_t), POINTER(c_int)]\nPL_get_name_arity.restype = c_int\nPL_get_arg = _lib.PL_get_arg\nPL_get_arg.argtypes = [c_int, term_t, term_t]\nPL_get_arg.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_functor",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_functor = _lib.PL_get_functor\nPL_get_functor.argtypes = [term_t, POINTER(functor_t)]\nPL_get_functor.restype = c_int\nPL_get_name_arity = _lib.PL_get_name_arity\nPL_get_name_arity.argtypes = [term_t, POINTER(atom_t), POINTER(c_int)]\nPL_get_name_arity.restype = c_int\nPL_get_arg = _lib.PL_get_arg\nPL_get_arg.argtypes = [c_int, term_t, term_t]\nPL_get_arg.restype = c_int\nPL_get_head = _lib.PL_get_head",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_functor.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_functor.argtypes = [term_t, POINTER(functor_t)]\nPL_get_functor.restype = c_int\nPL_get_name_arity = _lib.PL_get_name_arity\nPL_get_name_arity.argtypes = [term_t, POINTER(atom_t), POINTER(c_int)]\nPL_get_name_arity.restype = c_int\nPL_get_arg = _lib.PL_get_arg\nPL_get_arg.argtypes = [c_int, term_t, term_t]\nPL_get_arg.restype = c_int\nPL_get_head = _lib.PL_get_head\nPL_get_head.argtypes = [term_t, term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_functor.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_functor.restype = c_int\nPL_get_name_arity = _lib.PL_get_name_arity\nPL_get_name_arity.argtypes = [term_t, POINTER(atom_t), POINTER(c_int)]\nPL_get_name_arity.restype = c_int\nPL_get_arg = _lib.PL_get_arg\nPL_get_arg.argtypes = [c_int, term_t, term_t]\nPL_get_arg.restype = c_int\nPL_get_head = _lib.PL_get_head\nPL_get_head.argtypes = [term_t, term_t]\nPL_get_head.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_name_arity",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_name_arity = _lib.PL_get_name_arity\nPL_get_name_arity.argtypes = [term_t, POINTER(atom_t), POINTER(c_int)]\nPL_get_name_arity.restype = c_int\nPL_get_arg = _lib.PL_get_arg\nPL_get_arg.argtypes = [c_int, term_t, term_t]\nPL_get_arg.restype = c_int\nPL_get_head = _lib.PL_get_head\nPL_get_head.argtypes = [term_t, term_t]\nPL_get_head.restype = c_int\nPL_get_tail = _lib.PL_get_tail",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_name_arity.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_name_arity.argtypes = [term_t, POINTER(atom_t), POINTER(c_int)]\nPL_get_name_arity.restype = c_int\nPL_get_arg = _lib.PL_get_arg\nPL_get_arg.argtypes = [c_int, term_t, term_t]\nPL_get_arg.restype = c_int\nPL_get_head = _lib.PL_get_head\nPL_get_head.argtypes = [term_t, term_t]\nPL_get_head.restype = c_int\nPL_get_tail = _lib.PL_get_tail\nPL_get_tail.argtypes = [term_t, term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_name_arity.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_name_arity.restype = c_int\nPL_get_arg = _lib.PL_get_arg\nPL_get_arg.argtypes = [c_int, term_t, term_t]\nPL_get_arg.restype = c_int\nPL_get_head = _lib.PL_get_head\nPL_get_head.argtypes = [term_t, term_t]\nPL_get_head.restype = c_int\nPL_get_tail = _lib.PL_get_tail\nPL_get_tail.argtypes = [term_t, term_t]\nPL_get_tail.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_arg",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_arg = _lib.PL_get_arg\nPL_get_arg.argtypes = [c_int, term_t, term_t]\nPL_get_arg.restype = c_int\nPL_get_head = _lib.PL_get_head\nPL_get_head.argtypes = [term_t, term_t]\nPL_get_head.restype = c_int\nPL_get_tail = _lib.PL_get_tail\nPL_get_tail.argtypes = [term_t, term_t]\nPL_get_tail.restype = c_int\nPL_get_nil = _lib.PL_get_nil",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_arg.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_arg.argtypes = [c_int, term_t, term_t]\nPL_get_arg.restype = c_int\nPL_get_head = _lib.PL_get_head\nPL_get_head.argtypes = [term_t, term_t]\nPL_get_head.restype = c_int\nPL_get_tail = _lib.PL_get_tail\nPL_get_tail.argtypes = [term_t, term_t]\nPL_get_tail.restype = c_int\nPL_get_nil = _lib.PL_get_nil\nPL_get_nil.argtypes = [term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_arg.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_arg.restype = c_int\nPL_get_head = _lib.PL_get_head\nPL_get_head.argtypes = [term_t, term_t]\nPL_get_head.restype = c_int\nPL_get_tail = _lib.PL_get_tail\nPL_get_tail.argtypes = [term_t, term_t]\nPL_get_tail.restype = c_int\nPL_get_nil = _lib.PL_get_nil\nPL_get_nil.argtypes = [term_t]\nPL_get_nil.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_head",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_head = _lib.PL_get_head\nPL_get_head.argtypes = [term_t, term_t]\nPL_get_head.restype = c_int\nPL_get_tail = _lib.PL_get_tail\nPL_get_tail.argtypes = [term_t, term_t]\nPL_get_tail.restype = c_int\nPL_get_nil = _lib.PL_get_nil\nPL_get_nil.argtypes = [term_t]\nPL_get_nil.restype = c_int\nPL_put_atom_chars = _lib.PL_put_atom_chars",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_head.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_head.argtypes = [term_t, term_t]\nPL_get_head.restype = c_int\nPL_get_tail = _lib.PL_get_tail\nPL_get_tail.argtypes = [term_t, term_t]\nPL_get_tail.restype = c_int\nPL_get_nil = _lib.PL_get_nil\nPL_get_nil.argtypes = [term_t]\nPL_get_nil.restype = c_int\nPL_put_atom_chars = _lib.PL_put_atom_chars\nPL_put_atom_chars.argtypes = [term_t, c_char_p]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_head.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_head.restype = c_int\nPL_get_tail = _lib.PL_get_tail\nPL_get_tail.argtypes = [term_t, term_t]\nPL_get_tail.restype = c_int\nPL_get_nil = _lib.PL_get_nil\nPL_get_nil.argtypes = [term_t]\nPL_get_nil.restype = c_int\nPL_put_atom_chars = _lib.PL_put_atom_chars\nPL_put_atom_chars.argtypes = [term_t, c_char_p]\nPL_put_atom_chars.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_tail",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_tail = _lib.PL_get_tail\nPL_get_tail.argtypes = [term_t, term_t]\nPL_get_tail.restype = c_int\nPL_get_nil = _lib.PL_get_nil\nPL_get_nil.argtypes = [term_t]\nPL_get_nil.restype = c_int\nPL_put_atom_chars = _lib.PL_put_atom_chars\nPL_put_atom_chars.argtypes = [term_t, c_char_p]\nPL_put_atom_chars.restype = c_int\nPL_put_atom_chars = check_strings(1, None)(PL_put_atom_chars)",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_tail.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_tail.argtypes = [term_t, term_t]\nPL_get_tail.restype = c_int\nPL_get_nil = _lib.PL_get_nil\nPL_get_nil.argtypes = [term_t]\nPL_get_nil.restype = c_int\nPL_put_atom_chars = _lib.PL_put_atom_chars\nPL_put_atom_chars.argtypes = [term_t, c_char_p]\nPL_put_atom_chars.restype = c_int\nPL_put_atom_chars = check_strings(1, None)(PL_put_atom_chars)\nPL_atom_chars = _lib.PL_atom_chars",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_tail.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_tail.restype = c_int\nPL_get_nil = _lib.PL_get_nil\nPL_get_nil.argtypes = [term_t]\nPL_get_nil.restype = c_int\nPL_put_atom_chars = _lib.PL_put_atom_chars\nPL_put_atom_chars.argtypes = [term_t, c_char_p]\nPL_put_atom_chars.restype = c_int\nPL_put_atom_chars = check_strings(1, None)(PL_put_atom_chars)\nPL_atom_chars = _lib.PL_atom_chars\nPL_atom_chars.argtypes = [atom_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_nil",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_nil = _lib.PL_get_nil\nPL_get_nil.argtypes = [term_t]\nPL_get_nil.restype = c_int\nPL_put_atom_chars = _lib.PL_put_atom_chars\nPL_put_atom_chars.argtypes = [term_t, c_char_p]\nPL_put_atom_chars.restype = c_int\nPL_put_atom_chars = check_strings(1, None)(PL_put_atom_chars)\nPL_atom_chars = _lib.PL_atom_chars\nPL_atom_chars.argtypes = [atom_t]\nPL_atom_chars.restype = c_char_p",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_nil.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_nil.argtypes = [term_t]\nPL_get_nil.restype = c_int\nPL_put_atom_chars = _lib.PL_put_atom_chars\nPL_put_atom_chars.argtypes = [term_t, c_char_p]\nPL_put_atom_chars.restype = c_int\nPL_put_atom_chars = check_strings(1, None)(PL_put_atom_chars)\nPL_atom_chars = _lib.PL_atom_chars\nPL_atom_chars.argtypes = [atom_t]\nPL_atom_chars.restype = c_char_p\nPL_atom_wchars = _lib.PL_atom_wchars",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_nil.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_nil.restype = c_int\nPL_put_atom_chars = _lib.PL_put_atom_chars\nPL_put_atom_chars.argtypes = [term_t, c_char_p]\nPL_put_atom_chars.restype = c_int\nPL_put_atom_chars = check_strings(1, None)(PL_put_atom_chars)\nPL_atom_chars = _lib.PL_atom_chars\nPL_atom_chars.argtypes = [atom_t]\nPL_atom_chars.restype = c_char_p\nPL_atom_wchars = _lib.PL_atom_wchars\nPL_atom_wchars.argtypes = [atom_t, POINTER(c_size_t)]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_atom_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_atom_chars = _lib.PL_put_atom_chars\nPL_put_atom_chars.argtypes = [term_t, c_char_p]\nPL_put_atom_chars.restype = c_int\nPL_put_atom_chars = check_strings(1, None)(PL_put_atom_chars)\nPL_atom_chars = _lib.PL_atom_chars\nPL_atom_chars.argtypes = [atom_t]\nPL_atom_chars.restype = c_char_p\nPL_atom_wchars = _lib.PL_atom_wchars\nPL_atom_wchars.argtypes = [atom_t, POINTER(c_size_t)]\nPL_atom_wchars.restype = c_wchar_p",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_atom_chars.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_atom_chars.argtypes = [term_t, c_char_p]\nPL_put_atom_chars.restype = c_int\nPL_put_atom_chars = check_strings(1, None)(PL_put_atom_chars)\nPL_atom_chars = _lib.PL_atom_chars\nPL_atom_chars.argtypes = [atom_t]\nPL_atom_chars.restype = c_char_p\nPL_atom_wchars = _lib.PL_atom_wchars\nPL_atom_wchars.argtypes = [atom_t, POINTER(c_size_t)]\nPL_atom_wchars.restype = c_wchar_p\nPL_predicate = _lib.PL_predicate",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_atom_chars.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_atom_chars.restype = c_int\nPL_put_atom_chars = check_strings(1, None)(PL_put_atom_chars)\nPL_atom_chars = _lib.PL_atom_chars\nPL_atom_chars.argtypes = [atom_t]\nPL_atom_chars.restype = c_char_p\nPL_atom_wchars = _lib.PL_atom_wchars\nPL_atom_wchars.argtypes = [atom_t, POINTER(c_size_t)]\nPL_atom_wchars.restype = c_wchar_p\nPL_predicate = _lib.PL_predicate\nPL_predicate.argtypes = [c_char_p, c_int, c_char_p]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_atom_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_atom_chars = check_strings(1, None)(PL_put_atom_chars)\nPL_atom_chars = _lib.PL_atom_chars\nPL_atom_chars.argtypes = [atom_t]\nPL_atom_chars.restype = c_char_p\nPL_atom_wchars = _lib.PL_atom_wchars\nPL_atom_wchars.argtypes = [atom_t, POINTER(c_size_t)]\nPL_atom_wchars.restype = c_wchar_p\nPL_predicate = _lib.PL_predicate\nPL_predicate.argtypes = [c_char_p, c_int, c_char_p]\nPL_predicate.restype = predicate_t",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_atom_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_atom_chars = _lib.PL_atom_chars\nPL_atom_chars.argtypes = [atom_t]\nPL_atom_chars.restype = c_char_p\nPL_atom_wchars = _lib.PL_atom_wchars\nPL_atom_wchars.argtypes = [atom_t, POINTER(c_size_t)]\nPL_atom_wchars.restype = c_wchar_p\nPL_predicate = _lib.PL_predicate\nPL_predicate.argtypes = [c_char_p, c_int, c_char_p]\nPL_predicate.restype = predicate_t\nPL_predicate = check_strings([0,2], None)(PL_predicate)",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_atom_chars.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_atom_chars.argtypes = [atom_t]\nPL_atom_chars.restype = c_char_p\nPL_atom_wchars = _lib.PL_atom_wchars\nPL_atom_wchars.argtypes = [atom_t, POINTER(c_size_t)]\nPL_atom_wchars.restype = c_wchar_p\nPL_predicate = _lib.PL_predicate\nPL_predicate.argtypes = [c_char_p, c_int, c_char_p]\nPL_predicate.restype = predicate_t\nPL_predicate = check_strings([0,2], None)(PL_predicate)\nPL_pred = _lib.PL_pred",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_atom_chars.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_atom_chars.restype = c_char_p\nPL_atom_wchars = _lib.PL_atom_wchars\nPL_atom_wchars.argtypes = [atom_t, POINTER(c_size_t)]\nPL_atom_wchars.restype = c_wchar_p\nPL_predicate = _lib.PL_predicate\nPL_predicate.argtypes = [c_char_p, c_int, c_char_p]\nPL_predicate.restype = predicate_t\nPL_predicate = check_strings([0,2], None)(PL_predicate)\nPL_pred = _lib.PL_pred\nPL_pred.argtypes = [functor_t, module_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_atom_wchars",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_atom_wchars = _lib.PL_atom_wchars\nPL_atom_wchars.argtypes = [atom_t, POINTER(c_size_t)]\nPL_atom_wchars.restype = c_wchar_p\nPL_predicate = _lib.PL_predicate\nPL_predicate.argtypes = [c_char_p, c_int, c_char_p]\nPL_predicate.restype = predicate_t\nPL_predicate = check_strings([0,2], None)(PL_predicate)\nPL_pred = _lib.PL_pred\nPL_pred.argtypes = [functor_t, module_t]\nPL_pred.restype = predicate_t",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_atom_wchars.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_atom_wchars.argtypes = [atom_t, POINTER(c_size_t)]\nPL_atom_wchars.restype = c_wchar_p\nPL_predicate = _lib.PL_predicate\nPL_predicate.argtypes = [c_char_p, c_int, c_char_p]\nPL_predicate.restype = predicate_t\nPL_predicate = check_strings([0,2], None)(PL_predicate)\nPL_pred = _lib.PL_pred\nPL_pred.argtypes = [functor_t, module_t]\nPL_pred.restype = predicate_t\nPL_open_query = _lib.PL_open_query",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_atom_wchars.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_atom_wchars.restype = c_wchar_p\nPL_predicate = _lib.PL_predicate\nPL_predicate.argtypes = [c_char_p, c_int, c_char_p]\nPL_predicate.restype = predicate_t\nPL_predicate = check_strings([0,2], None)(PL_predicate)\nPL_pred = _lib.PL_pred\nPL_pred.argtypes = [functor_t, module_t]\nPL_pred.restype = predicate_t\nPL_open_query = _lib.PL_open_query\nPL_open_query.argtypes = [module_t, c_int, predicate_t, term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_predicate",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_predicate = _lib.PL_predicate\nPL_predicate.argtypes = [c_char_p, c_int, c_char_p]\nPL_predicate.restype = predicate_t\nPL_predicate = check_strings([0,2], None)(PL_predicate)\nPL_pred = _lib.PL_pred\nPL_pred.argtypes = [functor_t, module_t]\nPL_pred.restype = predicate_t\nPL_open_query = _lib.PL_open_query\nPL_open_query.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_open_query.restype = qid_t",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_predicate.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_predicate.argtypes = [c_char_p, c_int, c_char_p]\nPL_predicate.restype = predicate_t\nPL_predicate = check_strings([0,2], None)(PL_predicate)\nPL_pred = _lib.PL_pred\nPL_pred.argtypes = [functor_t, module_t]\nPL_pred.restype = predicate_t\nPL_open_query = _lib.PL_open_query\nPL_open_query.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_open_query.restype = qid_t\nPL_next_solution = _lib.PL_next_solution",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_predicate.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_predicate.restype = predicate_t\nPL_predicate = check_strings([0,2], None)(PL_predicate)\nPL_pred = _lib.PL_pred\nPL_pred.argtypes = [functor_t, module_t]\nPL_pred.restype = predicate_t\nPL_open_query = _lib.PL_open_query\nPL_open_query.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_open_query.restype = qid_t\nPL_next_solution = _lib.PL_next_solution\nPL_next_solution.argtypes = [qid_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_predicate",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_predicate = check_strings([0,2], None)(PL_predicate)\nPL_pred = _lib.PL_pred\nPL_pred.argtypes = [functor_t, module_t]\nPL_pred.restype = predicate_t\nPL_open_query = _lib.PL_open_query\nPL_open_query.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_open_query.restype = qid_t\nPL_next_solution = _lib.PL_next_solution\nPL_next_solution.argtypes = [qid_t]\nPL_next_solution.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_pred",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_pred = _lib.PL_pred\nPL_pred.argtypes = [functor_t, module_t]\nPL_pred.restype = predicate_t\nPL_open_query = _lib.PL_open_query\nPL_open_query.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_open_query.restype = qid_t\nPL_next_solution = _lib.PL_next_solution\nPL_next_solution.argtypes = [qid_t]\nPL_next_solution.restype = c_int\nPL_copy_term_ref = _lib.PL_copy_term_ref",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_pred.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_pred.argtypes = [functor_t, module_t]\nPL_pred.restype = predicate_t\nPL_open_query = _lib.PL_open_query\nPL_open_query.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_open_query.restype = qid_t\nPL_next_solution = _lib.PL_next_solution\nPL_next_solution.argtypes = [qid_t]\nPL_next_solution.restype = c_int\nPL_copy_term_ref = _lib.PL_copy_term_ref\nPL_copy_term_ref.argtypes = [term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_pred.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_pred.restype = predicate_t\nPL_open_query = _lib.PL_open_query\nPL_open_query.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_open_query.restype = qid_t\nPL_next_solution = _lib.PL_next_solution\nPL_next_solution.argtypes = [qid_t]\nPL_next_solution.restype = c_int\nPL_copy_term_ref = _lib.PL_copy_term_ref\nPL_copy_term_ref.argtypes = [term_t]\nPL_copy_term_ref.restype = term_t",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_open_query",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_open_query = _lib.PL_open_query\nPL_open_query.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_open_query.restype = qid_t\nPL_next_solution = _lib.PL_next_solution\nPL_next_solution.argtypes = [qid_t]\nPL_next_solution.restype = c_int\nPL_copy_term_ref = _lib.PL_copy_term_ref\nPL_copy_term_ref.argtypes = [term_t]\nPL_copy_term_ref.restype = term_t\nPL_get_list = _lib.PL_get_list",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_open_query.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_open_query.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_open_query.restype = qid_t\nPL_next_solution = _lib.PL_next_solution\nPL_next_solution.argtypes = [qid_t]\nPL_next_solution.restype = c_int\nPL_copy_term_ref = _lib.PL_copy_term_ref\nPL_copy_term_ref.argtypes = [term_t]\nPL_copy_term_ref.restype = term_t\nPL_get_list = _lib.PL_get_list\nPL_get_list.argtypes = [term_t, term_t, term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_open_query.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_open_query.restype = qid_t\nPL_next_solution = _lib.PL_next_solution\nPL_next_solution.argtypes = [qid_t]\nPL_next_solution.restype = c_int\nPL_copy_term_ref = _lib.PL_copy_term_ref\nPL_copy_term_ref.argtypes = [term_t]\nPL_copy_term_ref.restype = term_t\nPL_get_list = _lib.PL_get_list\nPL_get_list.argtypes = [term_t, term_t, term_t]\nPL_get_list.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_next_solution",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_next_solution = _lib.PL_next_solution\nPL_next_solution.argtypes = [qid_t]\nPL_next_solution.restype = c_int\nPL_copy_term_ref = _lib.PL_copy_term_ref\nPL_copy_term_ref.argtypes = [term_t]\nPL_copy_term_ref.restype = term_t\nPL_get_list = _lib.PL_get_list\nPL_get_list.argtypes = [term_t, term_t, term_t]\nPL_get_list.restype = c_int\nPL_get_chars = _lib.PL_get_chars  # FIXME",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_next_solution.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_next_solution.argtypes = [qid_t]\nPL_next_solution.restype = c_int\nPL_copy_term_ref = _lib.PL_copy_term_ref\nPL_copy_term_ref.argtypes = [term_t]\nPL_copy_term_ref.restype = term_t\nPL_get_list = _lib.PL_get_list\nPL_get_list.argtypes = [term_t, term_t, term_t]\nPL_get_list.restype = c_int\nPL_get_chars = _lib.PL_get_chars  # FIXME\nPL_close_query = _lib.PL_close_query",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_next_solution.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_next_solution.restype = c_int\nPL_copy_term_ref = _lib.PL_copy_term_ref\nPL_copy_term_ref.argtypes = [term_t]\nPL_copy_term_ref.restype = term_t\nPL_get_list = _lib.PL_get_list\nPL_get_list.argtypes = [term_t, term_t, term_t]\nPL_get_list.restype = c_int\nPL_get_chars = _lib.PL_get_chars  # FIXME\nPL_close_query = _lib.PL_close_query\nPL_close_query.argtypes = [qid_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_copy_term_ref",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_copy_term_ref = _lib.PL_copy_term_ref\nPL_copy_term_ref.argtypes = [term_t]\nPL_copy_term_ref.restype = term_t\nPL_get_list = _lib.PL_get_list\nPL_get_list.argtypes = [term_t, term_t, term_t]\nPL_get_list.restype = c_int\nPL_get_chars = _lib.PL_get_chars  # FIXME\nPL_close_query = _lib.PL_close_query\nPL_close_query.argtypes = [qid_t]\nPL_close_query.restype = None",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_copy_term_ref.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_copy_term_ref.argtypes = [term_t]\nPL_copy_term_ref.restype = term_t\nPL_get_list = _lib.PL_get_list\nPL_get_list.argtypes = [term_t, term_t, term_t]\nPL_get_list.restype = c_int\nPL_get_chars = _lib.PL_get_chars  # FIXME\nPL_close_query = _lib.PL_close_query\nPL_close_query.argtypes = [qid_t]\nPL_close_query.restype = None\nPL_cut_query = _lib.PL_cut_query",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_copy_term_ref.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_copy_term_ref.restype = term_t\nPL_get_list = _lib.PL_get_list\nPL_get_list.argtypes = [term_t, term_t, term_t]\nPL_get_list.restype = c_int\nPL_get_chars = _lib.PL_get_chars  # FIXME\nPL_close_query = _lib.PL_close_query\nPL_close_query.argtypes = [qid_t]\nPL_close_query.restype = None\nPL_cut_query = _lib.PL_cut_query\nPL_cut_query.argtypes = [qid_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_list",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_list = _lib.PL_get_list\nPL_get_list.argtypes = [term_t, term_t, term_t]\nPL_get_list.restype = c_int\nPL_get_chars = _lib.PL_get_chars  # FIXME\nPL_close_query = _lib.PL_close_query\nPL_close_query.argtypes = [qid_t]\nPL_close_query.restype = None\nPL_cut_query = _lib.PL_cut_query\nPL_cut_query.argtypes = [qid_t]\nPL_cut_query.restype = None",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_list.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_list.argtypes = [term_t, term_t, term_t]\nPL_get_list.restype = c_int\nPL_get_chars = _lib.PL_get_chars  # FIXME\nPL_close_query = _lib.PL_close_query\nPL_close_query.argtypes = [qid_t]\nPL_close_query.restype = None\nPL_cut_query = _lib.PL_cut_query\nPL_cut_query.argtypes = [qid_t]\nPL_cut_query.restype = None\nPL_halt = _lib.PL_halt",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_list.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_list.restype = c_int\nPL_get_chars = _lib.PL_get_chars  # FIXME\nPL_close_query = _lib.PL_close_query\nPL_close_query.argtypes = [qid_t]\nPL_close_query.restype = None\nPL_cut_query = _lib.PL_cut_query\nPL_cut_query.argtypes = [qid_t]\nPL_cut_query.restype = None\nPL_halt = _lib.PL_halt\nPL_halt.argtypes = [c_int]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_get_chars = _lib.PL_get_chars  # FIXME\nPL_close_query = _lib.PL_close_query\nPL_close_query.argtypes = [qid_t]\nPL_close_query.restype = None\nPL_cut_query = _lib.PL_cut_query\nPL_cut_query.argtypes = [qid_t]\nPL_cut_query.restype = None\nPL_halt = _lib.PL_halt\nPL_halt.argtypes = [c_int]\nPL_halt.restype = None",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_close_query",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_close_query = _lib.PL_close_query\nPL_close_query.argtypes = [qid_t]\nPL_close_query.restype = None\nPL_cut_query = _lib.PL_cut_query\nPL_cut_query.argtypes = [qid_t]\nPL_cut_query.restype = None\nPL_halt = _lib.PL_halt\nPL_halt.argtypes = [c_int]\nPL_halt.restype = None\nPL_cleanup = _lib.PL_cleanup",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_close_query.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_close_query.argtypes = [qid_t]\nPL_close_query.restype = None\nPL_cut_query = _lib.PL_cut_query\nPL_cut_query.argtypes = [qid_t]\nPL_cut_query.restype = None\nPL_halt = _lib.PL_halt\nPL_halt.argtypes = [c_int]\nPL_halt.restype = None\nPL_cleanup = _lib.PL_cleanup\nPL_cleanup.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_close_query.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_close_query.restype = None\nPL_cut_query = _lib.PL_cut_query\nPL_cut_query.argtypes = [qid_t]\nPL_cut_query.restype = None\nPL_halt = _lib.PL_halt\nPL_halt.argtypes = [c_int]\nPL_halt.restype = None\nPL_cleanup = _lib.PL_cleanup\nPL_cleanup.restype = c_int\nPL_unify_integer = _lib.PL_unify_integer",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cut_query",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_cut_query = _lib.PL_cut_query\nPL_cut_query.argtypes = [qid_t]\nPL_cut_query.restype = None\nPL_halt = _lib.PL_halt\nPL_halt.argtypes = [c_int]\nPL_halt.restype = None\nPL_cleanup = _lib.PL_cleanup\nPL_cleanup.restype = c_int\nPL_unify_integer = _lib.PL_unify_integer\nPL_unify_atom_chars = _lib.PL_unify_atom_chars",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cut_query.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_cut_query.argtypes = [qid_t]\nPL_cut_query.restype = None\nPL_halt = _lib.PL_halt\nPL_halt.argtypes = [c_int]\nPL_halt.restype = None\nPL_cleanup = _lib.PL_cleanup\nPL_cleanup.restype = c_int\nPL_unify_integer = _lib.PL_unify_integer\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_float = _lib.PL_unify_float",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cut_query.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_cut_query.restype = None\nPL_halt = _lib.PL_halt\nPL_halt.argtypes = [c_int]\nPL_halt.restype = None\nPL_cleanup = _lib.PL_cleanup\nPL_cleanup.restype = c_int\nPL_unify_integer = _lib.PL_unify_integer\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_float = _lib.PL_unify_float\nPL_unify_float.argtypes = [term_t, c_double]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_halt",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_halt = _lib.PL_halt\nPL_halt.argtypes = [c_int]\nPL_halt.restype = None\nPL_cleanup = _lib.PL_cleanup\nPL_cleanup.restype = c_int\nPL_unify_integer = _lib.PL_unify_integer\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_float = _lib.PL_unify_float\nPL_unify_float.argtypes = [term_t, c_double]\nPL_unify_float.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_halt.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_halt.argtypes = [c_int]\nPL_halt.restype = None\nPL_cleanup = _lib.PL_cleanup\nPL_cleanup.restype = c_int\nPL_unify_integer = _lib.PL_unify_integer\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_float = _lib.PL_unify_float\nPL_unify_float.argtypes = [term_t, c_double]\nPL_unify_float.restype = c_int\nPL_unify_bool = _lib.PL_unify_bool",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_halt.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_halt.restype = None\nPL_cleanup = _lib.PL_cleanup\nPL_cleanup.restype = c_int\nPL_unify_integer = _lib.PL_unify_integer\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_float = _lib.PL_unify_float\nPL_unify_float.argtypes = [term_t, c_double]\nPL_unify_float.restype = c_int\nPL_unify_bool = _lib.PL_unify_bool\nPL_unify_bool.argtypes = [term_t, c_int]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cleanup",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_cleanup = _lib.PL_cleanup\nPL_cleanup.restype = c_int\nPL_unify_integer = _lib.PL_unify_integer\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_float = _lib.PL_unify_float\nPL_unify_float.argtypes = [term_t, c_double]\nPL_unify_float.restype = c_int\nPL_unify_bool = _lib.PL_unify_bool\nPL_unify_bool.argtypes = [term_t, c_int]\nPL_unify_bool.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cleanup.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_cleanup.restype = c_int\nPL_unify_integer = _lib.PL_unify_integer\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_float = _lib.PL_unify_float\nPL_unify_float.argtypes = [term_t, c_double]\nPL_unify_float.restype = c_int\nPL_unify_bool = _lib.PL_unify_bool\nPL_unify_bool.argtypes = [term_t, c_int]\nPL_unify_bool.restype = c_int\nPL_unify_list = _lib.PL_unify_list",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_integer",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_integer = _lib.PL_unify_integer\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_float = _lib.PL_unify_float\nPL_unify_float.argtypes = [term_t, c_double]\nPL_unify_float.restype = c_int\nPL_unify_bool = _lib.PL_unify_bool\nPL_unify_bool.argtypes = [term_t, c_int]\nPL_unify_bool.restype = c_int\nPL_unify_list = _lib.PL_unify_list\nPL_unify_list.argtypes = [term_t, term_t, term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_atom_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_float = _lib.PL_unify_float\nPL_unify_float.argtypes = [term_t, c_double]\nPL_unify_float.restype = c_int\nPL_unify_bool = _lib.PL_unify_bool\nPL_unify_bool.argtypes = [term_t, c_int]\nPL_unify_bool.restype = c_int\nPL_unify_list = _lib.PL_unify_list\nPL_unify_list.argtypes = [term_t, term_t, term_t]\nPL_unify_list.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_float",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_float = _lib.PL_unify_float\nPL_unify_float.argtypes = [term_t, c_double]\nPL_unify_float.restype = c_int\nPL_unify_bool = _lib.PL_unify_bool\nPL_unify_bool.argtypes = [term_t, c_int]\nPL_unify_bool.restype = c_int\nPL_unify_list = _lib.PL_unify_list\nPL_unify_list.argtypes = [term_t, term_t, term_t]\nPL_unify_list.restype = c_int\nPL_unify_nil = _lib.PL_unify_nil",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_float.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_float.argtypes = [term_t, c_double]\nPL_unify_float.restype = c_int\nPL_unify_bool = _lib.PL_unify_bool\nPL_unify_bool.argtypes = [term_t, c_int]\nPL_unify_bool.restype = c_int\nPL_unify_list = _lib.PL_unify_list\nPL_unify_list.argtypes = [term_t, term_t, term_t]\nPL_unify_list.restype = c_int\nPL_unify_nil = _lib.PL_unify_nil\nPL_unify_nil.argtypes = [term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_float.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_float.restype = c_int\nPL_unify_bool = _lib.PL_unify_bool\nPL_unify_bool.argtypes = [term_t, c_int]\nPL_unify_bool.restype = c_int\nPL_unify_list = _lib.PL_unify_list\nPL_unify_list.argtypes = [term_t, term_t, term_t]\nPL_unify_list.restype = c_int\nPL_unify_nil = _lib.PL_unify_nil\nPL_unify_nil.argtypes = [term_t]\nPL_unify_nil.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_bool",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_bool = _lib.PL_unify_bool\nPL_unify_bool.argtypes = [term_t, c_int]\nPL_unify_bool.restype = c_int\nPL_unify_list = _lib.PL_unify_list\nPL_unify_list.argtypes = [term_t, term_t, term_t]\nPL_unify_list.restype = c_int\nPL_unify_nil = _lib.PL_unify_nil\nPL_unify_nil.argtypes = [term_t]\nPL_unify_nil.restype = c_int\nPL_unify_atom = _lib.PL_unify_atom",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_bool.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_bool.argtypes = [term_t, c_int]\nPL_unify_bool.restype = c_int\nPL_unify_list = _lib.PL_unify_list\nPL_unify_list.argtypes = [term_t, term_t, term_t]\nPL_unify_list.restype = c_int\nPL_unify_nil = _lib.PL_unify_nil\nPL_unify_nil.argtypes = [term_t]\nPL_unify_nil.restype = c_int\nPL_unify_atom = _lib.PL_unify_atom\nPL_unify_atom.argtypes = [term_t, atom_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_bool.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_bool.restype = c_int\nPL_unify_list = _lib.PL_unify_list\nPL_unify_list.argtypes = [term_t, term_t, term_t]\nPL_unify_list.restype = c_int\nPL_unify_nil = _lib.PL_unify_nil\nPL_unify_nil.argtypes = [term_t]\nPL_unify_nil.restype = c_int\nPL_unify_atom = _lib.PL_unify_atom\nPL_unify_atom.argtypes = [term_t, atom_t]\nPL_unify_atom.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_list",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_list = _lib.PL_unify_list\nPL_unify_list.argtypes = [term_t, term_t, term_t]\nPL_unify_list.restype = c_int\nPL_unify_nil = _lib.PL_unify_nil\nPL_unify_nil.argtypes = [term_t]\nPL_unify_nil.restype = c_int\nPL_unify_atom = _lib.PL_unify_atom\nPL_unify_atom.argtypes = [term_t, atom_t]\nPL_unify_atom.restype = c_int\nPL_unify_atom_chars = _lib.PL_unify_atom_chars",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_list.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_list.argtypes = [term_t, term_t, term_t]\nPL_unify_list.restype = c_int\nPL_unify_nil = _lib.PL_unify_nil\nPL_unify_nil.argtypes = [term_t]\nPL_unify_nil.restype = c_int\nPL_unify_atom = _lib.PL_unify_atom\nPL_unify_atom.argtypes = [term_t, atom_t]\nPL_unify_atom.restype = c_int\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_atom_chars.argtypes = [term_t, c_char_p]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_list.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_list.restype = c_int\nPL_unify_nil = _lib.PL_unify_nil\nPL_unify_nil.argtypes = [term_t]\nPL_unify_nil.restype = c_int\nPL_unify_atom = _lib.PL_unify_atom\nPL_unify_atom.argtypes = [term_t, atom_t]\nPL_unify_atom.restype = c_int\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_atom_chars.argtypes = [term_t, c_char_p]\nPL_unify_atom_chars.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_nil",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_nil = _lib.PL_unify_nil\nPL_unify_nil.argtypes = [term_t]\nPL_unify_nil.restype = c_int\nPL_unify_atom = _lib.PL_unify_atom\nPL_unify_atom.argtypes = [term_t, atom_t]\nPL_unify_atom.restype = c_int\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_atom_chars.argtypes = [term_t, c_char_p]\nPL_unify_atom_chars.restype = c_int\nPL_unify_string_chars = _lib.PL_unify_string_chars",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_nil.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_nil.argtypes = [term_t]\nPL_unify_nil.restype = c_int\nPL_unify_atom = _lib.PL_unify_atom\nPL_unify_atom.argtypes = [term_t, atom_t]\nPL_unify_atom.restype = c_int\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_atom_chars.argtypes = [term_t, c_char_p]\nPL_unify_atom_chars.restype = c_int\nPL_unify_string_chars = _lib.PL_unify_string_chars\nPL_unify_string_chars.argtypes = [term_t, c_char_p]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_nil.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_nil.restype = c_int\nPL_unify_atom = _lib.PL_unify_atom\nPL_unify_atom.argtypes = [term_t, atom_t]\nPL_unify_atom.restype = c_int\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_atom_chars.argtypes = [term_t, c_char_p]\nPL_unify_atom_chars.restype = c_int\nPL_unify_string_chars = _lib.PL_unify_string_chars\nPL_unify_string_chars.argtypes = [term_t, c_char_p]\nPL_unify_string_chars.restype = c_void_p",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_atom",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_atom = _lib.PL_unify_atom\nPL_unify_atom.argtypes = [term_t, atom_t]\nPL_unify_atom.restype = c_int\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_atom_chars.argtypes = [term_t, c_char_p]\nPL_unify_atom_chars.restype = c_int\nPL_unify_string_chars = _lib.PL_unify_string_chars\nPL_unify_string_chars.argtypes = [term_t, c_char_p]\nPL_unify_string_chars.restype = c_void_p\nPL_foreign_control = _lib.PL_foreign_control",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_atom.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_atom.argtypes = [term_t, atom_t]\nPL_unify_atom.restype = c_int\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_atom_chars.argtypes = [term_t, c_char_p]\nPL_unify_atom_chars.restype = c_int\nPL_unify_string_chars = _lib.PL_unify_string_chars\nPL_unify_string_chars.argtypes = [term_t, c_char_p]\nPL_unify_string_chars.restype = c_void_p\nPL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_atom.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_atom.restype = c_int\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_atom_chars.argtypes = [term_t, c_char_p]\nPL_unify_atom_chars.restype = c_int\nPL_unify_string_chars = _lib.PL_unify_string_chars\nPL_unify_string_chars.argtypes = [term_t, c_char_p]\nPL_unify_string_chars.restype = c_void_p\nPL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restypes = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_atom_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_atom_chars.argtypes = [term_t, c_char_p]\nPL_unify_atom_chars.restype = c_int\nPL_unify_string_chars = _lib.PL_unify_string_chars\nPL_unify_string_chars.argtypes = [term_t, c_char_p]\nPL_unify_string_chars.restype = c_void_p\nPL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restypes = c_int\nPL_foreign_context_address = _lib.PL_foreign_context_address",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_atom_chars.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_atom_chars.argtypes = [term_t, c_char_p]\nPL_unify_atom_chars.restype = c_int\nPL_unify_string_chars = _lib.PL_unify_string_chars\nPL_unify_string_chars.argtypes = [term_t, c_char_p]\nPL_unify_string_chars.restype = c_void_p\nPL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restypes = c_int\nPL_foreign_context_address = _lib.PL_foreign_context_address\nPL_foreign_context_address.argtypes = [control_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_atom_chars.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_atom_chars.restype = c_int\nPL_unify_string_chars = _lib.PL_unify_string_chars\nPL_unify_string_chars.argtypes = [term_t, c_char_p]\nPL_unify_string_chars.restype = c_void_p\nPL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restypes = c_int\nPL_foreign_context_address = _lib.PL_foreign_context_address\nPL_foreign_context_address.argtypes = [control_t]\nPL_foreign_context_address.restypes = c_void_p",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_string_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_string_chars = _lib.PL_unify_string_chars\nPL_unify_string_chars.argtypes = [term_t, c_char_p]\nPL_unify_string_chars.restype = c_void_p\nPL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restypes = c_int\nPL_foreign_context_address = _lib.PL_foreign_context_address\nPL_foreign_context_address.argtypes = [control_t]\nPL_foreign_context_address.restypes = c_void_p\nPL_retry_address = _lib._PL_retry_address",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_string_chars.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_string_chars.argtypes = [term_t, c_char_p]\nPL_unify_string_chars.restype = c_void_p\nPL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restypes = c_int\nPL_foreign_context_address = _lib.PL_foreign_context_address\nPL_foreign_context_address.argtypes = [control_t]\nPL_foreign_context_address.restypes = c_void_p\nPL_retry_address = _lib._PL_retry_address\nPL_retry_address.argtypes = [c_void_p]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_string_chars.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_string_chars.restype = c_void_p\nPL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restypes = c_int\nPL_foreign_context_address = _lib.PL_foreign_context_address\nPL_foreign_context_address.argtypes = [control_t]\nPL_foreign_context_address.restypes = c_void_p\nPL_retry_address = _lib._PL_retry_address\nPL_retry_address.argtypes = [c_void_p]\nPL_retry_address.restypes = foreign_t",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_control",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restypes = c_int\nPL_foreign_context_address = _lib.PL_foreign_context_address\nPL_foreign_context_address.argtypes = [control_t]\nPL_foreign_context_address.restypes = c_void_p\nPL_retry_address = _lib._PL_retry_address\nPL_retry_address.argtypes = [c_void_p]\nPL_retry_address.restypes = foreign_t\nPL_unify = _lib.PL_unify",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_control.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restypes = c_int\nPL_foreign_context_address = _lib.PL_foreign_context_address\nPL_foreign_context_address.argtypes = [control_t]\nPL_foreign_context_address.restypes = c_void_p\nPL_retry_address = _lib._PL_retry_address\nPL_retry_address.argtypes = [c_void_p]\nPL_retry_address.restypes = foreign_t\nPL_unify = _lib.PL_unify\nPL_unify.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_control.restypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_foreign_control.restypes = c_int\nPL_foreign_context_address = _lib.PL_foreign_context_address\nPL_foreign_context_address.argtypes = [control_t]\nPL_foreign_context_address.restypes = c_void_p\nPL_retry_address = _lib._PL_retry_address\nPL_retry_address.argtypes = [c_void_p]\nPL_retry_address.restypes = foreign_t\nPL_unify = _lib.PL_unify\nPL_unify.restype = c_int\nPL_succeed = 1",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_context_address",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_foreign_context_address = _lib.PL_foreign_context_address\nPL_foreign_context_address.argtypes = [control_t]\nPL_foreign_context_address.restypes = c_void_p\nPL_retry_address = _lib._PL_retry_address\nPL_retry_address.argtypes = [c_void_p]\nPL_retry_address.restypes = foreign_t\nPL_unify = _lib.PL_unify\nPL_unify.restype = c_int\nPL_succeed = 1\nPL_unify_arg = _lib.PL_unify_arg",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_context_address.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_foreign_context_address.argtypes = [control_t]\nPL_foreign_context_address.restypes = c_void_p\nPL_retry_address = _lib._PL_retry_address\nPL_retry_address.argtypes = [c_void_p]\nPL_retry_address.restypes = foreign_t\nPL_unify = _lib.PL_unify\nPL_unify.restype = c_int\nPL_succeed = 1\nPL_unify_arg = _lib.PL_unify_arg\nPL_unify_arg.argtypes = [c_int, term_t, term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_context_address.restypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_foreign_context_address.restypes = c_void_p\nPL_retry_address = _lib._PL_retry_address\nPL_retry_address.argtypes = [c_void_p]\nPL_retry_address.restypes = foreign_t\nPL_unify = _lib.PL_unify\nPL_unify.restype = c_int\nPL_succeed = 1\nPL_unify_arg = _lib.PL_unify_arg\nPL_unify_arg.argtypes = [c_int, term_t, term_t]\nPL_unify_arg.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_retry_address",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_retry_address = _lib._PL_retry_address\nPL_retry_address.argtypes = [c_void_p]\nPL_retry_address.restypes = foreign_t\nPL_unify = _lib.PL_unify\nPL_unify.restype = c_int\nPL_succeed = 1\nPL_unify_arg = _lib.PL_unify_arg\nPL_unify_arg.argtypes = [c_int, term_t, term_t]\nPL_unify_arg.restype = c_int\n# Verify types",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_retry_address.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_retry_address.argtypes = [c_void_p]\nPL_retry_address.restypes = foreign_t\nPL_unify = _lib.PL_unify\nPL_unify.restype = c_int\nPL_succeed = 1\nPL_unify_arg = _lib.PL_unify_arg\nPL_unify_arg.argtypes = [c_int, term_t, term_t]\nPL_unify_arg.restype = c_int\n# Verify types\nPL_term_type = _lib.PL_term_type",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_retry_address.restypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_retry_address.restypes = foreign_t\nPL_unify = _lib.PL_unify\nPL_unify.restype = c_int\nPL_succeed = 1\nPL_unify_arg = _lib.PL_unify_arg\nPL_unify_arg.argtypes = [c_int, term_t, term_t]\nPL_unify_arg.restype = c_int\n# Verify types\nPL_term_type = _lib.PL_term_type\nPL_term_type.argtypes = [term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify = _lib.PL_unify\nPL_unify.restype = c_int\nPL_succeed = 1\nPL_unify_arg = _lib.PL_unify_arg\nPL_unify_arg.argtypes = [c_int, term_t, term_t]\nPL_unify_arg.restype = c_int\n# Verify types\nPL_term_type = _lib.PL_term_type\nPL_term_type.argtypes = [term_t]\nPL_term_type.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify.restype = c_int\nPL_succeed = 1\nPL_unify_arg = _lib.PL_unify_arg\nPL_unify_arg.argtypes = [c_int, term_t, term_t]\nPL_unify_arg.restype = c_int\n# Verify types\nPL_term_type = _lib.PL_term_type\nPL_term_type.argtypes = [term_t]\nPL_term_type.restype = c_int\nPL_is_variable = _lib.PL_is_variable",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_succeed",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_succeed = 1\nPL_unify_arg = _lib.PL_unify_arg\nPL_unify_arg.argtypes = [c_int, term_t, term_t]\nPL_unify_arg.restype = c_int\n# Verify types\nPL_term_type = _lib.PL_term_type\nPL_term_type.argtypes = [term_t]\nPL_term_type.restype = c_int\nPL_is_variable = _lib.PL_is_variable\nPL_is_variable.argtypes = [term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_arg",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_arg = _lib.PL_unify_arg\nPL_unify_arg.argtypes = [c_int, term_t, term_t]\nPL_unify_arg.restype = c_int\n# Verify types\nPL_term_type = _lib.PL_term_type\nPL_term_type.argtypes = [term_t]\nPL_term_type.restype = c_int\nPL_is_variable = _lib.PL_is_variable\nPL_is_variable.argtypes = [term_t]\nPL_is_variable.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_arg.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_arg.argtypes = [c_int, term_t, term_t]\nPL_unify_arg.restype = c_int\n# Verify types\nPL_term_type = _lib.PL_term_type\nPL_term_type.argtypes = [term_t]\nPL_term_type.restype = c_int\nPL_is_variable = _lib.PL_is_variable\nPL_is_variable.argtypes = [term_t]\nPL_is_variable.restype = c_int\nPL_is_ground = _lib.PL_is_ground",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_arg.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_arg.restype = c_int\n# Verify types\nPL_term_type = _lib.PL_term_type\nPL_term_type.argtypes = [term_t]\nPL_term_type.restype = c_int\nPL_is_variable = _lib.PL_is_variable\nPL_is_variable.argtypes = [term_t]\nPL_is_variable.restype = c_int\nPL_is_ground = _lib.PL_is_ground\nPL_is_ground.argtypes = [term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_term_type",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_term_type = _lib.PL_term_type\nPL_term_type.argtypes = [term_t]\nPL_term_type.restype = c_int\nPL_is_variable = _lib.PL_is_variable\nPL_is_variable.argtypes = [term_t]\nPL_is_variable.restype = c_int\nPL_is_ground = _lib.PL_is_ground\nPL_is_ground.argtypes = [term_t]\nPL_is_ground.restype = c_int\nPL_is_atom = _lib.PL_is_atom",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_term_type.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_term_type.argtypes = [term_t]\nPL_term_type.restype = c_int\nPL_is_variable = _lib.PL_is_variable\nPL_is_variable.argtypes = [term_t]\nPL_is_variable.restype = c_int\nPL_is_ground = _lib.PL_is_ground\nPL_is_ground.argtypes = [term_t]\nPL_is_ground.restype = c_int\nPL_is_atom = _lib.PL_is_atom\nPL_is_atom.argtypes = [term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_term_type.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_term_type.restype = c_int\nPL_is_variable = _lib.PL_is_variable\nPL_is_variable.argtypes = [term_t]\nPL_is_variable.restype = c_int\nPL_is_ground = _lib.PL_is_ground\nPL_is_ground.argtypes = [term_t]\nPL_is_ground.restype = c_int\nPL_is_atom = _lib.PL_is_atom\nPL_is_atom.argtypes = [term_t]\nPL_is_atom.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_variable",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_variable = _lib.PL_is_variable\nPL_is_variable.argtypes = [term_t]\nPL_is_variable.restype = c_int\nPL_is_ground = _lib.PL_is_ground\nPL_is_ground.argtypes = [term_t]\nPL_is_ground.restype = c_int\nPL_is_atom = _lib.PL_is_atom\nPL_is_atom.argtypes = [term_t]\nPL_is_atom.restype = c_int\nPL_is_integer = _lib.PL_is_integer",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_variable.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_variable.argtypes = [term_t]\nPL_is_variable.restype = c_int\nPL_is_ground = _lib.PL_is_ground\nPL_is_ground.argtypes = [term_t]\nPL_is_ground.restype = c_int\nPL_is_atom = _lib.PL_is_atom\nPL_is_atom.argtypes = [term_t]\nPL_is_atom.restype = c_int\nPL_is_integer = _lib.PL_is_integer\nPL_is_integer.argtypes = [term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_variable.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_variable.restype = c_int\nPL_is_ground = _lib.PL_is_ground\nPL_is_ground.argtypes = [term_t]\nPL_is_ground.restype = c_int\nPL_is_atom = _lib.PL_is_atom\nPL_is_atom.argtypes = [term_t]\nPL_is_atom.restype = c_int\nPL_is_integer = _lib.PL_is_integer\nPL_is_integer.argtypes = [term_t]\nPL_is_integer.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_ground",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_ground = _lib.PL_is_ground\nPL_is_ground.argtypes = [term_t]\nPL_is_ground.restype = c_int\nPL_is_atom = _lib.PL_is_atom\nPL_is_atom.argtypes = [term_t]\nPL_is_atom.restype = c_int\nPL_is_integer = _lib.PL_is_integer\nPL_is_integer.argtypes = [term_t]\nPL_is_integer.restype = c_int\nPL_is_string = _lib.PL_is_string",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_ground.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_ground.argtypes = [term_t]\nPL_is_ground.restype = c_int\nPL_is_atom = _lib.PL_is_atom\nPL_is_atom.argtypes = [term_t]\nPL_is_atom.restype = c_int\nPL_is_integer = _lib.PL_is_integer\nPL_is_integer.argtypes = [term_t]\nPL_is_integer.restype = c_int\nPL_is_string = _lib.PL_is_string\nPL_is_string.argtypes = [term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_ground.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_ground.restype = c_int\nPL_is_atom = _lib.PL_is_atom\nPL_is_atom.argtypes = [term_t]\nPL_is_atom.restype = c_int\nPL_is_integer = _lib.PL_is_integer\nPL_is_integer.argtypes = [term_t]\nPL_is_integer.restype = c_int\nPL_is_string = _lib.PL_is_string\nPL_is_string.argtypes = [term_t]\nPL_is_string.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_atom",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_atom = _lib.PL_is_atom\nPL_is_atom.argtypes = [term_t]\nPL_is_atom.restype = c_int\nPL_is_integer = _lib.PL_is_integer\nPL_is_integer.argtypes = [term_t]\nPL_is_integer.restype = c_int\nPL_is_string = _lib.PL_is_string\nPL_is_string.argtypes = [term_t]\nPL_is_string.restype = c_int\nPL_is_float = _lib.PL_is_float",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_atom.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_atom.argtypes = [term_t]\nPL_is_atom.restype = c_int\nPL_is_integer = _lib.PL_is_integer\nPL_is_integer.argtypes = [term_t]\nPL_is_integer.restype = c_int\nPL_is_string = _lib.PL_is_string\nPL_is_string.argtypes = [term_t]\nPL_is_string.restype = c_int\nPL_is_float = _lib.PL_is_float\nPL_is_float.argtypes = [term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_atom.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_atom.restype = c_int\nPL_is_integer = _lib.PL_is_integer\nPL_is_integer.argtypes = [term_t]\nPL_is_integer.restype = c_int\nPL_is_string = _lib.PL_is_string\nPL_is_string.argtypes = [term_t]\nPL_is_string.restype = c_int\nPL_is_float = _lib.PL_is_float\nPL_is_float.argtypes = [term_t]\nPL_is_float.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_integer",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_integer = _lib.PL_is_integer\nPL_is_integer.argtypes = [term_t]\nPL_is_integer.restype = c_int\nPL_is_string = _lib.PL_is_string\nPL_is_string.argtypes = [term_t]\nPL_is_string.restype = c_int\nPL_is_float = _lib.PL_is_float\nPL_is_float.argtypes = [term_t]\nPL_is_float.restype = c_int\nPL_is_compound = _lib.PL_is_compound",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_integer.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_integer.argtypes = [term_t]\nPL_is_integer.restype = c_int\nPL_is_string = _lib.PL_is_string\nPL_is_string.argtypes = [term_t]\nPL_is_string.restype = c_int\nPL_is_float = _lib.PL_is_float\nPL_is_float.argtypes = [term_t]\nPL_is_float.restype = c_int\nPL_is_compound = _lib.PL_is_compound\nPL_is_compound.argtypes = [term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_integer.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_integer.restype = c_int\nPL_is_string = _lib.PL_is_string\nPL_is_string.argtypes = [term_t]\nPL_is_string.restype = c_int\nPL_is_float = _lib.PL_is_float\nPL_is_float.argtypes = [term_t]\nPL_is_float.restype = c_int\nPL_is_compound = _lib.PL_is_compound\nPL_is_compound.argtypes = [term_t]\nPL_is_compound.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_string",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_string = _lib.PL_is_string\nPL_is_string.argtypes = [term_t]\nPL_is_string.restype = c_int\nPL_is_float = _lib.PL_is_float\nPL_is_float.argtypes = [term_t]\nPL_is_float.restype = c_int\nPL_is_compound = _lib.PL_is_compound\nPL_is_compound.argtypes = [term_t]\nPL_is_compound.restype = c_int\nPL_is_functor = _lib.PL_is_functor",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_string.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_string.argtypes = [term_t]\nPL_is_string.restype = c_int\nPL_is_float = _lib.PL_is_float\nPL_is_float.argtypes = [term_t]\nPL_is_float.restype = c_int\nPL_is_compound = _lib.PL_is_compound\nPL_is_compound.argtypes = [term_t]\nPL_is_compound.restype = c_int\nPL_is_functor = _lib.PL_is_functor\nPL_is_functor.argtypes = [term_t, functor_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_string.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_string.restype = c_int\nPL_is_float = _lib.PL_is_float\nPL_is_float.argtypes = [term_t]\nPL_is_float.restype = c_int\nPL_is_compound = _lib.PL_is_compound\nPL_is_compound.argtypes = [term_t]\nPL_is_compound.restype = c_int\nPL_is_functor = _lib.PL_is_functor\nPL_is_functor.argtypes = [term_t, functor_t]\nPL_is_functor.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_float",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_float = _lib.PL_is_float\nPL_is_float.argtypes = [term_t]\nPL_is_float.restype = c_int\nPL_is_compound = _lib.PL_is_compound\nPL_is_compound.argtypes = [term_t]\nPL_is_compound.restype = c_int\nPL_is_functor = _lib.PL_is_functor\nPL_is_functor.argtypes = [term_t, functor_t]\nPL_is_functor.restype = c_int\nPL_is_list = _lib.PL_is_list",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_float.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_float.argtypes = [term_t]\nPL_is_float.restype = c_int\nPL_is_compound = _lib.PL_is_compound\nPL_is_compound.argtypes = [term_t]\nPL_is_compound.restype = c_int\nPL_is_functor = _lib.PL_is_functor\nPL_is_functor.argtypes = [term_t, functor_t]\nPL_is_functor.restype = c_int\nPL_is_list = _lib.PL_is_list\nPL_is_list.argtypes = [term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_float.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_float.restype = c_int\nPL_is_compound = _lib.PL_is_compound\nPL_is_compound.argtypes = [term_t]\nPL_is_compound.restype = c_int\nPL_is_functor = _lib.PL_is_functor\nPL_is_functor.argtypes = [term_t, functor_t]\nPL_is_functor.restype = c_int\nPL_is_list = _lib.PL_is_list\nPL_is_list.argtypes = [term_t]\nPL_is_list.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_compound",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_compound = _lib.PL_is_compound\nPL_is_compound.argtypes = [term_t]\nPL_is_compound.restype = c_int\nPL_is_functor = _lib.PL_is_functor\nPL_is_functor.argtypes = [term_t, functor_t]\nPL_is_functor.restype = c_int\nPL_is_list = _lib.PL_is_list\nPL_is_list.argtypes = [term_t]\nPL_is_list.restype = c_int\nPL_is_atomic = _lib.PL_is_atomic",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_compound.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_compound.argtypes = [term_t]\nPL_is_compound.restype = c_int\nPL_is_functor = _lib.PL_is_functor\nPL_is_functor.argtypes = [term_t, functor_t]\nPL_is_functor.restype = c_int\nPL_is_list = _lib.PL_is_list\nPL_is_list.argtypes = [term_t]\nPL_is_list.restype = c_int\nPL_is_atomic = _lib.PL_is_atomic\nPL_is_atomic.argtypes = [term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_compound.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_compound.restype = c_int\nPL_is_functor = _lib.PL_is_functor\nPL_is_functor.argtypes = [term_t, functor_t]\nPL_is_functor.restype = c_int\nPL_is_list = _lib.PL_is_list\nPL_is_list.argtypes = [term_t]\nPL_is_list.restype = c_int\nPL_is_atomic = _lib.PL_is_atomic\nPL_is_atomic.argtypes = [term_t]\nPL_is_atomic.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_functor",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_functor = _lib.PL_is_functor\nPL_is_functor.argtypes = [term_t, functor_t]\nPL_is_functor.restype = c_int\nPL_is_list = _lib.PL_is_list\nPL_is_list.argtypes = [term_t]\nPL_is_list.restype = c_int\nPL_is_atomic = _lib.PL_is_atomic\nPL_is_atomic.argtypes = [term_t]\nPL_is_atomic.restype = c_int\nPL_is_number = _lib.PL_is_number",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_functor.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_functor.argtypes = [term_t, functor_t]\nPL_is_functor.restype = c_int\nPL_is_list = _lib.PL_is_list\nPL_is_list.argtypes = [term_t]\nPL_is_list.restype = c_int\nPL_is_atomic = _lib.PL_is_atomic\nPL_is_atomic.argtypes = [term_t]\nPL_is_atomic.restype = c_int\nPL_is_number = _lib.PL_is_number\nPL_is_number.argtypes = [term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_functor.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_functor.restype = c_int\nPL_is_list = _lib.PL_is_list\nPL_is_list.argtypes = [term_t]\nPL_is_list.restype = c_int\nPL_is_atomic = _lib.PL_is_atomic\nPL_is_atomic.argtypes = [term_t]\nPL_is_atomic.restype = c_int\nPL_is_number = _lib.PL_is_number\nPL_is_number.argtypes = [term_t]\nPL_is_number.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_list",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_list = _lib.PL_is_list\nPL_is_list.argtypes = [term_t]\nPL_is_list.restype = c_int\nPL_is_atomic = _lib.PL_is_atomic\nPL_is_atomic.argtypes = [term_t]\nPL_is_atomic.restype = c_int\nPL_is_number = _lib.PL_is_number\nPL_is_number.argtypes = [term_t]\nPL_is_number.restype = c_int\nPL_put_variable = _lib.PL_put_variable",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_list.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_list.argtypes = [term_t]\nPL_is_list.restype = c_int\nPL_is_atomic = _lib.PL_is_atomic\nPL_is_atomic.argtypes = [term_t]\nPL_is_atomic.restype = c_int\nPL_is_number = _lib.PL_is_number\nPL_is_number.argtypes = [term_t]\nPL_is_number.restype = c_int\nPL_put_variable = _lib.PL_put_variable\nPL_put_variable.argtypes = [term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_list.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_list.restype = c_int\nPL_is_atomic = _lib.PL_is_atomic\nPL_is_atomic.argtypes = [term_t]\nPL_is_atomic.restype = c_int\nPL_is_number = _lib.PL_is_number\nPL_is_number.argtypes = [term_t]\nPL_is_number.restype = c_int\nPL_put_variable = _lib.PL_put_variable\nPL_put_variable.argtypes = [term_t]\nPL_put_variable.restype = None",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_atomic",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_atomic = _lib.PL_is_atomic\nPL_is_atomic.argtypes = [term_t]\nPL_is_atomic.restype = c_int\nPL_is_number = _lib.PL_is_number\nPL_is_number.argtypes = [term_t]\nPL_is_number.restype = c_int\nPL_put_variable = _lib.PL_put_variable\nPL_put_variable.argtypes = [term_t]\nPL_put_variable.restype = None\nPL_put_integer = _lib.PL_put_integer",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_atomic.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_atomic.argtypes = [term_t]\nPL_is_atomic.restype = c_int\nPL_is_number = _lib.PL_is_number\nPL_is_number.argtypes = [term_t]\nPL_is_number.restype = c_int\nPL_put_variable = _lib.PL_put_variable\nPL_put_variable.argtypes = [term_t]\nPL_put_variable.restype = None\nPL_put_integer = _lib.PL_put_integer\nPL_put_integer.argtypes = [term_t, c_long]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_atomic.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_atomic.restype = c_int\nPL_is_number = _lib.PL_is_number\nPL_is_number.argtypes = [term_t]\nPL_is_number.restype = c_int\nPL_put_variable = _lib.PL_put_variable\nPL_put_variable.argtypes = [term_t]\nPL_put_variable.restype = None\nPL_put_integer = _lib.PL_put_integer\nPL_put_integer.argtypes = [term_t, c_long]\nPL_put_integer.restype = None",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_number",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_number = _lib.PL_is_number\nPL_is_number.argtypes = [term_t]\nPL_is_number.restype = c_int\nPL_put_variable = _lib.PL_put_variable\nPL_put_variable.argtypes = [term_t]\nPL_put_variable.restype = None\nPL_put_integer = _lib.PL_put_integer\nPL_put_integer.argtypes = [term_t, c_long]\nPL_put_integer.restype = None\nPL_put_functor = _lib.PL_put_functor",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_number.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_number.argtypes = [term_t]\nPL_is_number.restype = c_int\nPL_put_variable = _lib.PL_put_variable\nPL_put_variable.argtypes = [term_t]\nPL_put_variable.restype = None\nPL_put_integer = _lib.PL_put_integer\nPL_put_integer.argtypes = [term_t, c_long]\nPL_put_integer.restype = None\nPL_put_functor = _lib.PL_put_functor\nPL_put_functor.argtypes = [term_t, functor_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_number.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_number.restype = c_int\nPL_put_variable = _lib.PL_put_variable\nPL_put_variable.argtypes = [term_t]\nPL_put_variable.restype = None\nPL_put_integer = _lib.PL_put_integer\nPL_put_integer.argtypes = [term_t, c_long]\nPL_put_integer.restype = None\nPL_put_functor = _lib.PL_put_functor\nPL_put_functor.argtypes = [term_t, functor_t]\nPL_put_functor.restype = None",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_variable",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_variable = _lib.PL_put_variable\nPL_put_variable.argtypes = [term_t]\nPL_put_variable.restype = None\nPL_put_integer = _lib.PL_put_integer\nPL_put_integer.argtypes = [term_t, c_long]\nPL_put_integer.restype = None\nPL_put_functor = _lib.PL_put_functor\nPL_put_functor.argtypes = [term_t, functor_t]\nPL_put_functor.restype = None\nPL_put_list = _lib.PL_put_list",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_variable.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_variable.argtypes = [term_t]\nPL_put_variable.restype = None\nPL_put_integer = _lib.PL_put_integer\nPL_put_integer.argtypes = [term_t, c_long]\nPL_put_integer.restype = None\nPL_put_functor = _lib.PL_put_functor\nPL_put_functor.argtypes = [term_t, functor_t]\nPL_put_functor.restype = None\nPL_put_list = _lib.PL_put_list\nPL_put_list.argtypes = [term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_variable.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_variable.restype = None\nPL_put_integer = _lib.PL_put_integer\nPL_put_integer.argtypes = [term_t, c_long]\nPL_put_integer.restype = None\nPL_put_functor = _lib.PL_put_functor\nPL_put_functor.argtypes = [term_t, functor_t]\nPL_put_functor.restype = None\nPL_put_list = _lib.PL_put_list\nPL_put_list.argtypes = [term_t]\nPL_put_list.restype = None",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_integer",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_integer = _lib.PL_put_integer\nPL_put_integer.argtypes = [term_t, c_long]\nPL_put_integer.restype = None\nPL_put_functor = _lib.PL_put_functor\nPL_put_functor.argtypes = [term_t, functor_t]\nPL_put_functor.restype = None\nPL_put_list = _lib.PL_put_list\nPL_put_list.argtypes = [term_t]\nPL_put_list.restype = None\nPL_put_nil = _lib.PL_put_nil",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_integer.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_integer.argtypes = [term_t, c_long]\nPL_put_integer.restype = None\nPL_put_functor = _lib.PL_put_functor\nPL_put_functor.argtypes = [term_t, functor_t]\nPL_put_functor.restype = None\nPL_put_list = _lib.PL_put_list\nPL_put_list.argtypes = [term_t]\nPL_put_list.restype = None\nPL_put_nil = _lib.PL_put_nil\nPL_put_nil.argtypes = [term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_integer.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_integer.restype = None\nPL_put_functor = _lib.PL_put_functor\nPL_put_functor.argtypes = [term_t, functor_t]\nPL_put_functor.restype = None\nPL_put_list = _lib.PL_put_list\nPL_put_list.argtypes = [term_t]\nPL_put_list.restype = None\nPL_put_nil = _lib.PL_put_nil\nPL_put_nil.argtypes = [term_t]\nPL_put_nil.restype = None",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_functor",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_functor = _lib.PL_put_functor\nPL_put_functor.argtypes = [term_t, functor_t]\nPL_put_functor.restype = None\nPL_put_list = _lib.PL_put_list\nPL_put_list.argtypes = [term_t]\nPL_put_list.restype = None\nPL_put_nil = _lib.PL_put_nil\nPL_put_nil.argtypes = [term_t]\nPL_put_nil.restype = None\nPL_put_term = _lib.PL_put_term",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_functor.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_functor.argtypes = [term_t, functor_t]\nPL_put_functor.restype = None\nPL_put_list = _lib.PL_put_list\nPL_put_list.argtypes = [term_t]\nPL_put_list.restype = None\nPL_put_nil = _lib.PL_put_nil\nPL_put_nil.argtypes = [term_t]\nPL_put_nil.restype = None\nPL_put_term = _lib.PL_put_term\nPL_put_term.argtypes = [term_t, term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_functor.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_functor.restype = None\nPL_put_list = _lib.PL_put_list\nPL_put_list.argtypes = [term_t]\nPL_put_list.restype = None\nPL_put_nil = _lib.PL_put_nil\nPL_put_nil.argtypes = [term_t]\nPL_put_nil.restype = None\nPL_put_term = _lib.PL_put_term\nPL_put_term.argtypes = [term_t, term_t]\nPL_put_term.restype = None",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_list",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_list = _lib.PL_put_list\nPL_put_list.argtypes = [term_t]\nPL_put_list.restype = None\nPL_put_nil = _lib.PL_put_nil\nPL_put_nil.argtypes = [term_t]\nPL_put_nil.restype = None\nPL_put_term = _lib.PL_put_term\nPL_put_term.argtypes = [term_t, term_t]\nPL_put_term.restype = None\nPL_cons_functor = _lib.PL_cons_functor  # FIXME:",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_list.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_list.argtypes = [term_t]\nPL_put_list.restype = None\nPL_put_nil = _lib.PL_put_nil\nPL_put_nil.argtypes = [term_t]\nPL_put_nil.restype = None\nPL_put_term = _lib.PL_put_term\nPL_put_term.argtypes = [term_t, term_t]\nPL_put_term.restype = None\nPL_cons_functor = _lib.PL_cons_functor  # FIXME:\nPL_cons_functor_v = _lib.PL_cons_functor_v",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_list.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_list.restype = None\nPL_put_nil = _lib.PL_put_nil\nPL_put_nil.argtypes = [term_t]\nPL_put_nil.restype = None\nPL_put_term = _lib.PL_put_term\nPL_put_term.argtypes = [term_t, term_t]\nPL_put_term.restype = None\nPL_cons_functor = _lib.PL_cons_functor  # FIXME:\nPL_cons_functor_v = _lib.PL_cons_functor_v\nPL_cons_functor_v.argtypes = [term_t, functor_t, term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_nil",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_nil = _lib.PL_put_nil\nPL_put_nil.argtypes = [term_t]\nPL_put_nil.restype = None\nPL_put_term = _lib.PL_put_term\nPL_put_term.argtypes = [term_t, term_t]\nPL_put_term.restype = None\nPL_cons_functor = _lib.PL_cons_functor  # FIXME:\nPL_cons_functor_v = _lib.PL_cons_functor_v\nPL_cons_functor_v.argtypes = [term_t, functor_t, term_t]\nPL_cons_functor_v.restype = None",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_nil.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_nil.argtypes = [term_t]\nPL_put_nil.restype = None\nPL_put_term = _lib.PL_put_term\nPL_put_term.argtypes = [term_t, term_t]\nPL_put_term.restype = None\nPL_cons_functor = _lib.PL_cons_functor  # FIXME:\nPL_cons_functor_v = _lib.PL_cons_functor_v\nPL_cons_functor_v.argtypes = [term_t, functor_t, term_t]\nPL_cons_functor_v.restype = None\nPL_cons_list = _lib.PL_cons_list",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_nil.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_nil.restype = None\nPL_put_term = _lib.PL_put_term\nPL_put_term.argtypes = [term_t, term_t]\nPL_put_term.restype = None\nPL_cons_functor = _lib.PL_cons_functor  # FIXME:\nPL_cons_functor_v = _lib.PL_cons_functor_v\nPL_cons_functor_v.argtypes = [term_t, functor_t, term_t]\nPL_cons_functor_v.restype = None\nPL_cons_list = _lib.PL_cons_list\nPL_cons_list.argtypes = [term_t, term_t, term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_term",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_term = _lib.PL_put_term\nPL_put_term.argtypes = [term_t, term_t]\nPL_put_term.restype = None\nPL_cons_functor = _lib.PL_cons_functor  # FIXME:\nPL_cons_functor_v = _lib.PL_cons_functor_v\nPL_cons_functor_v.argtypes = [term_t, functor_t, term_t]\nPL_cons_functor_v.restype = None\nPL_cons_list = _lib.PL_cons_list\nPL_cons_list.argtypes = [term_t, term_t, term_t]\nPL_cons_list.restype = None",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_term.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_term.argtypes = [term_t, term_t]\nPL_put_term.restype = None\nPL_cons_functor = _lib.PL_cons_functor  # FIXME:\nPL_cons_functor_v = _lib.PL_cons_functor_v\nPL_cons_functor_v.argtypes = [term_t, functor_t, term_t]\nPL_cons_functor_v.restype = None\nPL_cons_list = _lib.PL_cons_list\nPL_cons_list.argtypes = [term_t, term_t, term_t]\nPL_cons_list.restype = None\nPL_exception = _lib.PL_exception",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_term.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_put_term.restype = None\nPL_cons_functor = _lib.PL_cons_functor  # FIXME:\nPL_cons_functor_v = _lib.PL_cons_functor_v\nPL_cons_functor_v.argtypes = [term_t, functor_t, term_t]\nPL_cons_functor_v.restype = None\nPL_cons_list = _lib.PL_cons_list\nPL_cons_list.argtypes = [term_t, term_t, term_t]\nPL_cons_list.restype = None\nPL_exception = _lib.PL_exception\nPL_exception.argtypes = [qid_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cons_functor",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_cons_functor = _lib.PL_cons_functor  # FIXME:\nPL_cons_functor_v = _lib.PL_cons_functor_v\nPL_cons_functor_v.argtypes = [term_t, functor_t, term_t]\nPL_cons_functor_v.restype = None\nPL_cons_list = _lib.PL_cons_list\nPL_cons_list.argtypes = [term_t, term_t, term_t]\nPL_cons_list.restype = None\nPL_exception = _lib.PL_exception\nPL_exception.argtypes = [qid_t]\nPL_exception.restype = term_t",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cons_functor_v",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_cons_functor_v = _lib.PL_cons_functor_v\nPL_cons_functor_v.argtypes = [term_t, functor_t, term_t]\nPL_cons_functor_v.restype = None\nPL_cons_list = _lib.PL_cons_list\nPL_cons_list.argtypes = [term_t, term_t, term_t]\nPL_cons_list.restype = None\nPL_exception = _lib.PL_exception\nPL_exception.argtypes = [qid_t]\nPL_exception.restype = term_t\nPL_register_foreign = _lib.PL_register_foreign",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cons_functor_v.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_cons_functor_v.argtypes = [term_t, functor_t, term_t]\nPL_cons_functor_v.restype = None\nPL_cons_list = _lib.PL_cons_list\nPL_cons_list.argtypes = [term_t, term_t, term_t]\nPL_cons_list.restype = None\nPL_exception = _lib.PL_exception\nPL_exception.argtypes = [qid_t]\nPL_exception.restype = term_t\nPL_register_foreign = _lib.PL_register_foreign\nPL_register_foreign = check_strings(0, None)(PL_register_foreign)",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cons_functor_v.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_cons_functor_v.restype = None\nPL_cons_list = _lib.PL_cons_list\nPL_cons_list.argtypes = [term_t, term_t, term_t]\nPL_cons_list.restype = None\nPL_exception = _lib.PL_exception\nPL_exception.argtypes = [qid_t]\nPL_exception.restype = term_t\nPL_register_foreign = _lib.PL_register_foreign\nPL_register_foreign = check_strings(0, None)(PL_register_foreign)\nPL_new_atom = _lib.PL_new_atom",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cons_list",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_cons_list = _lib.PL_cons_list\nPL_cons_list.argtypes = [term_t, term_t, term_t]\nPL_cons_list.restype = None\nPL_exception = _lib.PL_exception\nPL_exception.argtypes = [qid_t]\nPL_exception.restype = term_t\nPL_register_foreign = _lib.PL_register_foreign\nPL_register_foreign = check_strings(0, None)(PL_register_foreign)\nPL_new_atom = _lib.PL_new_atom\nPL_new_atom.argtypes = [c_char_p]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cons_list.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_cons_list.argtypes = [term_t, term_t, term_t]\nPL_cons_list.restype = None\nPL_exception = _lib.PL_exception\nPL_exception.argtypes = [qid_t]\nPL_exception.restype = term_t\nPL_register_foreign = _lib.PL_register_foreign\nPL_register_foreign = check_strings(0, None)(PL_register_foreign)\nPL_new_atom = _lib.PL_new_atom\nPL_new_atom.argtypes = [c_char_p]\nPL_new_atom.restype = atom_t",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cons_list.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_cons_list.restype = None\nPL_exception = _lib.PL_exception\nPL_exception.argtypes = [qid_t]\nPL_exception.restype = term_t\nPL_register_foreign = _lib.PL_register_foreign\nPL_register_foreign = check_strings(0, None)(PL_register_foreign)\nPL_new_atom = _lib.PL_new_atom\nPL_new_atom.argtypes = [c_char_p]\nPL_new_atom.restype = atom_t\nPL_new_atom = check_strings(0, None)(PL_new_atom)",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_exception",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_exception = _lib.PL_exception\nPL_exception.argtypes = [qid_t]\nPL_exception.restype = term_t\nPL_register_foreign = _lib.PL_register_foreign\nPL_register_foreign = check_strings(0, None)(PL_register_foreign)\nPL_new_atom = _lib.PL_new_atom\nPL_new_atom.argtypes = [c_char_p]\nPL_new_atom.restype = atom_t\nPL_new_atom = check_strings(0, None)(PL_new_atom)\nPL_new_functor = _lib.PL_new_functor",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_exception.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_exception.argtypes = [qid_t]\nPL_exception.restype = term_t\nPL_register_foreign = _lib.PL_register_foreign\nPL_register_foreign = check_strings(0, None)(PL_register_foreign)\nPL_new_atom = _lib.PL_new_atom\nPL_new_atom.argtypes = [c_char_p]\nPL_new_atom.restype = atom_t\nPL_new_atom = check_strings(0, None)(PL_new_atom)\nPL_new_functor = _lib.PL_new_functor\nPL_new_functor.argtypes = [atom_t, c_int]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_exception.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_exception.restype = term_t\nPL_register_foreign = _lib.PL_register_foreign\nPL_register_foreign = check_strings(0, None)(PL_register_foreign)\nPL_new_atom = _lib.PL_new_atom\nPL_new_atom.argtypes = [c_char_p]\nPL_new_atom.restype = atom_t\nPL_new_atom = check_strings(0, None)(PL_new_atom)\nPL_new_functor = _lib.PL_new_functor\nPL_new_functor.argtypes = [atom_t, c_int]\nPL_new_functor.restype = functor_t",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_register_foreign",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_register_foreign = _lib.PL_register_foreign\nPL_register_foreign = check_strings(0, None)(PL_register_foreign)\nPL_new_atom = _lib.PL_new_atom\nPL_new_atom.argtypes = [c_char_p]\nPL_new_atom.restype = atom_t\nPL_new_atom = check_strings(0, None)(PL_new_atom)\nPL_new_functor = _lib.PL_new_functor\nPL_new_functor.argtypes = [atom_t, c_int]\nPL_new_functor.restype = functor_t\nPL_compare = _lib.PL_compare",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_register_foreign",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_register_foreign = check_strings(0, None)(PL_register_foreign)\nPL_new_atom = _lib.PL_new_atom\nPL_new_atom.argtypes = [c_char_p]\nPL_new_atom.restype = atom_t\nPL_new_atom = check_strings(0, None)(PL_new_atom)\nPL_new_functor = _lib.PL_new_functor\nPL_new_functor.argtypes = [atom_t, c_int]\nPL_new_functor.restype = functor_t\nPL_compare = _lib.PL_compare\nPL_compare.argtypes = [term_t, term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_atom",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_new_atom = _lib.PL_new_atom\nPL_new_atom.argtypes = [c_char_p]\nPL_new_atom.restype = atom_t\nPL_new_atom = check_strings(0, None)(PL_new_atom)\nPL_new_functor = _lib.PL_new_functor\nPL_new_functor.argtypes = [atom_t, c_int]\nPL_new_functor.restype = functor_t\nPL_compare = _lib.PL_compare\nPL_compare.argtypes = [term_t, term_t]\nPL_compare.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_atom.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_new_atom.argtypes = [c_char_p]\nPL_new_atom.restype = atom_t\nPL_new_atom = check_strings(0, None)(PL_new_atom)\nPL_new_functor = _lib.PL_new_functor\nPL_new_functor.argtypes = [atom_t, c_int]\nPL_new_functor.restype = functor_t\nPL_compare = _lib.PL_compare\nPL_compare.argtypes = [term_t, term_t]\nPL_compare.restype = c_int\nPL_same_compound = _lib.PL_same_compound",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_atom.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_new_atom.restype = atom_t\nPL_new_atom = check_strings(0, None)(PL_new_atom)\nPL_new_functor = _lib.PL_new_functor\nPL_new_functor.argtypes = [atom_t, c_int]\nPL_new_functor.restype = functor_t\nPL_compare = _lib.PL_compare\nPL_compare.argtypes = [term_t, term_t]\nPL_compare.restype = c_int\nPL_same_compound = _lib.PL_same_compound\nPL_same_compound.argtypes = [term_t, term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_atom",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_new_atom = check_strings(0, None)(PL_new_atom)\nPL_new_functor = _lib.PL_new_functor\nPL_new_functor.argtypes = [atom_t, c_int]\nPL_new_functor.restype = functor_t\nPL_compare = _lib.PL_compare\nPL_compare.argtypes = [term_t, term_t]\nPL_compare.restype = c_int\nPL_same_compound = _lib.PL_same_compound\nPL_same_compound.argtypes = [term_t, term_t]\nPL_same_compound.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_functor",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_new_functor = _lib.PL_new_functor\nPL_new_functor.argtypes = [atom_t, c_int]\nPL_new_functor.restype = functor_t\nPL_compare = _lib.PL_compare\nPL_compare.argtypes = [term_t, term_t]\nPL_compare.restype = c_int\nPL_same_compound = _lib.PL_same_compound\nPL_same_compound.argtypes = [term_t, term_t]\nPL_same_compound.restype = c_int\nPL_record = _lib.PL_record",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_functor.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_new_functor.argtypes = [atom_t, c_int]\nPL_new_functor.restype = functor_t\nPL_compare = _lib.PL_compare\nPL_compare.argtypes = [term_t, term_t]\nPL_compare.restype = c_int\nPL_same_compound = _lib.PL_same_compound\nPL_same_compound.argtypes = [term_t, term_t]\nPL_same_compound.restype = c_int\nPL_record = _lib.PL_record\nPL_record.argtypes = [term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_functor.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_new_functor.restype = functor_t\nPL_compare = _lib.PL_compare\nPL_compare.argtypes = [term_t, term_t]\nPL_compare.restype = c_int\nPL_same_compound = _lib.PL_same_compound\nPL_same_compound.argtypes = [term_t, term_t]\nPL_same_compound.restype = c_int\nPL_record = _lib.PL_record\nPL_record.argtypes = [term_t]\nPL_record.restype = record_t",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_compare",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_compare = _lib.PL_compare\nPL_compare.argtypes = [term_t, term_t]\nPL_compare.restype = c_int\nPL_same_compound = _lib.PL_same_compound\nPL_same_compound.argtypes = [term_t, term_t]\nPL_same_compound.restype = c_int\nPL_record = _lib.PL_record\nPL_record.argtypes = [term_t]\nPL_record.restype = record_t\nPL_recorded = _lib.PL_recorded",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_compare.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_compare.argtypes = [term_t, term_t]\nPL_compare.restype = c_int\nPL_same_compound = _lib.PL_same_compound\nPL_same_compound.argtypes = [term_t, term_t]\nPL_same_compound.restype = c_int\nPL_record = _lib.PL_record\nPL_record.argtypes = [term_t]\nPL_record.restype = record_t\nPL_recorded = _lib.PL_recorded\nPL_recorded.argtypes = [record_t, term_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_compare.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_compare.restype = c_int\nPL_same_compound = _lib.PL_same_compound\nPL_same_compound.argtypes = [term_t, term_t]\nPL_same_compound.restype = c_int\nPL_record = _lib.PL_record\nPL_record.argtypes = [term_t]\nPL_record.restype = record_t\nPL_recorded = _lib.PL_recorded\nPL_recorded.argtypes = [record_t, term_t]\nPL_recorded.restype = None",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_same_compound",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_same_compound = _lib.PL_same_compound\nPL_same_compound.argtypes = [term_t, term_t]\nPL_same_compound.restype = c_int\nPL_record = _lib.PL_record\nPL_record.argtypes = [term_t]\nPL_record.restype = record_t\nPL_recorded = _lib.PL_recorded\nPL_recorded.argtypes = [record_t, term_t]\nPL_recorded.restype = None\nPL_erase = _lib.PL_erase",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_same_compound.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_same_compound.argtypes = [term_t, term_t]\nPL_same_compound.restype = c_int\nPL_record = _lib.PL_record\nPL_record.argtypes = [term_t]\nPL_record.restype = record_t\nPL_recorded = _lib.PL_recorded\nPL_recorded.argtypes = [record_t, term_t]\nPL_recorded.restype = None\nPL_erase = _lib.PL_erase\nPL_erase.argtypes = [record_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_same_compound.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_same_compound.restype = c_int\nPL_record = _lib.PL_record\nPL_record.argtypes = [term_t]\nPL_record.restype = record_t\nPL_recorded = _lib.PL_recorded\nPL_recorded.argtypes = [record_t, term_t]\nPL_recorded.restype = None\nPL_erase = _lib.PL_erase\nPL_erase.argtypes = [record_t]\nPL_erase.restype = None",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_record",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_record = _lib.PL_record\nPL_record.argtypes = [term_t]\nPL_record.restype = record_t\nPL_recorded = _lib.PL_recorded\nPL_recorded.argtypes = [record_t, term_t]\nPL_recorded.restype = None\nPL_erase = _lib.PL_erase\nPL_erase.argtypes = [record_t]\nPL_erase.restype = None\nPL_new_module = _lib.PL_new_module",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_record.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_record.argtypes = [term_t]\nPL_record.restype = record_t\nPL_recorded = _lib.PL_recorded\nPL_recorded.argtypes = [record_t, term_t]\nPL_recorded.restype = None\nPL_erase = _lib.PL_erase\nPL_erase.argtypes = [record_t]\nPL_erase.restype = None\nPL_new_module = _lib.PL_new_module\nPL_new_module.argtypes = [atom_t]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_record.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_record.restype = record_t\nPL_recorded = _lib.PL_recorded\nPL_recorded.argtypes = [record_t, term_t]\nPL_recorded.restype = None\nPL_erase = _lib.PL_erase\nPL_erase.argtypes = [record_t]\nPL_erase.restype = None\nPL_new_module = _lib.PL_new_module\nPL_new_module.argtypes = [atom_t]\nPL_new_module.restype = module_t",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_recorded",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_recorded = _lib.PL_recorded\nPL_recorded.argtypes = [record_t, term_t]\nPL_recorded.restype = None\nPL_erase = _lib.PL_erase\nPL_erase.argtypes = [record_t]\nPL_erase.restype = None\nPL_new_module = _lib.PL_new_module\nPL_new_module.argtypes = [atom_t]\nPL_new_module.restype = module_t\nPL_is_initialised = _lib.PL_is_initialised",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_recorded.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_recorded.argtypes = [record_t, term_t]\nPL_recorded.restype = None\nPL_erase = _lib.PL_erase\nPL_erase.argtypes = [record_t]\nPL_erase.restype = None\nPL_new_module = _lib.PL_new_module\nPL_new_module.argtypes = [atom_t]\nPL_new_module.restype = module_t\nPL_is_initialised = _lib.PL_is_initialised\nintptr_t = c_long",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_recorded.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_recorded.restype = None\nPL_erase = _lib.PL_erase\nPL_erase.argtypes = [record_t]\nPL_erase.restype = None\nPL_new_module = _lib.PL_new_module\nPL_new_module.argtypes = [atom_t]\nPL_new_module.restype = module_t\nPL_is_initialised = _lib.PL_is_initialised\nintptr_t = c_long\nssize_t = intptr_t",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_erase",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_erase = _lib.PL_erase\nPL_erase.argtypes = [record_t]\nPL_erase.restype = None\nPL_new_module = _lib.PL_new_module\nPL_new_module.argtypes = [atom_t]\nPL_new_module.restype = module_t\nPL_is_initialised = _lib.PL_is_initialised\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_erase.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_erase.argtypes = [record_t]\nPL_erase.restype = None\nPL_new_module = _lib.PL_new_module\nPL_new_module.argtypes = [atom_t]\nPL_new_module.restype = module_t\nPL_is_initialised = _lib.PL_is_initialised\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nPL_thread_self = _lib.PL_thread_self",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_erase.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_erase.restype = None\nPL_new_module = _lib.PL_new_module\nPL_new_module.argtypes = [atom_t]\nPL_new_module.restype = module_t\nPL_is_initialised = _lib.PL_is_initialised\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nPL_thread_self = _lib.PL_thread_self\nPL_thread_self.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_module",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_new_module = _lib.PL_new_module\nPL_new_module.argtypes = [atom_t]\nPL_new_module.restype = module_t\nPL_is_initialised = _lib.PL_is_initialised\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nPL_thread_self = _lib.PL_thread_self\nPL_thread_self.restype = c_int\nPL_thread_attach_engine = _lib.PL_thread_attach_engine",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_module.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_new_module.argtypes = [atom_t]\nPL_new_module.restype = module_t\nPL_is_initialised = _lib.PL_is_initialised\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nPL_thread_self = _lib.PL_thread_self\nPL_thread_self.restype = c_int\nPL_thread_attach_engine = _lib.PL_thread_attach_engine\nPL_thread_attach_engine.argtypes = [c_void_p]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_module.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_new_module.restype = module_t\nPL_is_initialised = _lib.PL_is_initialised\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nPL_thread_self = _lib.PL_thread_self\nPL_thread_self.restype = c_int\nPL_thread_attach_engine = _lib.PL_thread_attach_engine\nPL_thread_attach_engine.argtypes = [c_void_p]\nPL_thread_attach_engine.restype = c_int",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_initialised",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_is_initialised = _lib.PL_is_initialised\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nPL_thread_self = _lib.PL_thread_self\nPL_thread_self.restype = c_int\nPL_thread_attach_engine = _lib.PL_thread_attach_engine\nPL_thread_attach_engine.argtypes = [c_void_p]\nPL_thread_attach_engine.restype = c_int\nclass _mbstate_t_value(Union):",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "intptr_t",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "intptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nPL_thread_self = _lib.PL_thread_self\nPL_thread_self.restype = c_int\nPL_thread_attach_engine = _lib.PL_thread_attach_engine\nPL_thread_attach_engine.argtypes = [c_void_p]\nPL_thread_attach_engine.restype = c_int\nclass _mbstate_t_value(Union):\n    _fields_ = [(\"__wch\", wint_t),",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "ssize_t",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "ssize_t = intptr_t\nwint_t = c_uint\nPL_thread_self = _lib.PL_thread_self\nPL_thread_self.restype = c_int\nPL_thread_attach_engine = _lib.PL_thread_attach_engine\nPL_thread_attach_engine.argtypes = [c_void_p]\nPL_thread_attach_engine.restype = c_int\nclass _mbstate_t_value(Union):\n    _fields_ = [(\"__wch\", wint_t),\n                (\"__wchb\", c_char * 4)]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "wint_t",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "wint_t = c_uint\nPL_thread_self = _lib.PL_thread_self\nPL_thread_self.restype = c_int\nPL_thread_attach_engine = _lib.PL_thread_attach_engine\nPL_thread_attach_engine.argtypes = [c_void_p]\nPL_thread_attach_engine.restype = c_int\nclass _mbstate_t_value(Union):\n    _fields_ = [(\"__wch\", wint_t),\n                (\"__wchb\", c_char * 4)]\nclass mbstate_t(Structure):",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_thread_self",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_thread_self = _lib.PL_thread_self\nPL_thread_self.restype = c_int\nPL_thread_attach_engine = _lib.PL_thread_attach_engine\nPL_thread_attach_engine.argtypes = [c_void_p]\nPL_thread_attach_engine.restype = c_int\nclass _mbstate_t_value(Union):\n    _fields_ = [(\"__wch\", wint_t),\n                (\"__wchb\", c_char * 4)]\nclass mbstate_t(Structure):\n    _fields_ = [(\"__count\", c_int),",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_thread_self.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_thread_self.restype = c_int\nPL_thread_attach_engine = _lib.PL_thread_attach_engine\nPL_thread_attach_engine.argtypes = [c_void_p]\nPL_thread_attach_engine.restype = c_int\nclass _mbstate_t_value(Union):\n    _fields_ = [(\"__wch\", wint_t),\n                (\"__wchb\", c_char * 4)]\nclass mbstate_t(Structure):\n    _fields_ = [(\"__count\", c_int),\n                (\"__value\", _mbstate_t_value)]",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_thread_attach_engine",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_thread_attach_engine = _lib.PL_thread_attach_engine\nPL_thread_attach_engine.argtypes = [c_void_p]\nPL_thread_attach_engine.restype = c_int\nclass _mbstate_t_value(Union):\n    _fields_ = [(\"__wch\", wint_t),\n                (\"__wchb\", c_char * 4)]\nclass mbstate_t(Structure):\n    _fields_ = [(\"__count\", c_int),\n                (\"__value\", _mbstate_t_value)]\n# stream related funcs",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_thread_attach_engine.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_thread_attach_engine.argtypes = [c_void_p]\nPL_thread_attach_engine.restype = c_int\nclass _mbstate_t_value(Union):\n    _fields_ = [(\"__wch\", wint_t),\n                (\"__wchb\", c_char * 4)]\nclass mbstate_t(Structure):\n    _fields_ = [(\"__count\", c_int),\n                (\"__value\", _mbstate_t_value)]\n# stream related funcs\nSread_function = CFUNCTYPE(ssize_t, c_void_p, c_char_p, c_size_t)",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_thread_attach_engine.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_thread_attach_engine.restype = c_int\nclass _mbstate_t_value(Union):\n    _fields_ = [(\"__wch\", wint_t),\n                (\"__wchb\", c_char * 4)]\nclass mbstate_t(Structure):\n    _fields_ = [(\"__count\", c_int),\n                (\"__value\", _mbstate_t_value)]\n# stream related funcs\nSread_function = CFUNCTYPE(ssize_t, c_void_p, c_char_p, c_size_t)\nSwrite_function = CFUNCTYPE(ssize_t, c_void_p, c_char_p, c_size_t)",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "Sread_function",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "Sread_function = CFUNCTYPE(ssize_t, c_void_p, c_char_p, c_size_t)\nSwrite_function = CFUNCTYPE(ssize_t, c_void_p, c_char_p, c_size_t)\nSseek_function = CFUNCTYPE(c_long, c_void_p, c_long, c_int)\nSseek64_function = CFUNCTYPE(c_int64, c_void_p, c_int64, c_int)\nSclose_function = CFUNCTYPE(c_int, c_void_p)\nScontrol_function = CFUNCTYPE(c_int, c_void_p, c_int, c_void_p)\n# IOLOCK\nIOLOCK = c_void_p\n# IOFUNCTIONS\nclass IOFUNCTIONS(Structure):",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "Swrite_function",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "Swrite_function = CFUNCTYPE(ssize_t, c_void_p, c_char_p, c_size_t)\nSseek_function = CFUNCTYPE(c_long, c_void_p, c_long, c_int)\nSseek64_function = CFUNCTYPE(c_int64, c_void_p, c_int64, c_int)\nSclose_function = CFUNCTYPE(c_int, c_void_p)\nScontrol_function = CFUNCTYPE(c_int, c_void_p, c_int, c_void_p)\n# IOLOCK\nIOLOCK = c_void_p\n# IOFUNCTIONS\nclass IOFUNCTIONS(Structure):\n    _fields_ = [(\"read\",Sread_function),",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "Sseek_function",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "Sseek_function = CFUNCTYPE(c_long, c_void_p, c_long, c_int)\nSseek64_function = CFUNCTYPE(c_int64, c_void_p, c_int64, c_int)\nSclose_function = CFUNCTYPE(c_int, c_void_p)\nScontrol_function = CFUNCTYPE(c_int, c_void_p, c_int, c_void_p)\n# IOLOCK\nIOLOCK = c_void_p\n# IOFUNCTIONS\nclass IOFUNCTIONS(Structure):\n    _fields_ = [(\"read\",Sread_function),\n                (\"write\",Swrite_function),",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "Sseek64_function",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "Sseek64_function = CFUNCTYPE(c_int64, c_void_p, c_int64, c_int)\nSclose_function = CFUNCTYPE(c_int, c_void_p)\nScontrol_function = CFUNCTYPE(c_int, c_void_p, c_int, c_void_p)\n# IOLOCK\nIOLOCK = c_void_p\n# IOFUNCTIONS\nclass IOFUNCTIONS(Structure):\n    _fields_ = [(\"read\",Sread_function),\n                (\"write\",Swrite_function),\n                (\"seek\",Sseek_function),",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "Sclose_function",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "Sclose_function = CFUNCTYPE(c_int, c_void_p)\nScontrol_function = CFUNCTYPE(c_int, c_void_p, c_int, c_void_p)\n# IOLOCK\nIOLOCK = c_void_p\n# IOFUNCTIONS\nclass IOFUNCTIONS(Structure):\n    _fields_ = [(\"read\",Sread_function),\n                (\"write\",Swrite_function),\n                (\"seek\",Sseek_function),\n                (\"close\",Sclose_function),",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "Scontrol_function",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "Scontrol_function = CFUNCTYPE(c_int, c_void_p, c_int, c_void_p)\n# IOLOCK\nIOLOCK = c_void_p\n# IOFUNCTIONS\nclass IOFUNCTIONS(Structure):\n    _fields_ = [(\"read\",Sread_function),\n                (\"write\",Swrite_function),\n                (\"seek\",Sseek_function),\n                (\"close\",Sclose_function),\n                (\"seek64\",Sseek64_function),",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "IOLOCK",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "IOLOCK = c_void_p\n# IOFUNCTIONS\nclass IOFUNCTIONS(Structure):\n    _fields_ = [(\"read\",Sread_function),\n                (\"write\",Swrite_function),\n                (\"seek\",Sseek_function),\n                (\"close\",Sclose_function),\n                (\"seek64\",Sseek64_function),\n                (\"reserved\",intptr_t*2)]\n# IOENC",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "ENC_UNKNOWN,ENC_OCTET,ENC_ASCII,ENC_ISO_LATIN_1,ENC_ANSI,ENC_UTF8,ENC_UNICODE_BE,ENC_UNICODE_LE,ENC_WCHAR",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "ENC_UNKNOWN,ENC_OCTET,ENC_ASCII,ENC_ISO_LATIN_1,ENC_ANSI,ENC_UTF8,ENC_UNICODE_BE,ENC_UNICODE_LE,ENC_WCHAR = tuple(range(9))\nIOENC = c_int\n# IOPOS\nclass IOPOS(Structure):\n    _fields_ = [(\"byteno\",c_int64),\n                (\"charno\",c_int64),\n                (\"lineno\",c_int),\n                (\"linepos\",c_int),\n                (\"reserved\", intptr_t*2)]\n# IOSTREAM",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "IOENC",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "IOENC = c_int\n# IOPOS\nclass IOPOS(Structure):\n    _fields_ = [(\"byteno\",c_int64),\n                (\"charno\",c_int64),\n                (\"lineno\",c_int),\n                (\"linepos\",c_int),\n                (\"reserved\", intptr_t*2)]\n# IOSTREAM\nclass IOSTREAM(Structure):",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "Sopen_string",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "Sopen_string = _lib.Sopen_string\nSopen_string.argtypes = [POINTER(IOSTREAM), c_char_p, c_size_t, c_char_p]\nSopen_string.restype = POINTER(IOSTREAM)\nSclose = _lib.Sclose\nSclose.argtypes = [POINTER(IOSTREAM)]\nPL_unify_stream = _lib.PL_unify_stream\nPL_unify_stream.argtypes = [term_t, POINTER(IOSTREAM)]\n#create an exit hook which captures the exit code for our cleanup function\nclass ExitHook(object):\n    def __init__(self):",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "Sopen_string.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "Sopen_string.argtypes = [POINTER(IOSTREAM), c_char_p, c_size_t, c_char_p]\nSopen_string.restype = POINTER(IOSTREAM)\nSclose = _lib.Sclose\nSclose.argtypes = [POINTER(IOSTREAM)]\nPL_unify_stream = _lib.PL_unify_stream\nPL_unify_stream.argtypes = [term_t, POINTER(IOSTREAM)]\n#create an exit hook which captures the exit code for our cleanup function\nclass ExitHook(object):\n    def __init__(self):\n        self.exit_code = None",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "Sopen_string.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "Sopen_string.restype = POINTER(IOSTREAM)\nSclose = _lib.Sclose\nSclose.argtypes = [POINTER(IOSTREAM)]\nPL_unify_stream = _lib.PL_unify_stream\nPL_unify_stream.argtypes = [term_t, POINTER(IOSTREAM)]\n#create an exit hook which captures the exit code for our cleanup function\nclass ExitHook(object):\n    def __init__(self):\n        self.exit_code = None\n        self.exception = None",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "Sclose",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "Sclose = _lib.Sclose\nSclose.argtypes = [POINTER(IOSTREAM)]\nPL_unify_stream = _lib.PL_unify_stream\nPL_unify_stream.argtypes = [term_t, POINTER(IOSTREAM)]\n#create an exit hook which captures the exit code for our cleanup function\nclass ExitHook(object):\n    def __init__(self):\n        self.exit_code = None\n        self.exception = None\n    def hook(self):",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "Sclose.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "Sclose.argtypes = [POINTER(IOSTREAM)]\nPL_unify_stream = _lib.PL_unify_stream\nPL_unify_stream.argtypes = [term_t, POINTER(IOSTREAM)]\n#create an exit hook which captures the exit code for our cleanup function\nclass ExitHook(object):\n    def __init__(self):\n        self.exit_code = None\n        self.exception = None\n    def hook(self):\n        self._orig_exit = sys.exit",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_stream",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_stream = _lib.PL_unify_stream\nPL_unify_stream.argtypes = [term_t, POINTER(IOSTREAM)]\n#create an exit hook which captures the exit code for our cleanup function\nclass ExitHook(object):\n    def __init__(self):\n        self.exit_code = None\n        self.exception = None\n    def hook(self):\n        self._orig_exit = sys.exit\n        sys.exit = self.exit",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_stream.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "PL_unify_stream.argtypes = [term_t, POINTER(IOSTREAM)]\n#create an exit hook which captures the exit code for our cleanup function\nclass ExitHook(object):\n    def __init__(self):\n        self.exit_code = None\n        self.exception = None\n    def hook(self):\n        self._orig_exit = sys.exit\n        sys.exit = self.exit\n    def exit(self, code=0):",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "_hook",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "_hook = ExitHook()\n_hook.hook()\n_isCleaned = False\n#create a property for Atom's delete method in order to avoid segmentation fault\ncleaned = property(_isCleaned)\n#register the cleanup function to be executed on system exit\n@atexit.register\ndef cleanupProlog():\n    # only do something if prolog has been initialised\n    if PL_is_initialised(None,None):",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "_isCleaned",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "_isCleaned = False\n#create a property for Atom's delete method in order to avoid segmentation fault\ncleaned = property(_isCleaned)\n#register the cleanup function to be executed on system exit\n@atexit.register\ndef cleanupProlog():\n    # only do something if prolog has been initialised\n    if PL_is_initialised(None,None):\n        # clean up the prolog system using the caught exit code\n        # if exit code is None, the program exits normally and we can use 0",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "cleaned",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.core",
        "description": "reqs.pyswip.build.lib.pyswip.core",
        "peekOfCode": "cleaned = property(_isCleaned)\n#register the cleanup function to be executed on system exit\n@atexit.register\ndef cleanupProlog():\n    # only do something if prolog has been initialised\n    if PL_is_initialised(None,None):\n        # clean up the prolog system using the caught exit code\n        # if exit code is None, the program exits normally and we can use 0\n        # instead.\n        # TODO Prolog documentation says cleanup with code 0 may be interrupted",
        "detail": "reqs.pyswip.build.lib.pyswip.core",
        "documentation": {}
    },
    {
        "label": "InvalidTypeError",
        "kind": 6,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "class InvalidTypeError(TypeError):\n    def __init__(self, *args):\n        type_ = args and args[0] or \"Unknown\"\n        msg = \"Term is expected to be of type: '%s'\" % type_\n        Exception.__init__(self, msg, *args)\nclass ArgumentTypeError(Exception):\n    \"\"\"\n    Thrown when an argument has the wrong type.\n    \"\"\"\n    def __init__(self, expected, got):",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "ArgumentTypeError",
        "kind": 6,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "class ArgumentTypeError(Exception):\n    \"\"\"\n    Thrown when an argument has the wrong type.\n    \"\"\"\n    def __init__(self, expected, got):\n        msg = \"Expected an argument of type '%s' but got '%s'\" % (expected, got)\n        Exception.__init__(self, msg)\nclass Atom(object):\n    __slots__ = \"handle\", \"chars\"\n    def __init__(self, handleOrChars, chars=None):",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "Atom",
        "kind": 6,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "class Atom(object):\n    __slots__ = \"handle\", \"chars\"\n    def __init__(self, handleOrChars, chars=None):\n        \"\"\"Create an atom.\n        ``handleOrChars``: handle or string of the atom.\n        \"\"\"\n        if isinstance(handleOrChars, str):\n            self.handle = PL_new_atom(handleOrChars)\n            self.chars = handleOrChars\n        else:",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "Term",
        "kind": 6,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "class Term(object):\n    __slots__ = \"handle\", \"chars\", \"__value\", \"a0\"\n    def __init__(self, handle=None, a0=None):\n        if handle:\n            #self.handle = PL_copy_term_ref(handle)\n            self.handle = handle\n        else:\n            self.handle = PL_new_term_ref()\n        self.chars = None\n        self.a0 = a0",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "Variable",
        "kind": 6,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "class Variable(object):\n    __slots__ = \"handle\", \"chars\"\n    def __init__(self, handle=None, name=None):\n        self.chars = None\n        if name:\n            self.chars = name\n        if handle:\n            self.handle = handle\n            s = create_string_buffer(b\"\\00\"*64)  # FIXME:\n            ptr = cast(s, c_char_p)",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "Functor",
        "kind": 6,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "class Functor(object):\n    __slots__ = \"handle\", \"name\", \"arity\", \"args\", \"__value\", \"a0\"\n    func = {}\n    def __init__(self, handleOrName, arity=1, args=None, a0=None):\n        \"\"\"Create a functor.\n        ``handleOrName``: functor handle, a string or an atom.\n        \"\"\"\n        self.args = args or []\n        self.arity = arity\n        self.a0 = a0",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "Query",
        "kind": 6,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "class Query(object):\n    qid = None\n    fid = None\n    def __init__(self, *terms, **kwargs):\n        for key in kwargs:\n            if key not in [\"flags\", \"module\"]:\n                raise Exception(\"Invalid kwarg: %s\" % key, key)\n        flags = kwargs.get(\"flags\", PL_Q_NODEBUG|PL_Q_CATCH_EXCEPTION)\n        module = kwargs.get(\"module\", None)\n        t = terms[0]",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "putTerm",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "def putTerm(term, value):\n    if isinstance(value, Term):\n        PL_put_term(term, value.handle)\n    elif isinstance(value, str):\n        PL_put_atom_chars(term, value)\n    elif isinstance(value, int):\n        PL_put_integer(term, value)\n    elif isinstance(value, Variable):\n        value.put(term)\n    elif isinstance(value, list):",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "putList",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "def putList(l, ls):\n    PL_put_nil(l)\n    for item in reversed(ls):\n        a = PL_new_term_ref()  #PL_new_term_refs(len(ls))\n        putTerm(a, item)\n        PL_cons_list(l, a, l)\ndef getAtomChars(t):\n    \"\"\"If t is an atom, return it as a string, otherwise raise InvalidTypeError.\n    \"\"\"\n    s = c_char_p()",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getAtomChars",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "def getAtomChars(t):\n    \"\"\"If t is an atom, return it as a string, otherwise raise InvalidTypeError.\n    \"\"\"\n    s = c_char_p()\n    if PL_get_chars(t, byref(s), CVT_ATOM|REP_UTF8):\n        return s.value\n    else:\n        raise InvalidTypeError(\"atom\")\ndef getAtom(t):\n    \"\"\"If t is an atom, return it , otherwise raise InvalidTypeError.",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getAtom",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "def getAtom(t):\n    \"\"\"If t is an atom, return it , otherwise raise InvalidTypeError.\n    \"\"\"\n    return Atom.fromTerm(t)\ndef getBool(t):\n    \"\"\"If t is of type bool, return it, otherwise raise InvalidTypeError.\n    \"\"\"\n    b = c_int()\n    if PL_get_long(t, byref(b)):\n        return bool(b.value)",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getBool",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "def getBool(t):\n    \"\"\"If t is of type bool, return it, otherwise raise InvalidTypeError.\n    \"\"\"\n    b = c_int()\n    if PL_get_long(t, byref(b)):\n        return bool(b.value)\n    else:\n        raise InvalidTypeError(\"bool\")\ndef getLong(t):\n    \"\"\"If t is of type long, return it, otherwise raise InvalidTypeError.",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getLong",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "def getLong(t):\n    \"\"\"If t is of type long, return it, otherwise raise InvalidTypeError.\n    \"\"\"\n    i = c_long()\n    if PL_get_long(t, byref(i)):\n        return i.value\n    else:\n        raise InvalidTypeError(\"long\")\ngetInteger = getLong  # just an alias for getLong\ndef getFloat(t):",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getFloat",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "def getFloat(t):\n    \"\"\"If t is of type float, return it, otherwise raise InvalidTypeError.\n    \"\"\"\n    d = c_double()\n    if PL_get_float(t, byref(d)):\n        return d.value\n    else:\n        raise InvalidTypeError(\"float\")\ndef getString(t):\n    \"\"\"If t is of type string, return it, otherwise raise InvalidTypeError.",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getString",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "def getString(t):\n    \"\"\"If t is of type string, return it, otherwise raise InvalidTypeError.\n    \"\"\"\n    s = c_char_p()\n    if PL_get_chars(t, byref(s), REP_UTF8|CVT_STRING):\n        return s.value\n    else:\n        raise InvalidTypeError(\"string\")\ndef getTerm(t):\n    if t is None:",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getTerm",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "def getTerm(t):\n    if t is None:\n        return None\n    with PL_STRINGS_MARK():\n        p = PL_term_type(t)\n        if p < PL_TERM:\n            res = _getterm_router[p](t)\n        elif PL_is_list(t):\n            res = getList(t)\n        elif p == PL_DICT:",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getDict",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "def getDict(term):\n    \"\"\"\n    Return term as a dictionary.\n    \"\"\"\n    if isinstance(term, Term):\n        term = term.handle\n    elif not isinstance(term, (c_void_p, int)):\n        raise ArgumentTypeError((str(Term), str(int)), str(type(term)))\n    f = functor_t()\n    if PL_get_functor(term, byref(f)):",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getList",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "def getList(x):\n    \"\"\"\n    Return t as a list.\n    \"\"\"\n    t = PL_copy_term_ref(x)\n    head = PL_new_term_ref()\n    result = []\n    while PL_get_list(t, head, t):\n        result.append(getTerm(head))\n        head = PL_new_term_ref()",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getFunctor",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "def getFunctor(t):\n    \"\"\"Return t as a functor\n    \"\"\"\n    return Functor.fromTerm(t)\ndef getVariable(t):\n    return Variable(t)\n_getterm_router = {\n                   PL_VARIABLE: getVariable,\n                   PL_ATOM: getAtom,\n                   PL_STRING: getString,",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getVariable",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "def getVariable(t):\n    return Variable(t)\n_getterm_router = {\n                   PL_VARIABLE: getVariable,\n                   PL_ATOM: getAtom,\n                   PL_STRING: getString,\n                   PL_INTEGER: getInteger,\n                   PL_FLOAT: getFloat,\n                   PL_TERM: getTerm,\n                  }",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "registerForeign",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "def registerForeign(func, name=None, arity=None, flags=0):\n    \"\"\"Register a Python predicate\n    ``func``: Function to be registered. The function should return a value in\n    ``foreign_t``, ``True`` or ``False``.\n    ``name`` : Name of the function. If this value is not used, ``func.func_name``\n    should exist.\n    ``arity``: Arity (number of arguments) of the function. If this value is not\n    used, ``func.arity`` should exist.\n    \"\"\"\n    global cwraps",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "newTermRefs",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "def newTermRefs(count):\n    a = PL_new_term_refs(count)\n    return list(range(a, a + count))\ndef call(*terms, **kwargs):\n    \"\"\"Call term in module.\n    ``term``: a Term or term handle\n    \"\"\"\n    for kwarg in kwargs:\n        if kwarg not in [\"module\"]:\n            raise KeyError",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "call",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "def call(*terms, **kwargs):\n    \"\"\"Call term in module.\n    ``term``: a Term or term handle\n    \"\"\"\n    for kwarg in kwargs:\n        if kwarg not in [\"module\"]:\n            raise KeyError\n    module = kwargs.get(\"module\", None)\n    t = terms[0]\n    for tx in terms[1:]:",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "newModule",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "def newModule(name):\n    \"\"\"Create a new module.\n    ``name``: An Atom or a string\n    \"\"\"\n    if isinstance(name, str):\n        name = Atom(name)\n    return PL_new_module(name.handle)\nclass Query(object):\n    qid = None\n    fid = None",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "_unify",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "_unify = Functor(\"=\", 2)\nFunctor.func[_unify.handle] = _unifier\n_not = Functor(\"not\", 1)\n_comma = Functor(\",\", 2)\ndef putTerm(term, value):\n    if isinstance(value, Term):\n        PL_put_term(term, value.handle)\n    elif isinstance(value, str):\n        PL_put_atom_chars(term, value)\n    elif isinstance(value, int):",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "Functor.func[_unify.handle]",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "Functor.func[_unify.handle] = _unifier\n_not = Functor(\"not\", 1)\n_comma = Functor(\",\", 2)\ndef putTerm(term, value):\n    if isinstance(value, Term):\n        PL_put_term(term, value.handle)\n    elif isinstance(value, str):\n        PL_put_atom_chars(term, value)\n    elif isinstance(value, int):\n        PL_put_integer(term, value)",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "_not",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "_not = Functor(\"not\", 1)\n_comma = Functor(\",\", 2)\ndef putTerm(term, value):\n    if isinstance(value, Term):\n        PL_put_term(term, value.handle)\n    elif isinstance(value, str):\n        PL_put_atom_chars(term, value)\n    elif isinstance(value, int):\n        PL_put_integer(term, value)\n    elif isinstance(value, Variable):",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "_comma",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "_comma = Functor(\",\", 2)\ndef putTerm(term, value):\n    if isinstance(value, Term):\n        PL_put_term(term, value.handle)\n    elif isinstance(value, str):\n        PL_put_atom_chars(term, value)\n    elif isinstance(value, int):\n        PL_put_integer(term, value)\n    elif isinstance(value, Variable):\n        value.put(term)",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getInteger",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "getInteger = getLong  # just an alias for getLong\ndef getFloat(t):\n    \"\"\"If t is of type float, return it, otherwise raise InvalidTypeError.\n    \"\"\"\n    d = c_double()\n    if PL_get_float(t, byref(d)):\n        return d.value\n    else:\n        raise InvalidTypeError(\"float\")\ndef getString(t):",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "_getterm_router",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "_getterm_router = {\n                   PL_VARIABLE: getVariable,\n                   PL_ATOM: getAtom,\n                   PL_STRING: getString,\n                   PL_INTEGER: getInteger,\n                   PL_FLOAT: getFloat,\n                   PL_TERM: getTerm,\n                  }\narities = {}\ndef _callbackWrapper(arity=1, nondeterministic=False):",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "arities",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "arities = {}\ndef _callbackWrapper(arity=1, nondeterministic=False):\n    global arities\n    res = arities.get((arity, nondeterministic))\n    if res is None:\n        if nondeterministic:\n            res = CFUNCTYPE(*([foreign_t] + [term_t] * arity + [control_t]))\n        else:\n            res = CFUNCTYPE(*([foreign_t] + [term_t] * arity))\n        arities[(arity, nondeterministic)] = res",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "funwraps",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "funwraps = {}\ndef _foreignWrapper(fun, nondeterministic=False):\n    global funwraps\n    res = funwraps.get(fun)\n    if res is None:\n        def wrapper(*args):\n            if nondeterministic:\n                args = [getTerm(arg) for arg in args[:-1]] + [args[-1]]\n            else:\n                args = [getTerm(arg) for arg in args]",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "cwraps",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "cwraps = []\ndef registerForeign(func, name=None, arity=None, flags=0):\n    \"\"\"Register a Python predicate\n    ``func``: Function to be registered. The function should return a value in\n    ``foreign_t``, ``True`` or ``False``.\n    ``name`` : Name of the function. If this value is not used, ``func.func_name``\n    should exist.\n    ``arity``: Arity (number of arguments) of the function. If this value is not\n    used, ``func.arity`` should exist.\n    \"\"\"",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "newTermRef",
        "kind": 5,
        "importPath": "reqs.pyswip.build.lib.pyswip.easy",
        "description": "reqs.pyswip.build.lib.pyswip.easy",
        "peekOfCode": "newTermRef = PL_new_term_ref\ndef newTermRefs(count):\n    a = PL_new_term_refs(count)\n    return list(range(a, a + count))\ndef call(*terms, **kwargs):\n    \"\"\"Call term in module.\n    ``term``: a Term or term handle\n    \"\"\"\n    for kwarg in kwargs:\n        if kwarg not in [\"module\"]:",
        "detail": "reqs.pyswip.build.lib.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "PrologError",
        "kind": 6,
        "importPath": "reqs.pyswip.build.lib.pyswip.prolog",
        "description": "reqs.pyswip.build.lib.pyswip.prolog",
        "peekOfCode": "class PrologError(Exception):\n    pass\nclass NestedQueryError(PrologError):\n    \"\"\"\n    SWI-Prolog does not accept nested queries, that is, opening a query while\n    the previous one was not closed.\n    As this error may be somewhat difficult to debug in foreign code, it is\n    automatically treated inside pySWIP\n    \"\"\"\n    pass",
        "detail": "reqs.pyswip.build.lib.pyswip.prolog",
        "documentation": {}
    },
    {
        "label": "NestedQueryError",
        "kind": 6,
        "importPath": "reqs.pyswip.build.lib.pyswip.prolog",
        "description": "reqs.pyswip.build.lib.pyswip.prolog",
        "peekOfCode": "class NestedQueryError(PrologError):\n    \"\"\"\n    SWI-Prolog does not accept nested queries, that is, opening a query while\n    the previous one was not closed.\n    As this error may be somewhat difficult to debug in foreign code, it is\n    automatically treated inside pySWIP\n    \"\"\"\n    pass\ndef _initialize():\n    args = []",
        "detail": "reqs.pyswip.build.lib.pyswip.prolog",
        "documentation": {}
    },
    {
        "label": "Prolog",
        "kind": 6,
        "importPath": "reqs.pyswip.build.lib.pyswip.prolog",
        "description": "reqs.pyswip.build.lib.pyswip.prolog",
        "peekOfCode": "class Prolog:\n    \"\"\"Easily query SWI-Prolog.\n    This is a singleton class\n    \"\"\"\n    # We keep track of open queries to avoid nested queries.\n    _queryIsOpen = False\n    class _QueryWrapper(object):\n        def __init__(self):\n            if Prolog._queryIsOpen:\n                raise NestedQueryError(\"The last query was not closed\")",
        "detail": "reqs.pyswip.build.lib.pyswip.prolog",
        "documentation": {}
    },
    {
        "label": "normalize_values",
        "kind": 2,
        "importPath": "reqs.pyswip.build.lib.pyswip.prolog",
        "description": "reqs.pyswip.build.lib.pyswip.prolog",
        "peekOfCode": "def normalize_values(values):\n    from pyswip.easy import Atom, Functor\n    if isinstance(values, Atom):\n        return values.value\n    if isinstance(values, Functor):\n        normalized = str(values.name.value)\n        if values.arity:\n            normalized_args = ([str(normalize_values(arg)) for arg in values.args])\n            normalized = normalized + '(' + ', '.join(normalized_args) + ')'\n        return normalized",
        "detail": "reqs.pyswip.build.lib.pyswip.prolog",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "reqs.pyswip.examples.coins.coins",
        "description": "reqs.pyswip.examples.coins.coins",
        "peekOfCode": "def main():\n    prolog = Prolog()\n    prolog.consult(\"coins.pl\")\n    count = int(input(\"How many coins (default: 100)? \") or 100)\n    total = int(input(\"What should be the total (default: 500)? \") or 500)\n    for i, soln in enumerate(prolog.query(\"coins(S, %d, %d).\" % (count,total))):\n        S = zip(soln[\"S\"], [1, 5, 10, 50, 100])\n        print(i, end=\" \")\n        for c, v in S:\n            print(\"%dx%d\" % (c,v), end=\" \")",
        "detail": "reqs.pyswip.examples.coins.coins",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "reqs.pyswip.examples.coins.coins_new",
        "description": "reqs.pyswip.examples.coins.coins_new",
        "peekOfCode": "def main():\n    prolog = Prolog()\n    prolog.consult(\"coins.pl\")\n    count = int(input(\"How many coins (default: 100)? \") or 100)\n    total = int(input(\"What should be the total (default: 500)? \") or 500)\n    coins = Functor(\"coins\", 3)\n    S = Variable()\n    q = Query(coins(S, count, total))\n    i = 0\n    while q.nextSolution():",
        "detail": "reqs.pyswip.examples.coins.coins_new",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "reqs.pyswip.examples.draughts.puzzle1",
        "description": "reqs.pyswip.examples.draughts.puzzle1",
        "peekOfCode": "def main():\n    prolog = Prolog()\n    prolog.consult(\"puzzle1.pl\")\n    for soln in prolog.query(\"solve(B).\"):\n        B = soln[\"B\"]\n        # [NW,N,NE,W,E,SW,S,SE]\n        print(\"%d %d %d\" % tuple(B[:3]))\n        print(\"%d   %d\"   % tuple(B[3:5]))\n        print(\"%d %d %d\" % tuple(B[5:]))        \n        cont = input(\"Press 'n' to finish: \")",
        "detail": "reqs.pyswip.examples.draughts.puzzle1",
        "documentation": {}
    },
    {
        "label": "Notifier",
        "kind": 6,
        "importPath": "reqs.pyswip.examples.hanoi.hanoi",
        "description": "reqs.pyswip.examples.hanoi.hanoi",
        "peekOfCode": "class Notifier:\n    def __init__(self, fun):\n        self.fun = fun\n    def notify(self, t):\n        return not self.fun(t)\n    notify.arity = 1\nclass Tower:\n    def __init__(self, N=3, interactive=False):\n        \"\"\"N is the number of disks\n        \"\"\"",
        "detail": "reqs.pyswip.examples.hanoi.hanoi",
        "documentation": {}
    },
    {
        "label": "Tower",
        "kind": 6,
        "importPath": "reqs.pyswip.examples.hanoi.hanoi",
        "description": "reqs.pyswip.examples.hanoi.hanoi",
        "peekOfCode": "class Tower:\n    def __init__(self, N=3, interactive=False):\n        \"\"\"N is the number of disks\n        \"\"\"\n        self.N = N\n        self.disks = dict(left=deque(range(N, 0, -1)), center=deque(), right=deque())\n        self.started = False\n        self.interactive = interactive\n        self.step = 0\n    def move(self, r):",
        "detail": "reqs.pyswip.examples.hanoi.hanoi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "reqs.pyswip.examples.hanoi.hanoi",
        "description": "reqs.pyswip.examples.hanoi.hanoi",
        "peekOfCode": "def main():\n    N = 3\n    INTERACTIVITY = True\n    prolog = Prolog()\n    tower = Tower(N, INTERACTIVITY)\n    notifier = Notifier(tower.move)\n    registerForeign(notifier.notify)\n    prolog.consult(\"hanoi.pl\")\n    list(prolog.query(\"hanoi(%d)\" % N))\nif __name__ == \"__main__\":",
        "detail": "reqs.pyswip.examples.hanoi.hanoi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "reqs.pyswip.examples.hanoi.hanoi_simple",
        "description": "reqs.pyswip.examples.hanoi.hanoi_simple",
        "peekOfCode": "def main():\n    def notify(t):\n        print(\"move disk from %s pole to %s pole.\" % tuple(t))\n    notify.arity = 1\n    prolog = Prolog()\n    registerForeign(notify)\n    prolog.consult(\"hanoi.pl\")\n    list(prolog.query(\"hanoi(%d)\" % N))\nif __name__ == \"__main__\":\n    main()",
        "detail": "reqs.pyswip.examples.hanoi.hanoi_simple",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "reqs.pyswip.examples.hanoi.hanoi_simple",
        "description": "reqs.pyswip.examples.hanoi.hanoi_simple",
        "peekOfCode": "N = 3  # Number of disks\ndef main():\n    def notify(t):\n        print(\"move disk from %s pole to %s pole.\" % tuple(t))\n    notify.arity = 1\n    prolog = Prolog()\n    registerForeign(notify)\n    prolog.consult(\"hanoi.pl\")\n    list(prolog.query(\"hanoi(%d)\" % N))\nif __name__ == \"__main__\":",
        "detail": "reqs.pyswip.examples.hanoi.hanoi_simple",
        "documentation": {}
    },
    {
        "label": "letters",
        "kind": 5,
        "importPath": "reqs.pyswip.examples.sendmoremoney.money",
        "description": "reqs.pyswip.examples.sendmoremoney.money",
        "peekOfCode": "letters = \"S E N D M O R Y\".split()\nprolog = Prolog()\nprolog.consult(\"money.pl\")\nfor result in prolog.query(\"sendmore(X)\"):\n    r = result[\"X\"]\n    for i, letter in enumerate(letters):\n        print(letter, \"=\", r[i])\nprint(\"That's all...\")",
        "detail": "reqs.pyswip.examples.sendmoremoney.money",
        "documentation": {}
    },
    {
        "label": "prolog",
        "kind": 5,
        "importPath": "reqs.pyswip.examples.sendmoremoney.money",
        "description": "reqs.pyswip.examples.sendmoremoney.money",
        "peekOfCode": "prolog = Prolog()\nprolog.consult(\"money.pl\")\nfor result in prolog.query(\"sendmore(X)\"):\n    r = result[\"X\"]\n    for i, letter in enumerate(letters):\n        print(letter, \"=\", r[i])\nprint(\"That's all...\")",
        "detail": "reqs.pyswip.examples.sendmoremoney.money",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "reqs.pyswip.examples.sendmoremoney.money_new",
        "description": "reqs.pyswip.examples.sendmoremoney.money_new",
        "peekOfCode": "def main():\n    letters = \"S E N D M O R Y\".split()\n    prolog = Prolog()\n    sendmore = Functor(\"sendmore\")\n    prolog.consult(\"money.pl\")\n    X = Variable()\n    call(sendmore(X))\n    r = X.value\n    for i, letter in enumerate(letters):\n        print(letter, \"=\", r[i])",
        "detail": "reqs.pyswip.examples.sendmoremoney.money_new",
        "documentation": {}
    },
    {
        "label": "pretty_print",
        "kind": 2,
        "importPath": "reqs.pyswip.examples.sudoku.sudoku",
        "description": "reqs.pyswip.examples.sudoku.sudoku",
        "peekOfCode": "def pretty_print(table):\n    print(\"\".join([\"/---\", \"----\"*8, \"\\\\\"]))\n    for row in table:\n        print(\"\".join([\"|\", \"|\".join(\" %s \" % (i or \" \") for i in row), \"|\"]))\n    print(\"\".join([\"\\\\---\", \"----\"*8, \"/\"]))\ndef solve(problem):\n    prolog.consult(\"sudoku.pl\")\n    p = str(problem).replace(\"0\", \"_\")\n    result = list(prolog.query(\"L=%s,sudoku(L)\" % p, maxresult=1))\n    if result:",
        "detail": "reqs.pyswip.examples.sudoku.sudoku",
        "documentation": {}
    },
    {
        "label": "solve",
        "kind": 2,
        "importPath": "reqs.pyswip.examples.sudoku.sudoku",
        "description": "reqs.pyswip.examples.sudoku.sudoku",
        "peekOfCode": "def solve(problem):\n    prolog.consult(\"sudoku.pl\")\n    p = str(problem).replace(\"0\", \"_\")\n    result = list(prolog.query(\"L=%s,sudoku(L)\" % p, maxresult=1))\n    if result:\n        result = result[0]\n        return result[\"L\"]\n    else:\n        return False\ndef main():",
        "detail": "reqs.pyswip.examples.sudoku.sudoku",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "reqs.pyswip.examples.sudoku.sudoku",
        "description": "reqs.pyswip.examples.sudoku.sudoku",
        "peekOfCode": "def main():\n    puzzle = puzzle1\n    print(\"-- PUZZLE --\")\n    pretty_print(puzzle)\n    print()\n    print(\" -- SOLUTION --\")\n    solution = solve(puzzle)\n    if solution:\n        pretty_print(solution)\n    else:",
        "detail": "reqs.pyswip.examples.sudoku.sudoku",
        "documentation": {}
    },
    {
        "label": "_",
        "kind": 5,
        "importPath": "reqs.pyswip.examples.sudoku.sudoku",
        "description": "reqs.pyswip.examples.sudoku.sudoku",
        "peekOfCode": "_ = 0\npuzzle1 = [\n            [_,6,_,1,_,4,_,5,_],\n            [_,_,8,3,_,5,6,_,_],\n            [2,_,_,_,_,_,_,_,1],\n            [8,_,_,4,_,7,_,_,6],\n            [_,_,6,_,_,_,3,_,_],\n            [7,_,_,9,_,1,_,_,4],\n            [5,_,_,_,_,_,_,_,2],\n            [_,_,7,2,_,6,9,_,_],",
        "detail": "reqs.pyswip.examples.sudoku.sudoku",
        "documentation": {}
    },
    {
        "label": "puzzle1",
        "kind": 5,
        "importPath": "reqs.pyswip.examples.sudoku.sudoku",
        "description": "reqs.pyswip.examples.sudoku.sudoku",
        "peekOfCode": "puzzle1 = [\n            [_,6,_,1,_,4,_,5,_],\n            [_,_,8,3,_,5,6,_,_],\n            [2,_,_,_,_,_,_,_,1],\n            [8,_,_,4,_,7,_,_,6],\n            [_,_,6,_,_,_,3,_,_],\n            [7,_,_,9,_,1,_,_,4],\n            [5,_,_,_,_,_,_,_,2],\n            [_,_,7,2,_,6,9,_,_],\n            [_,4,_,5,_,8,_,7,_]",
        "detail": "reqs.pyswip.examples.sudoku.sudoku",
        "documentation": {}
    },
    {
        "label": "puzzle2",
        "kind": 5,
        "importPath": "reqs.pyswip.examples.sudoku.sudoku",
        "description": "reqs.pyswip.examples.sudoku.sudoku",
        "peekOfCode": "puzzle2 = [\n            [_,_,1,_,8,_,6,_,4],\n            [_,3,7,6,_,_,_,_,_],\n            [5,_,_,_,_,_,_,_,_],\n            [_,_,_,_,_,5,_,_,_],\n            [_,_,6,_,1,_,8,_,_],\n            [_,_,_,4,_,_,_,_,_],\n            [_,_,_,_,_,_,_,_,3],\n            [_,_,_,_,_,7,5,2,_],\n            [8,_,2,_,9,_,7,_,_]",
        "detail": "reqs.pyswip.examples.sudoku.sudoku",
        "documentation": {}
    },
    {
        "label": "DailySudokuPuzzle",
        "kind": 6,
        "importPath": "reqs.pyswip.examples.sudoku.sudoku_daily",
        "description": "reqs.pyswip.examples.sudoku.sudoku_daily",
        "peekOfCode": "class DailySudokuPuzzle(HTMLParser):\n    def __init__(self):\n        self.puzzle = []\n        self.__in_td = False\n        HTMLParser.__init__(self)\n    def handle_starttag(self, tag, attrs):\n        if tag == \"td\":\n            for attr in attrs:\n                if attr[0] == \"class\" and attr[1] == \"InnerTDone\":\n                    self.__in_td = True",
        "detail": "reqs.pyswip.examples.sudoku.sudoku_daily",
        "documentation": {}
    },
    {
        "label": "pretty_print",
        "kind": 2,
        "importPath": "reqs.pyswip.examples.sudoku.sudoku_daily",
        "description": "reqs.pyswip.examples.sudoku.sudoku_daily",
        "peekOfCode": "def pretty_print(table):\n    print(\"\".join([\"/---\", \"----\"*8, \"\\\\\"]))\n    for row in table:\n        print(\"\".join([\"|\", \"|\".join(\" %s \" % (i or \" \") for i in row), \"|\"]))\n    print(\"\".join([\"\\\\---\", \"----\"*8, \"/\"]))\ndef get_daily_sudoku(url):\n    puzzle = DailySudokuPuzzle()\n    f = urllib_request.urlopen(url)\n    puzzle.feed(f.read().decode(\"latin-1\"))\n    puzzle = puzzle.puzzle",
        "detail": "reqs.pyswip.examples.sudoku.sudoku_daily",
        "documentation": {}
    },
    {
        "label": "get_daily_sudoku",
        "kind": 2,
        "importPath": "reqs.pyswip.examples.sudoku.sudoku_daily",
        "description": "reqs.pyswip.examples.sudoku.sudoku_daily",
        "peekOfCode": "def get_daily_sudoku(url):\n    puzzle = DailySudokuPuzzle()\n    f = urllib_request.urlopen(url)\n    puzzle.feed(f.read().decode(\"latin-1\"))\n    puzzle = puzzle.puzzle\n    return [puzzle[i*9:i*9+9] for i in range(9)]\ndef solve(problem):\n    prolog.consult(\"sudoku.pl\")\n    p = str(problem).replace(\"0\", \"_\")\n    result = list(prolog.query(\"Puzzle=%s,sudoku(Puzzle)\" % p, maxresult=1))",
        "detail": "reqs.pyswip.examples.sudoku.sudoku_daily",
        "documentation": {}
    },
    {
        "label": "solve",
        "kind": 2,
        "importPath": "reqs.pyswip.examples.sudoku.sudoku_daily",
        "description": "reqs.pyswip.examples.sudoku.sudoku_daily",
        "peekOfCode": "def solve(problem):\n    prolog.consult(\"sudoku.pl\")\n    p = str(problem).replace(\"0\", \"_\")\n    result = list(prolog.query(\"Puzzle=%s,sudoku(Puzzle)\" % p, maxresult=1))\n    if result:\n        result = result[0]\n        return result[\"Puzzle\"]\n    else:\n        return False    \nif __name__ == \"__main__\":",
        "detail": "reqs.pyswip.examples.sudoku.sudoku_daily",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "reqs.pyswip.examples.create_term",
        "description": "reqs.pyswip.examples.create_term",
        "peekOfCode": "def main():\n    prolog = Prolog()\n    a1 = PL_new_term_refs(2)\n    a2 = a1 + 1\n    t = PL_new_term_ref()\n    ta = PL_new_term_ref()\n    animal2 = PL_new_functor(PL_new_atom(\"animal\"), 2)\n    assertz = PL_new_functor(PL_new_atom(\"assertz\"), 1)\n    PL_put_atom_chars(a1, \"gnu\")\n    PL_put_integer(a2, 50)",
        "detail": "reqs.pyswip.examples.create_term",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "reqs.pyswip.examples.father",
        "description": "reqs.pyswip.examples.father",
        "peekOfCode": "def main():\n    p = Prolog()\n    father = Functor(\"father\", 2)\n    mother = Functor(\"mother\", 2)\n    assertz = Functor(\"assertz\", 1)\n    p.assertz(\"father(john,mich)\")\n    p.assertz(\"father(john,gina)\")\n    p.assertz(\"mother(jane,mich)\")\n    X = Variable(); Y = Variable(); Z = Variable()\n    listing = Functor(\"listing\", 1)",
        "detail": "reqs.pyswip.examples.father",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "reqs.pyswip.examples.knowledgebase",
        "description": "reqs.pyswip.examples.knowledgebase",
        "peekOfCode": "def main():\n    p = Prolog()\n    assertz = Functor(\"assertz\")\n    parent = Functor(\"parent\", 2)\n    test1 = newModule(\"test1\")\n    test2 = newModule(\"test2\")\n    call(assertz(parent(\"john\", \"bob\")), module=test1)\n    call(assertz(parent(\"jane\", \"bob\")), module=test1)\n    call(assertz(parent(\"mike\", \"bob\")), module=test2)\n    call(assertz(parent(\"gina\", \"bob\")), module=test2)",
        "detail": "reqs.pyswip.examples.knowledgebase",
        "documentation": {}
    },
    {
        "label": "atom_checksum",
        "kind": 2,
        "importPath": "reqs.pyswip.examples.register_foreign",
        "description": "reqs.pyswip.examples.register_foreign",
        "peekOfCode": "def atom_checksum(*a):\n    if isinstance(a[0], Atom):\n        r = sum(ord(c)&0xFF for c in str(a[0]))\n        a[1].value = r&0xFF\n        return True\n    else:\n        return False\np = Prolog()\nregisterForeign(atom_checksum, arity=2)\nprint(list(p.query(\"X='Python', atom_checksum(X, Y)\", catcherrors=False)))",
        "detail": "reqs.pyswip.examples.register_foreign",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "reqs.pyswip.examples.register_foreign",
        "description": "reqs.pyswip.examples.register_foreign",
        "peekOfCode": "p = Prolog()\nregisterForeign(atom_checksum, arity=2)\nprint(list(p.query(\"X='Python', atom_checksum(X, Y)\", catcherrors=False)))",
        "detail": "reqs.pyswip.examples.register_foreign",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "reqs.pyswip.examples.register_foreign_simple",
        "description": "reqs.pyswip.examples.register_foreign_simple",
        "peekOfCode": "def hello(t):\n    print(\"Hello,\", t)\nhello.arity = 1\ndef main():\n    registerForeign(hello)\n    prolog = Prolog()\n    prolog.assertz(\"father(michael,john)\")\n    prolog.assertz(\"father(michael,gina)\")    \n    list(prolog.query(\"father(michael,X), hello(X)\"))\nif __name__ ==\"__main__\":",
        "detail": "reqs.pyswip.examples.register_foreign_simple",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "reqs.pyswip.examples.register_foreign_simple",
        "description": "reqs.pyswip.examples.register_foreign_simple",
        "peekOfCode": "def main():\n    registerForeign(hello)\n    prolog = Prolog()\n    prolog.assertz(\"father(michael,john)\")\n    prolog.assertz(\"father(michael,gina)\")    \n    list(prolog.query(\"father(michael,X), hello(X)\"))\nif __name__ ==\"__main__\":\n    main()",
        "detail": "reqs.pyswip.examples.register_foreign_simple",
        "documentation": {}
    },
    {
        "label": "hello.arity",
        "kind": 5,
        "importPath": "reqs.pyswip.examples.register_foreign_simple",
        "description": "reqs.pyswip.examples.register_foreign_simple",
        "peekOfCode": "hello.arity = 1\ndef main():\n    registerForeign(hello)\n    prolog = Prolog()\n    prolog.assertz(\"father(michael,john)\")\n    prolog.assertz(\"father(michael,gina)\")    \n    list(prolog.query(\"father(michael,X), hello(X)\"))\nif __name__ ==\"__main__\":\n    main()",
        "detail": "reqs.pyswip.examples.register_foreign_simple",
        "documentation": {}
    },
    {
        "label": "_mbstate_t_value",
        "kind": 6,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "class _mbstate_t_value(Union):\n    _fields_ = [(\"__wch\", wint_t),\n                (\"__wchb\", c_char * 4)]\nclass mbstate_t(Structure):\n    _fields_ = [(\"__count\", c_int),\n                (\"__value\", _mbstate_t_value)]\n# stream related funcs\nSread_function = CFUNCTYPE(ssize_t, c_void_p, c_char_p, c_size_t)\nSwrite_function = CFUNCTYPE(ssize_t, c_void_p, c_char_p, c_size_t)\nSseek_function = CFUNCTYPE(c_long, c_void_p, c_long, c_int)",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "mbstate_t",
        "kind": 6,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "class mbstate_t(Structure):\n    _fields_ = [(\"__count\", c_int),\n                (\"__value\", _mbstate_t_value)]\n# stream related funcs\nSread_function = CFUNCTYPE(ssize_t, c_void_p, c_char_p, c_size_t)\nSwrite_function = CFUNCTYPE(ssize_t, c_void_p, c_char_p, c_size_t)\nSseek_function = CFUNCTYPE(c_long, c_void_p, c_long, c_int)\nSseek64_function = CFUNCTYPE(c_int64, c_void_p, c_int64, c_int)\nSclose_function = CFUNCTYPE(c_int, c_void_p)\nScontrol_function = CFUNCTYPE(c_int, c_void_p, c_int, c_void_p)",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "IOFUNCTIONS",
        "kind": 6,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "class IOFUNCTIONS(Structure):\n    _fields_ = [(\"read\",Sread_function),\n                (\"write\",Swrite_function),\n                (\"seek\",Sseek_function),\n                (\"close\",Sclose_function),\n                (\"seek64\",Sseek64_function),\n                (\"reserved\",intptr_t*2)]\n# IOENC\nENC_UNKNOWN,ENC_OCTET,ENC_ASCII,ENC_ISO_LATIN_1,ENC_ANSI,ENC_UTF8,ENC_UNICODE_BE,ENC_UNICODE_LE,ENC_WCHAR = tuple(range(9))\nIOENC = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "IOPOS",
        "kind": 6,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "class IOPOS(Structure):\n    _fields_ = [(\"byteno\",c_int64),\n                (\"charno\",c_int64),\n                (\"lineno\",c_int),\n                (\"linepos\",c_int),\n                (\"reserved\", intptr_t*2)]\n# IOSTREAM\nclass IOSTREAM(Structure):\n    _fields_ = [(\"bufp\",c_char_p),\n                (\"limitp\",c_char_p),",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "IOSTREAM",
        "kind": 6,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "class IOSTREAM(Structure):\n    _fields_ = [(\"bufp\",c_char_p),\n                (\"limitp\",c_char_p),\n                (\"buffer\",c_char_p),\n                (\"unbuffer\",c_char_p),\n                (\"lastc\",c_int),\n                (\"magic\",c_int),\n                (\"bufsize\",c_int),\n                (\"flags\",c_int),\n                (\"posbuf\",IOPOS),",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "ExitHook",
        "kind": 6,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "class ExitHook(object):\n    def __init__(self):\n        self.exit_code = None\n        self.exception = None\n    def hook(self):\n        self._orig_exit = sys.exit\n        sys.exit = self.exit\n    def exit(self, code=0):\n        self.exit_code = code\n        self._orig_exit(code)",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "walk",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "def walk(path, name):\n    \"\"\"\n    This function is a 2-time recursive func,\n    that findin file in dirs\n    :parameters:\n      -  `path` (str) - Directory path\n      -  `name` (str) - Name of file, that we lookin for\n    :returns:\n        Path to the swipl so, path to the resource file\n    :returns type:",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "get_swi_ver",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "def get_swi_ver():\n    import re\n    swi_ver = input(\n                'Please enter you SWI-Prolog version in format \"X.Y.Z\": ')\n    match = re.search(r'[0-9]+\\.[0-9]+\\.[0-9]+', swi_ver)\n    if match is None:\n        raise InputError('Error, type normal version')\n    return swi_ver\ndef _findSwiplMacOSHome():\n    \"\"\"",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "str_to_bytes",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "def str_to_bytes(string):\n    \"\"\"\n    Turns a string into a bytes if necessary (i.e. if it is not already a bytes\n    object or None).\n    If string is None, int or c_char_p it will be returned directly.\n    :param string: The string that shall be transformed\n    :type string: str, bytes or type(None)\n    :return: Transformed string\n    :rtype: c_char_p compatible object (bytes, c_char_p, int or None)\n    \"\"\"",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "list_to_bytes_list",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "def list_to_bytes_list(strList):\n    \"\"\"\n    This function turns an array of strings into a pointer array\n    with pointers pointing to the encodings of those strings\n    Possibly contained bytes are kept as they are.\n    :param strList: List of strings that shall be converted\n    :type strList: List of strings\n    :returns: Pointer array with pointers pointing to bytes\n    :raises: TypeError if strList is not list, set or tuple\n    \"\"\"",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "check_strings",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "def check_strings(strings, arrays):\n    \"\"\"\n    Decorator function which can be used to automatically turn an incoming\n    string into a bytes object and an incoming list to a pointer array if\n    necessary.\n    :param strings: Indices of the arguments must be pointers to bytes\n    :type strings: List of integers\n    :param arrays: Indices of the arguments must be arrays of pointers to bytes\n    :type arrays: List of integers\n    \"\"\"",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_STRINGS_MARK",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "def PL_STRINGS_MARK():\n    __PL_mark = buf_mark_t()\n    PL_mark_string_buffers(byref(__PL_mark))\n    try:\n        yield\n    finally:\n        PL_release_string_buffers_from_mark(__PL_mark)\nPL_open_foreign_frame = _lib.PL_open_foreign_frame\nPL_open_foreign_frame.restype = fid_t\nPL_foreign_control = _lib.PL_foreign_control",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "cleanupProlog",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "def cleanupProlog():\n    # only do something if prolog has been initialised\n    if PL_is_initialised(None,None):\n        # clean up the prolog system using the caught exit code\n        # if exit code is None, the program exits normally and we can use 0\n        # instead.\n        # TODO Prolog documentation says cleanup with code 0 may be interrupted\n        # If the program has come to an end the prolog system should not\n        # interfere with that. Therefore we may want to use 1 instead of 0.\n        PL_cleanup(int(_hook.exit_code or 0))",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "_stringMap",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "_stringMap = {}\ndef str_to_bytes(string):\n    \"\"\"\n    Turns a string into a bytes if necessary (i.e. if it is not already a bytes\n    object or None).\n    If string is None, int or c_char_p it will be returned directly.\n    :param string: The string that shall be transformed\n    :type string: str, bytes or type(None)\n    :return: Transformed string\n    :rtype: c_char_p compatible object (bytes, c_char_p, int or None)",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "_lib",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "_lib = CDLL(_path, mode=RTLD_GLOBAL)\n#       /*******************************\n#        *\t      VERSIONS\t\t*\n#        *******************************/\nPL_VERSION_SYSTEM\t=1\t# Prolog version\nPL_VERSION_FLI\t\t=2\t# PL_* compatibility\nPL_VERSION_REC\t\t=3\t# PL_record_external() compatibility\nPL_VERSION_QLF\t\t=4\t# Saved QLF format version\nPL_VERSION_QLF_LOAD\t=5\t# Min loadable QLF format version\nPL_VERSION_VM\t\t=6\t# VM signature",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PYSWIP_MAXSTR",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PYSWIP_MAXSTR = 1024\nc_int_p = c_void_p\nc_long_p = c_void_p\nc_double_p = c_void_p\nc_uint_p = c_void_p\n#\n# constants (from SWI-Prolog.h)\n# /* PL_unify_term( arguments */\nif PL_VERSION<80200:\n    # constants (from SWI-Prolog.h)",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "c_int_p",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "c_int_p = c_void_p\nc_long_p = c_void_p\nc_double_p = c_void_p\nc_uint_p = c_void_p\n#\n# constants (from SWI-Prolog.h)\n# /* PL_unify_term( arguments */\nif PL_VERSION<80200:\n    # constants (from SWI-Prolog.h)\n    # PL_unify_term() arguments",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "c_long_p",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "c_long_p = c_void_p\nc_double_p = c_void_p\nc_uint_p = c_void_p\n#\n# constants (from SWI-Prolog.h)\n# /* PL_unify_term( arguments */\nif PL_VERSION<80200:\n    # constants (from SWI-Prolog.h)\n    # PL_unify_term() arguments\n    PL_VARIABLE = 1  # nothing",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "c_double_p",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "c_double_p = c_void_p\nc_uint_p = c_void_p\n#\n# constants (from SWI-Prolog.h)\n# /* PL_unify_term( arguments */\nif PL_VERSION<80200:\n    # constants (from SWI-Prolog.h)\n    # PL_unify_term() arguments\n    PL_VARIABLE = 1  # nothing\n    PL_ATOM = 2  # const char",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "c_uint_p",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "c_uint_p = c_void_p\n#\n# constants (from SWI-Prolog.h)\n# /* PL_unify_term( arguments */\nif PL_VERSION<80200:\n    # constants (from SWI-Prolog.h)\n    # PL_unify_term() arguments\n    PL_VARIABLE = 1  # nothing\n    PL_ATOM = 2  # const char\n    PL_INTEGER = 3  # int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_FIRST_CALL",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_FIRST_CALL = 0\nPL_CUTTED = 1\nPL_PRUNED = PL_CUTTED\nPL_REDO = 2\nPL_FA_NOTRACE = 0x01  # foreign cannot be traced\nPL_FA_TRANSPARENT = 0x02  # foreign is module transparent\nPL_FA_NONDETERMINISTIC  = 0x04  # foreign is non-deterministic\nPL_FA_VARARGS = 0x08  # call using t0, ac, ctx\nPL_FA_CREF = 0x10  # Internal: has clause-reference */\n#        /*******************************",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_CUTTED",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_CUTTED = 1\nPL_PRUNED = PL_CUTTED\nPL_REDO = 2\nPL_FA_NOTRACE = 0x01  # foreign cannot be traced\nPL_FA_TRANSPARENT = 0x02  # foreign is module transparent\nPL_FA_NONDETERMINISTIC  = 0x04  # foreign is non-deterministic\nPL_FA_VARARGS = 0x08  # call using t0, ac, ctx\nPL_FA_CREF = 0x10  # Internal: has clause-reference */\n#        /*******************************\n#        *       CALL-BACK      *",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_PRUNED",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_PRUNED = PL_CUTTED\nPL_REDO = 2\nPL_FA_NOTRACE = 0x01  # foreign cannot be traced\nPL_FA_TRANSPARENT = 0x02  # foreign is module transparent\nPL_FA_NONDETERMINISTIC  = 0x04  # foreign is non-deterministic\nPL_FA_VARARGS = 0x08  # call using t0, ac, ctx\nPL_FA_CREF = 0x10  # Internal: has clause-reference */\n#        /*******************************\n#        *       CALL-BACK      *\n#        *******************************/",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_REDO",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_REDO = 2\nPL_FA_NOTRACE = 0x01  # foreign cannot be traced\nPL_FA_TRANSPARENT = 0x02  # foreign is module transparent\nPL_FA_NONDETERMINISTIC  = 0x04  # foreign is non-deterministic\nPL_FA_VARARGS = 0x08  # call using t0, ac, ctx\nPL_FA_CREF = 0x10  # Internal: has clause-reference */\n#        /*******************************\n#        *       CALL-BACK      *\n#        *******************************/\nPL_Q_DEBUG = 0x01  # = TRUE for backward compatibility",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_FA_NOTRACE",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_FA_NOTRACE = 0x01  # foreign cannot be traced\nPL_FA_TRANSPARENT = 0x02  # foreign is module transparent\nPL_FA_NONDETERMINISTIC  = 0x04  # foreign is non-deterministic\nPL_FA_VARARGS = 0x08  # call using t0, ac, ctx\nPL_FA_CREF = 0x10  # Internal: has clause-reference */\n#        /*******************************\n#        *       CALL-BACK      *\n#        *******************************/\nPL_Q_DEBUG = 0x01  # = TRUE for backward compatibility\nPL_Q_NORMAL = 0x02  # normal usage",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_FA_TRANSPARENT",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_FA_TRANSPARENT = 0x02  # foreign is module transparent\nPL_FA_NONDETERMINISTIC  = 0x04  # foreign is non-deterministic\nPL_FA_VARARGS = 0x08  # call using t0, ac, ctx\nPL_FA_CREF = 0x10  # Internal: has clause-reference */\n#        /*******************************\n#        *       CALL-BACK      *\n#        *******************************/\nPL_Q_DEBUG = 0x01  # = TRUE for backward compatibility\nPL_Q_NORMAL = 0x02  # normal usage\nPL_Q_NODEBUG =  0x04  # use this one",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_FA_VARARGS",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_FA_VARARGS = 0x08  # call using t0, ac, ctx\nPL_FA_CREF = 0x10  # Internal: has clause-reference */\n#        /*******************************\n#        *       CALL-BACK      *\n#        *******************************/\nPL_Q_DEBUG = 0x01  # = TRUE for backward compatibility\nPL_Q_NORMAL = 0x02  # normal usage\nPL_Q_NODEBUG =  0x04  # use this one\nPL_Q_CATCH_EXCEPTION = 0x08  # handle exceptions in C\nPL_Q_PASS_EXCEPTION = 0x10  # pass to parent environment",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_FA_CREF",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_FA_CREF = 0x10  # Internal: has clause-reference */\n#        /*******************************\n#        *       CALL-BACK      *\n#        *******************************/\nPL_Q_DEBUG = 0x01  # = TRUE for backward compatibility\nPL_Q_NORMAL = 0x02  # normal usage\nPL_Q_NODEBUG =  0x04  # use this one\nPL_Q_CATCH_EXCEPTION = 0x08  # handle exceptions in C\nPL_Q_PASS_EXCEPTION = 0x10  # pass to parent environment\nPL_Q_DETERMINISTIC = 0x20  # call was deterministic",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_Q_DEBUG",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_Q_DEBUG = 0x01  # = TRUE for backward compatibility\nPL_Q_NORMAL = 0x02  # normal usage\nPL_Q_NODEBUG =  0x04  # use this one\nPL_Q_CATCH_EXCEPTION = 0x08  # handle exceptions in C\nPL_Q_PASS_EXCEPTION = 0x10  # pass to parent environment\nPL_Q_DETERMINISTIC = 0x20  # call was deterministic\n#        /*******************************\n#        *         BLOBS        *\n#        *******************************/\n#define PL_BLOB_MAGIC_B 0x75293a00  /* Magic to validate a blob-type */",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_Q_NORMAL",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_Q_NORMAL = 0x02  # normal usage\nPL_Q_NODEBUG =  0x04  # use this one\nPL_Q_CATCH_EXCEPTION = 0x08  # handle exceptions in C\nPL_Q_PASS_EXCEPTION = 0x10  # pass to parent environment\nPL_Q_DETERMINISTIC = 0x20  # call was deterministic\n#        /*******************************\n#        *         BLOBS        *\n#        *******************************/\n#define PL_BLOB_MAGIC_B 0x75293a00  /* Magic to validate a blob-type */\n#define PL_BLOB_VERSION 1       /* Current version */",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_Q_NODEBUG",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_Q_NODEBUG =  0x04  # use this one\nPL_Q_CATCH_EXCEPTION = 0x08  # handle exceptions in C\nPL_Q_PASS_EXCEPTION = 0x10  # pass to parent environment\nPL_Q_DETERMINISTIC = 0x20  # call was deterministic\n#        /*******************************\n#        *         BLOBS        *\n#        *******************************/\n#define PL_BLOB_MAGIC_B 0x75293a00  /* Magic to validate a blob-type */\n#define PL_BLOB_VERSION 1       /* Current version */\n#define PL_BLOB_MAGIC   (PL_BLOB_MAGIC_B|PL_BLOB_VERSION)",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_Q_CATCH_EXCEPTION",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_Q_CATCH_EXCEPTION = 0x08  # handle exceptions in C\nPL_Q_PASS_EXCEPTION = 0x10  # pass to parent environment\nPL_Q_DETERMINISTIC = 0x20  # call was deterministic\n#        /*******************************\n#        *         BLOBS        *\n#        *******************************/\n#define PL_BLOB_MAGIC_B 0x75293a00  /* Magic to validate a blob-type */\n#define PL_BLOB_VERSION 1       /* Current version */\n#define PL_BLOB_MAGIC   (PL_BLOB_MAGIC_B|PL_BLOB_VERSION)\n#define PL_BLOB_UNIQUE  0x01        /* Blob content is unique */",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_Q_PASS_EXCEPTION",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_Q_PASS_EXCEPTION = 0x10  # pass to parent environment\nPL_Q_DETERMINISTIC = 0x20  # call was deterministic\n#        /*******************************\n#        *         BLOBS        *\n#        *******************************/\n#define PL_BLOB_MAGIC_B 0x75293a00  /* Magic to validate a blob-type */\n#define PL_BLOB_VERSION 1       /* Current version */\n#define PL_BLOB_MAGIC   (PL_BLOB_MAGIC_B|PL_BLOB_VERSION)\n#define PL_BLOB_UNIQUE  0x01        /* Blob content is unique */\n#define PL_BLOB_TEXT    0x02        /* blob contains text */",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_Q_DETERMINISTIC",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_Q_DETERMINISTIC = 0x20  # call was deterministic\n#        /*******************************\n#        *         BLOBS        *\n#        *******************************/\n#define PL_BLOB_MAGIC_B 0x75293a00  /* Magic to validate a blob-type */\n#define PL_BLOB_VERSION 1       /* Current version */\n#define PL_BLOB_MAGIC   (PL_BLOB_MAGIC_B|PL_BLOB_VERSION)\n#define PL_BLOB_UNIQUE  0x01        /* Blob content is unique */\n#define PL_BLOB_TEXT    0x02        /* blob contains text */\n#define PL_BLOB_NOCOPY  0x04        /* do not copy the data */",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "argv",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "argv = list_to_bytes_list(sys.argv + [None])\nargc = len(sys.argv)\n#                  /*******************************\n#                  *             TYPES            *\n#                  *******************************/\n#\n# typedef uintptr_t       atom_t;         /* Prolog atom */\n# typedef uintptr_t       functor_t;      /* Name/arity pair */\n# typedef void *          module_t;       /* Prolog module */\n# typedef void *          predicate_t;    /* Prolog procedure */",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "argc",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "argc = len(sys.argv)\n#                  /*******************************\n#                  *             TYPES            *\n#                  *******************************/\n#\n# typedef uintptr_t       atom_t;         /* Prolog atom */\n# typedef uintptr_t       functor_t;      /* Name/arity pair */\n# typedef void *          module_t;       /* Prolog module */\n# typedef void *          predicate_t;    /* Prolog procedure */\n# typedef void *          record_t;       /* Prolog recorded term */",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "atom_t",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "atom_t = c_uint_p\nfunctor_t = c_uint_p\nmodule_t = c_void_p\npredicate_t = c_void_p\nrecord_t = c_void_p\nterm_t = c_uint_p\nqid_t = c_uint_p\nPL_fid_t = c_uint_p\nfid_t = c_uint_p\ncontrol_t = c_void_p",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "functor_t",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "functor_t = c_uint_p\nmodule_t = c_void_p\npredicate_t = c_void_p\nrecord_t = c_void_p\nterm_t = c_uint_p\nqid_t = c_uint_p\nPL_fid_t = c_uint_p\nfid_t = c_uint_p\ncontrol_t = c_void_p\nPL_engine_t = c_void_p",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "module_t",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "module_t = c_void_p\npredicate_t = c_void_p\nrecord_t = c_void_p\nterm_t = c_uint_p\nqid_t = c_uint_p\nPL_fid_t = c_uint_p\nfid_t = c_uint_p\ncontrol_t = c_void_p\nPL_engine_t = c_void_p\nPL_atomic_t = c_uint_p",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "predicate_t",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "predicate_t = c_void_p\nrecord_t = c_void_p\nterm_t = c_uint_p\nqid_t = c_uint_p\nPL_fid_t = c_uint_p\nfid_t = c_uint_p\ncontrol_t = c_void_p\nPL_engine_t = c_void_p\nPL_atomic_t = c_uint_p\nforeign_t = c_uint_p",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "record_t",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "record_t = c_void_p\nterm_t = c_uint_p\nqid_t = c_uint_p\nPL_fid_t = c_uint_p\nfid_t = c_uint_p\ncontrol_t = c_void_p\nPL_engine_t = c_void_p\nPL_atomic_t = c_uint_p\nforeign_t = c_uint_p\npl_wchar_t = c_wchar",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "term_t",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "term_t = c_uint_p\nqid_t = c_uint_p\nPL_fid_t = c_uint_p\nfid_t = c_uint_p\ncontrol_t = c_void_p\nPL_engine_t = c_void_p\nPL_atomic_t = c_uint_p\nforeign_t = c_uint_p\npl_wchar_t = c_wchar\nintptr_t = c_long",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "qid_t",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "qid_t = c_uint_p\nPL_fid_t = c_uint_p\nfid_t = c_uint_p\ncontrol_t = c_void_p\nPL_engine_t = c_void_p\nPL_atomic_t = c_uint_p\nforeign_t = c_uint_p\npl_wchar_t = c_wchar\nintptr_t = c_long\nssize_t = intptr_t",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_fid_t",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_fid_t = c_uint_p\nfid_t = c_uint_p\ncontrol_t = c_void_p\nPL_engine_t = c_void_p\nPL_atomic_t = c_uint_p\nforeign_t = c_uint_p\npl_wchar_t = c_wchar\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "fid_t",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "fid_t = c_uint_p\ncontrol_t = c_void_p\nPL_engine_t = c_void_p\nPL_atomic_t = c_uint_p\nforeign_t = c_uint_p\npl_wchar_t = c_wchar\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nbuf_mark_t = c_uint_p",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "control_t",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "control_t = c_void_p\nPL_engine_t = c_void_p\nPL_atomic_t = c_uint_p\nforeign_t = c_uint_p\npl_wchar_t = c_wchar\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nbuf_mark_t = c_uint_p\nPL_initialise = _lib.PL_initialise",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_engine_t",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_engine_t = c_void_p\nPL_atomic_t = c_uint_p\nforeign_t = c_uint_p\npl_wchar_t = c_wchar\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nbuf_mark_t = c_uint_p\nPL_initialise = _lib.PL_initialise\nPL_initialise = check_strings(None, 1)(PL_initialise)",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_atomic_t",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_atomic_t = c_uint_p\nforeign_t = c_uint_p\npl_wchar_t = c_wchar\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nbuf_mark_t = c_uint_p\nPL_initialise = _lib.PL_initialise\nPL_initialise = check_strings(None, 1)(PL_initialise)\nPL_mark_string_buffers = _lib.PL_mark_string_buffers",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "foreign_t",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "foreign_t = c_uint_p\npl_wchar_t = c_wchar\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nbuf_mark_t = c_uint_p\nPL_initialise = _lib.PL_initialise\nPL_initialise = check_strings(None, 1)(PL_initialise)\nPL_mark_string_buffers = _lib.PL_mark_string_buffers\nPL_mark_string_buffers.argtypes = [buf_mark_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "pl_wchar_t",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "pl_wchar_t = c_wchar\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nbuf_mark_t = c_uint_p\nPL_initialise = _lib.PL_initialise\nPL_initialise = check_strings(None, 1)(PL_initialise)\nPL_mark_string_buffers = _lib.PL_mark_string_buffers\nPL_mark_string_buffers.argtypes = [buf_mark_t]\nPL_release_string_buffers_from_mark = _lib.PL_release_string_buffers_from_mark",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "intptr_t",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "intptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nbuf_mark_t = c_uint_p\nPL_initialise = _lib.PL_initialise\nPL_initialise = check_strings(None, 1)(PL_initialise)\nPL_mark_string_buffers = _lib.PL_mark_string_buffers\nPL_mark_string_buffers.argtypes = [buf_mark_t]\nPL_release_string_buffers_from_mark = _lib.PL_release_string_buffers_from_mark\nPL_release_string_buffers_from_mark.argtypes = [buf_mark_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "ssize_t",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "ssize_t = intptr_t\nwint_t = c_uint\nbuf_mark_t = c_uint_p\nPL_initialise = _lib.PL_initialise\nPL_initialise = check_strings(None, 1)(PL_initialise)\nPL_mark_string_buffers = _lib.PL_mark_string_buffers\nPL_mark_string_buffers.argtypes = [buf_mark_t]\nPL_release_string_buffers_from_mark = _lib.PL_release_string_buffers_from_mark\nPL_release_string_buffers_from_mark.argtypes = [buf_mark_t]\n@contextmanager",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "wint_t",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "wint_t = c_uint\nbuf_mark_t = c_uint_p\nPL_initialise = _lib.PL_initialise\nPL_initialise = check_strings(None, 1)(PL_initialise)\nPL_mark_string_buffers = _lib.PL_mark_string_buffers\nPL_mark_string_buffers.argtypes = [buf_mark_t]\nPL_release_string_buffers_from_mark = _lib.PL_release_string_buffers_from_mark\nPL_release_string_buffers_from_mark.argtypes = [buf_mark_t]\n@contextmanager\ndef PL_STRINGS_MARK():",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "buf_mark_t",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "buf_mark_t = c_uint_p\nPL_initialise = _lib.PL_initialise\nPL_initialise = check_strings(None, 1)(PL_initialise)\nPL_mark_string_buffers = _lib.PL_mark_string_buffers\nPL_mark_string_buffers.argtypes = [buf_mark_t]\nPL_release_string_buffers_from_mark = _lib.PL_release_string_buffers_from_mark\nPL_release_string_buffers_from_mark.argtypes = [buf_mark_t]\n@contextmanager\ndef PL_STRINGS_MARK():\n    __PL_mark = buf_mark_t()",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_initialise",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_initialise = _lib.PL_initialise\nPL_initialise = check_strings(None, 1)(PL_initialise)\nPL_mark_string_buffers = _lib.PL_mark_string_buffers\nPL_mark_string_buffers.argtypes = [buf_mark_t]\nPL_release_string_buffers_from_mark = _lib.PL_release_string_buffers_from_mark\nPL_release_string_buffers_from_mark.argtypes = [buf_mark_t]\n@contextmanager\ndef PL_STRINGS_MARK():\n    __PL_mark = buf_mark_t()\n    PL_mark_string_buffers(byref(__PL_mark))",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_initialise",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_initialise = check_strings(None, 1)(PL_initialise)\nPL_mark_string_buffers = _lib.PL_mark_string_buffers\nPL_mark_string_buffers.argtypes = [buf_mark_t]\nPL_release_string_buffers_from_mark = _lib.PL_release_string_buffers_from_mark\nPL_release_string_buffers_from_mark.argtypes = [buf_mark_t]\n@contextmanager\ndef PL_STRINGS_MARK():\n    __PL_mark = buf_mark_t()\n    PL_mark_string_buffers(byref(__PL_mark))\n    try:",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_mark_string_buffers",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_mark_string_buffers = _lib.PL_mark_string_buffers\nPL_mark_string_buffers.argtypes = [buf_mark_t]\nPL_release_string_buffers_from_mark = _lib.PL_release_string_buffers_from_mark\nPL_release_string_buffers_from_mark.argtypes = [buf_mark_t]\n@contextmanager\ndef PL_STRINGS_MARK():\n    __PL_mark = buf_mark_t()\n    PL_mark_string_buffers(byref(__PL_mark))\n    try:\n        yield",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_mark_string_buffers.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_mark_string_buffers.argtypes = [buf_mark_t]\nPL_release_string_buffers_from_mark = _lib.PL_release_string_buffers_from_mark\nPL_release_string_buffers_from_mark.argtypes = [buf_mark_t]\n@contextmanager\ndef PL_STRINGS_MARK():\n    __PL_mark = buf_mark_t()\n    PL_mark_string_buffers(byref(__PL_mark))\n    try:\n        yield\n    finally:",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_release_string_buffers_from_mark",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_release_string_buffers_from_mark = _lib.PL_release_string_buffers_from_mark\nPL_release_string_buffers_from_mark.argtypes = [buf_mark_t]\n@contextmanager\ndef PL_STRINGS_MARK():\n    __PL_mark = buf_mark_t()\n    PL_mark_string_buffers(byref(__PL_mark))\n    try:\n        yield\n    finally:\n        PL_release_string_buffers_from_mark(__PL_mark)",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_release_string_buffers_from_mark.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_release_string_buffers_from_mark.argtypes = [buf_mark_t]\n@contextmanager\ndef PL_STRINGS_MARK():\n    __PL_mark = buf_mark_t()\n    PL_mark_string_buffers(byref(__PL_mark))\n    try:\n        yield\n    finally:\n        PL_release_string_buffers_from_mark(__PL_mark)\nPL_open_foreign_frame = _lib.PL_open_foreign_frame",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_open_foreign_frame",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_open_foreign_frame = _lib.PL_open_foreign_frame\nPL_open_foreign_frame.restype = fid_t\nPL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restype = c_int\nPL_foreign_context = _lib.PL_foreign_context\nPL_foreign_context.argtypes = [control_t]\nPL_foreign_context.restype = intptr_t\nPL_retry = _lib._PL_retry\nPL_retry.argtypes = [intptr_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_open_foreign_frame.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_open_foreign_frame.restype = fid_t\nPL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restype = c_int\nPL_foreign_context = _lib.PL_foreign_context\nPL_foreign_context.argtypes = [control_t]\nPL_foreign_context.restype = intptr_t\nPL_retry = _lib._PL_retry\nPL_retry.argtypes = [intptr_t]\nPL_retry.restype = foreign_t",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_control",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restype = c_int\nPL_foreign_context = _lib.PL_foreign_context\nPL_foreign_context.argtypes = [control_t]\nPL_foreign_context.restype = intptr_t\nPL_retry = _lib._PL_retry\nPL_retry.argtypes = [intptr_t]\nPL_retry.restype = foreign_t\nPL_new_term_ref = _lib.PL_new_term_ref",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_control.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restype = c_int\nPL_foreign_context = _lib.PL_foreign_context\nPL_foreign_context.argtypes = [control_t]\nPL_foreign_context.restype = intptr_t\nPL_retry = _lib._PL_retry\nPL_retry.argtypes = [intptr_t]\nPL_retry.restype = foreign_t\nPL_new_term_ref = _lib.PL_new_term_ref\nPL_new_term_ref.restype = term_t",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_control.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_foreign_control.restype = c_int\nPL_foreign_context = _lib.PL_foreign_context\nPL_foreign_context.argtypes = [control_t]\nPL_foreign_context.restype = intptr_t\nPL_retry = _lib._PL_retry\nPL_retry.argtypes = [intptr_t]\nPL_retry.restype = foreign_t\nPL_new_term_ref = _lib.PL_new_term_ref\nPL_new_term_ref.restype = term_t\nPL_new_term_refs = _lib.PL_new_term_refs",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_context",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_foreign_context = _lib.PL_foreign_context\nPL_foreign_context.argtypes = [control_t]\nPL_foreign_context.restype = intptr_t\nPL_retry = _lib._PL_retry\nPL_retry.argtypes = [intptr_t]\nPL_retry.restype = foreign_t\nPL_new_term_ref = _lib.PL_new_term_ref\nPL_new_term_ref.restype = term_t\nPL_new_term_refs = _lib.PL_new_term_refs\nPL_new_term_refs.argtypes = [c_int]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_context.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_foreign_context.argtypes = [control_t]\nPL_foreign_context.restype = intptr_t\nPL_retry = _lib._PL_retry\nPL_retry.argtypes = [intptr_t]\nPL_retry.restype = foreign_t\nPL_new_term_ref = _lib.PL_new_term_ref\nPL_new_term_ref.restype = term_t\nPL_new_term_refs = _lib.PL_new_term_refs\nPL_new_term_refs.argtypes = [c_int]\nPL_new_term_refs.restype = term_t",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_context.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_foreign_context.restype = intptr_t\nPL_retry = _lib._PL_retry\nPL_retry.argtypes = [intptr_t]\nPL_retry.restype = foreign_t\nPL_new_term_ref = _lib.PL_new_term_ref\nPL_new_term_ref.restype = term_t\nPL_new_term_refs = _lib.PL_new_term_refs\nPL_new_term_refs.argtypes = [c_int]\nPL_new_term_refs.restype = term_t\nPL_chars_to_term = _lib.PL_chars_to_term",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_retry",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_retry = _lib._PL_retry\nPL_retry.argtypes = [intptr_t]\nPL_retry.restype = foreign_t\nPL_new_term_ref = _lib.PL_new_term_ref\nPL_new_term_ref.restype = term_t\nPL_new_term_refs = _lib.PL_new_term_refs\nPL_new_term_refs.argtypes = [c_int]\nPL_new_term_refs.restype = term_t\nPL_chars_to_term = _lib.PL_chars_to_term\nPL_chars_to_term.argtypes = [c_char_p, term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_retry.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_retry.argtypes = [intptr_t]\nPL_retry.restype = foreign_t\nPL_new_term_ref = _lib.PL_new_term_ref\nPL_new_term_ref.restype = term_t\nPL_new_term_refs = _lib.PL_new_term_refs\nPL_new_term_refs.argtypes = [c_int]\nPL_new_term_refs.restype = term_t\nPL_chars_to_term = _lib.PL_chars_to_term\nPL_chars_to_term.argtypes = [c_char_p, term_t]\nPL_chars_to_term.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_retry.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_retry.restype = foreign_t\nPL_new_term_ref = _lib.PL_new_term_ref\nPL_new_term_ref.restype = term_t\nPL_new_term_refs = _lib.PL_new_term_refs\nPL_new_term_refs.argtypes = [c_int]\nPL_new_term_refs.restype = term_t\nPL_chars_to_term = _lib.PL_chars_to_term\nPL_chars_to_term.argtypes = [c_char_p, term_t]\nPL_chars_to_term.restype = c_int\nPL_chars_to_term = check_strings(0, None)(PL_chars_to_term)",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_term_ref",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_new_term_ref = _lib.PL_new_term_ref\nPL_new_term_ref.restype = term_t\nPL_new_term_refs = _lib.PL_new_term_refs\nPL_new_term_refs.argtypes = [c_int]\nPL_new_term_refs.restype = term_t\nPL_chars_to_term = _lib.PL_chars_to_term\nPL_chars_to_term.argtypes = [c_char_p, term_t]\nPL_chars_to_term.restype = c_int\nPL_chars_to_term = check_strings(0, None)(PL_chars_to_term)\nPL_call = _lib.PL_call",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_term_ref.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_new_term_ref.restype = term_t\nPL_new_term_refs = _lib.PL_new_term_refs\nPL_new_term_refs.argtypes = [c_int]\nPL_new_term_refs.restype = term_t\nPL_chars_to_term = _lib.PL_chars_to_term\nPL_chars_to_term.argtypes = [c_char_p, term_t]\nPL_chars_to_term.restype = c_int\nPL_chars_to_term = check_strings(0, None)(PL_chars_to_term)\nPL_call = _lib.PL_call\nPL_call.argtypes = [term_t, module_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_term_refs",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_new_term_refs = _lib.PL_new_term_refs\nPL_new_term_refs.argtypes = [c_int]\nPL_new_term_refs.restype = term_t\nPL_chars_to_term = _lib.PL_chars_to_term\nPL_chars_to_term.argtypes = [c_char_p, term_t]\nPL_chars_to_term.restype = c_int\nPL_chars_to_term = check_strings(0, None)(PL_chars_to_term)\nPL_call = _lib.PL_call\nPL_call.argtypes = [term_t, module_t]\nPL_call.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_term_refs.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_new_term_refs.argtypes = [c_int]\nPL_new_term_refs.restype = term_t\nPL_chars_to_term = _lib.PL_chars_to_term\nPL_chars_to_term.argtypes = [c_char_p, term_t]\nPL_chars_to_term.restype = c_int\nPL_chars_to_term = check_strings(0, None)(PL_chars_to_term)\nPL_call = _lib.PL_call\nPL_call.argtypes = [term_t, module_t]\nPL_call.restype = c_int\nPL_call_predicate = _lib.PL_call_predicate",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_term_refs.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_new_term_refs.restype = term_t\nPL_chars_to_term = _lib.PL_chars_to_term\nPL_chars_to_term.argtypes = [c_char_p, term_t]\nPL_chars_to_term.restype = c_int\nPL_chars_to_term = check_strings(0, None)(PL_chars_to_term)\nPL_call = _lib.PL_call\nPL_call.argtypes = [term_t, module_t]\nPL_call.restype = c_int\nPL_call_predicate = _lib.PL_call_predicate\nPL_call_predicate.argtypes = [module_t, c_int, predicate_t, term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_chars_to_term",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_chars_to_term = _lib.PL_chars_to_term\nPL_chars_to_term.argtypes = [c_char_p, term_t]\nPL_chars_to_term.restype = c_int\nPL_chars_to_term = check_strings(0, None)(PL_chars_to_term)\nPL_call = _lib.PL_call\nPL_call.argtypes = [term_t, module_t]\nPL_call.restype = c_int\nPL_call_predicate = _lib.PL_call_predicate\nPL_call_predicate.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_call_predicate.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_chars_to_term.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_chars_to_term.argtypes = [c_char_p, term_t]\nPL_chars_to_term.restype = c_int\nPL_chars_to_term = check_strings(0, None)(PL_chars_to_term)\nPL_call = _lib.PL_call\nPL_call.argtypes = [term_t, module_t]\nPL_call.restype = c_int\nPL_call_predicate = _lib.PL_call_predicate\nPL_call_predicate.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_call_predicate.restype = c_int\nPL_discard_foreign_frame = _lib.PL_discard_foreign_frame",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_chars_to_term.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_chars_to_term.restype = c_int\nPL_chars_to_term = check_strings(0, None)(PL_chars_to_term)\nPL_call = _lib.PL_call\nPL_call.argtypes = [term_t, module_t]\nPL_call.restype = c_int\nPL_call_predicate = _lib.PL_call_predicate\nPL_call_predicate.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_call_predicate.restype = c_int\nPL_discard_foreign_frame = _lib.PL_discard_foreign_frame\nPL_discard_foreign_frame.argtypes = [fid_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_chars_to_term",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_chars_to_term = check_strings(0, None)(PL_chars_to_term)\nPL_call = _lib.PL_call\nPL_call.argtypes = [term_t, module_t]\nPL_call.restype = c_int\nPL_call_predicate = _lib.PL_call_predicate\nPL_call_predicate.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_call_predicate.restype = c_int\nPL_discard_foreign_frame = _lib.PL_discard_foreign_frame\nPL_discard_foreign_frame.argtypes = [fid_t]\nPL_discard_foreign_frame.restype = None",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_call",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_call = _lib.PL_call\nPL_call.argtypes = [term_t, module_t]\nPL_call.restype = c_int\nPL_call_predicate = _lib.PL_call_predicate\nPL_call_predicate.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_call_predicate.restype = c_int\nPL_discard_foreign_frame = _lib.PL_discard_foreign_frame\nPL_discard_foreign_frame.argtypes = [fid_t]\nPL_discard_foreign_frame.restype = None\nPL_put_chars = _lib.PL_put_chars",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_call.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_call.argtypes = [term_t, module_t]\nPL_call.restype = c_int\nPL_call_predicate = _lib.PL_call_predicate\nPL_call_predicate.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_call_predicate.restype = c_int\nPL_discard_foreign_frame = _lib.PL_discard_foreign_frame\nPL_discard_foreign_frame.argtypes = [fid_t]\nPL_discard_foreign_frame.restype = None\nPL_put_chars = _lib.PL_put_chars\nPL_put_chars.argtypes = [term_t, c_int, c_size_t, c_char_p]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_call.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_call.restype = c_int\nPL_call_predicate = _lib.PL_call_predicate\nPL_call_predicate.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_call_predicate.restype = c_int\nPL_discard_foreign_frame = _lib.PL_discard_foreign_frame\nPL_discard_foreign_frame.argtypes = [fid_t]\nPL_discard_foreign_frame.restype = None\nPL_put_chars = _lib.PL_put_chars\nPL_put_chars.argtypes = [term_t, c_int, c_size_t, c_char_p]\nPL_put_chars.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_call_predicate",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_call_predicate = _lib.PL_call_predicate\nPL_call_predicate.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_call_predicate.restype = c_int\nPL_discard_foreign_frame = _lib.PL_discard_foreign_frame\nPL_discard_foreign_frame.argtypes = [fid_t]\nPL_discard_foreign_frame.restype = None\nPL_put_chars = _lib.PL_put_chars\nPL_put_chars.argtypes = [term_t, c_int, c_size_t, c_char_p]\nPL_put_chars.restype = c_int\nPL_put_list_chars = _lib.PL_put_list_chars",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_call_predicate.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_call_predicate.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_call_predicate.restype = c_int\nPL_discard_foreign_frame = _lib.PL_discard_foreign_frame\nPL_discard_foreign_frame.argtypes = [fid_t]\nPL_discard_foreign_frame.restype = None\nPL_put_chars = _lib.PL_put_chars\nPL_put_chars.argtypes = [term_t, c_int, c_size_t, c_char_p]\nPL_put_chars.restype = c_int\nPL_put_list_chars = _lib.PL_put_list_chars\nPL_put_list_chars.argtypes = [term_t, c_char_p]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_call_predicate.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_call_predicate.restype = c_int\nPL_discard_foreign_frame = _lib.PL_discard_foreign_frame\nPL_discard_foreign_frame.argtypes = [fid_t]\nPL_discard_foreign_frame.restype = None\nPL_put_chars = _lib.PL_put_chars\nPL_put_chars.argtypes = [term_t, c_int, c_size_t, c_char_p]\nPL_put_chars.restype = c_int\nPL_put_list_chars = _lib.PL_put_list_chars\nPL_put_list_chars.argtypes = [term_t, c_char_p]\nPL_put_list_chars.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_discard_foreign_frame",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_discard_foreign_frame = _lib.PL_discard_foreign_frame\nPL_discard_foreign_frame.argtypes = [fid_t]\nPL_discard_foreign_frame.restype = None\nPL_put_chars = _lib.PL_put_chars\nPL_put_chars.argtypes = [term_t, c_int, c_size_t, c_char_p]\nPL_put_chars.restype = c_int\nPL_put_list_chars = _lib.PL_put_list_chars\nPL_put_list_chars.argtypes = [term_t, c_char_p]\nPL_put_list_chars.restype = c_int\nPL_put_list_chars = check_strings(1, None)(PL_put_list_chars)",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_discard_foreign_frame.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_discard_foreign_frame.argtypes = [fid_t]\nPL_discard_foreign_frame.restype = None\nPL_put_chars = _lib.PL_put_chars\nPL_put_chars.argtypes = [term_t, c_int, c_size_t, c_char_p]\nPL_put_chars.restype = c_int\nPL_put_list_chars = _lib.PL_put_list_chars\nPL_put_list_chars.argtypes = [term_t, c_char_p]\nPL_put_list_chars.restype = c_int\nPL_put_list_chars = check_strings(1, None)(PL_put_list_chars)\n#PL_EXPORT(void)                PL_register_atom(atom_t a);",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_discard_foreign_frame.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_discard_foreign_frame.restype = None\nPL_put_chars = _lib.PL_put_chars\nPL_put_chars.argtypes = [term_t, c_int, c_size_t, c_char_p]\nPL_put_chars.restype = c_int\nPL_put_list_chars = _lib.PL_put_list_chars\nPL_put_list_chars.argtypes = [term_t, c_char_p]\nPL_put_list_chars.restype = c_int\nPL_put_list_chars = check_strings(1, None)(PL_put_list_chars)\n#PL_EXPORT(void)                PL_register_atom(atom_t a);\nPL_register_atom = _lib.PL_register_atom",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_chars = _lib.PL_put_chars\nPL_put_chars.argtypes = [term_t, c_int, c_size_t, c_char_p]\nPL_put_chars.restype = c_int\nPL_put_list_chars = _lib.PL_put_list_chars\nPL_put_list_chars.argtypes = [term_t, c_char_p]\nPL_put_list_chars.restype = c_int\nPL_put_list_chars = check_strings(1, None)(PL_put_list_chars)\n#PL_EXPORT(void)                PL_register_atom(atom_t a);\nPL_register_atom = _lib.PL_register_atom\nPL_register_atom.argtypes = [atom_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_chars.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_chars.argtypes = [term_t, c_int, c_size_t, c_char_p]\nPL_put_chars.restype = c_int\nPL_put_list_chars = _lib.PL_put_list_chars\nPL_put_list_chars.argtypes = [term_t, c_char_p]\nPL_put_list_chars.restype = c_int\nPL_put_list_chars = check_strings(1, None)(PL_put_list_chars)\n#PL_EXPORT(void)                PL_register_atom(atom_t a);\nPL_register_atom = _lib.PL_register_atom\nPL_register_atom.argtypes = [atom_t]\nPL_register_atom.restype = None",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_chars.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_chars.restype = c_int\nPL_put_list_chars = _lib.PL_put_list_chars\nPL_put_list_chars.argtypes = [term_t, c_char_p]\nPL_put_list_chars.restype = c_int\nPL_put_list_chars = check_strings(1, None)(PL_put_list_chars)\n#PL_EXPORT(void)                PL_register_atom(atom_t a);\nPL_register_atom = _lib.PL_register_atom\nPL_register_atom.argtypes = [atom_t]\nPL_register_atom.restype = None\n#PL_EXPORT(void)                PL_unregister_atom(atom_t a);",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_list_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_list_chars = _lib.PL_put_list_chars\nPL_put_list_chars.argtypes = [term_t, c_char_p]\nPL_put_list_chars.restype = c_int\nPL_put_list_chars = check_strings(1, None)(PL_put_list_chars)\n#PL_EXPORT(void)                PL_register_atom(atom_t a);\nPL_register_atom = _lib.PL_register_atom\nPL_register_atom.argtypes = [atom_t]\nPL_register_atom.restype = None\n#PL_EXPORT(void)                PL_unregister_atom(atom_t a);\nPL_unregister_atom = _lib.PL_unregister_atom",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_list_chars.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_list_chars.argtypes = [term_t, c_char_p]\nPL_put_list_chars.restype = c_int\nPL_put_list_chars = check_strings(1, None)(PL_put_list_chars)\n#PL_EXPORT(void)                PL_register_atom(atom_t a);\nPL_register_atom = _lib.PL_register_atom\nPL_register_atom.argtypes = [atom_t]\nPL_register_atom.restype = None\n#PL_EXPORT(void)                PL_unregister_atom(atom_t a);\nPL_unregister_atom = _lib.PL_unregister_atom\nPL_unregister_atom.argtypes = [atom_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_list_chars.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_list_chars.restype = c_int\nPL_put_list_chars = check_strings(1, None)(PL_put_list_chars)\n#PL_EXPORT(void)                PL_register_atom(atom_t a);\nPL_register_atom = _lib.PL_register_atom\nPL_register_atom.argtypes = [atom_t]\nPL_register_atom.restype = None\n#PL_EXPORT(void)                PL_unregister_atom(atom_t a);\nPL_unregister_atom = _lib.PL_unregister_atom\nPL_unregister_atom.argtypes = [atom_t]\nPL_unregister_atom.restype = None",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_list_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_list_chars = check_strings(1, None)(PL_put_list_chars)\n#PL_EXPORT(void)                PL_register_atom(atom_t a);\nPL_register_atom = _lib.PL_register_atom\nPL_register_atom.argtypes = [atom_t]\nPL_register_atom.restype = None\n#PL_EXPORT(void)                PL_unregister_atom(atom_t a);\nPL_unregister_atom = _lib.PL_unregister_atom\nPL_unregister_atom.argtypes = [atom_t]\nPL_unregister_atom.restype = None\n#PL_EXPORT(atom_t)      PL_functor_name(functor_t f);",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_register_atom",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_register_atom = _lib.PL_register_atom\nPL_register_atom.argtypes = [atom_t]\nPL_register_atom.restype = None\n#PL_EXPORT(void)                PL_unregister_atom(atom_t a);\nPL_unregister_atom = _lib.PL_unregister_atom\nPL_unregister_atom.argtypes = [atom_t]\nPL_unregister_atom.restype = None\n#PL_EXPORT(atom_t)      PL_functor_name(functor_t f);\nPL_functor_name = _lib.PL_functor_name\nPL_functor_name.argtypes = [functor_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_register_atom.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_register_atom.argtypes = [atom_t]\nPL_register_atom.restype = None\n#PL_EXPORT(void)                PL_unregister_atom(atom_t a);\nPL_unregister_atom = _lib.PL_unregister_atom\nPL_unregister_atom.argtypes = [atom_t]\nPL_unregister_atom.restype = None\n#PL_EXPORT(atom_t)      PL_functor_name(functor_t f);\nPL_functor_name = _lib.PL_functor_name\nPL_functor_name.argtypes = [functor_t]\nPL_functor_name.restype = atom_t",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_register_atom.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_register_atom.restype = None\n#PL_EXPORT(void)                PL_unregister_atom(atom_t a);\nPL_unregister_atom = _lib.PL_unregister_atom\nPL_unregister_atom.argtypes = [atom_t]\nPL_unregister_atom.restype = None\n#PL_EXPORT(atom_t)      PL_functor_name(functor_t f);\nPL_functor_name = _lib.PL_functor_name\nPL_functor_name.argtypes = [functor_t]\nPL_functor_name.restype = atom_t\n#PL_EXPORT(int)         PL_functor_arity(functor_t f);",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unregister_atom",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unregister_atom = _lib.PL_unregister_atom\nPL_unregister_atom.argtypes = [atom_t]\nPL_unregister_atom.restype = None\n#PL_EXPORT(atom_t)      PL_functor_name(functor_t f);\nPL_functor_name = _lib.PL_functor_name\nPL_functor_name.argtypes = [functor_t]\nPL_functor_name.restype = atom_t\n#PL_EXPORT(int)         PL_functor_arity(functor_t f);\nPL_functor_arity = _lib.PL_functor_arity\nPL_functor_arity.argtypes = [functor_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unregister_atom.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unregister_atom.argtypes = [atom_t]\nPL_unregister_atom.restype = None\n#PL_EXPORT(atom_t)      PL_functor_name(functor_t f);\nPL_functor_name = _lib.PL_functor_name\nPL_functor_name.argtypes = [functor_t]\nPL_functor_name.restype = atom_t\n#PL_EXPORT(int)         PL_functor_arity(functor_t f);\nPL_functor_arity = _lib.PL_functor_arity\nPL_functor_arity.argtypes = [functor_t]\nPL_functor_arity.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unregister_atom.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unregister_atom.restype = None\n#PL_EXPORT(atom_t)      PL_functor_name(functor_t f);\nPL_functor_name = _lib.PL_functor_name\nPL_functor_name.argtypes = [functor_t]\nPL_functor_name.restype = atom_t\n#PL_EXPORT(int)         PL_functor_arity(functor_t f);\nPL_functor_arity = _lib.PL_functor_arity\nPL_functor_arity.argtypes = [functor_t]\nPL_functor_arity.restype = c_int\n#                       /* Get C-values from Prolog terms */",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_functor_name",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_functor_name = _lib.PL_functor_name\nPL_functor_name.argtypes = [functor_t]\nPL_functor_name.restype = atom_t\n#PL_EXPORT(int)         PL_functor_arity(functor_t f);\nPL_functor_arity = _lib.PL_functor_arity\nPL_functor_arity.argtypes = [functor_t]\nPL_functor_arity.restype = c_int\n#                       /* Get C-values from Prolog terms */\n#PL_EXPORT(int)         PL_get_atom(term_t t, atom_t *a);\nPL_get_atom = _lib.PL_get_atom",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_functor_name.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_functor_name.argtypes = [functor_t]\nPL_functor_name.restype = atom_t\n#PL_EXPORT(int)         PL_functor_arity(functor_t f);\nPL_functor_arity = _lib.PL_functor_arity\nPL_functor_arity.argtypes = [functor_t]\nPL_functor_arity.restype = c_int\n#                       /* Get C-values from Prolog terms */\n#PL_EXPORT(int)         PL_get_atom(term_t t, atom_t *a);\nPL_get_atom = _lib.PL_get_atom\nPL_get_atom.argtypes = [term_t, POINTER(atom_t)]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_functor_name.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_functor_name.restype = atom_t\n#PL_EXPORT(int)         PL_functor_arity(functor_t f);\nPL_functor_arity = _lib.PL_functor_arity\nPL_functor_arity.argtypes = [functor_t]\nPL_functor_arity.restype = c_int\n#                       /* Get C-values from Prolog terms */\n#PL_EXPORT(int)         PL_get_atom(term_t t, atom_t *a);\nPL_get_atom = _lib.PL_get_atom\nPL_get_atom.argtypes = [term_t, POINTER(atom_t)]\nPL_get_atom.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_functor_arity",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_functor_arity = _lib.PL_functor_arity\nPL_functor_arity.argtypes = [functor_t]\nPL_functor_arity.restype = c_int\n#                       /* Get C-values from Prolog terms */\n#PL_EXPORT(int)         PL_get_atom(term_t t, atom_t *a);\nPL_get_atom = _lib.PL_get_atom\nPL_get_atom.argtypes = [term_t, POINTER(atom_t)]\nPL_get_atom.restype = c_int\n#PL_EXPORT(int)         PL_get_bool(term_t t, int *value);\nPL_get_bool = _lib.PL_get_bool",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_functor_arity.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_functor_arity.argtypes = [functor_t]\nPL_functor_arity.restype = c_int\n#                       /* Get C-values from Prolog terms */\n#PL_EXPORT(int)         PL_get_atom(term_t t, atom_t *a);\nPL_get_atom = _lib.PL_get_atom\nPL_get_atom.argtypes = [term_t, POINTER(atom_t)]\nPL_get_atom.restype = c_int\n#PL_EXPORT(int)         PL_get_bool(term_t t, int *value);\nPL_get_bool = _lib.PL_get_bool\nPL_get_bool.argtypes = [term_t, POINTER(c_int)]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_functor_arity.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_functor_arity.restype = c_int\n#                       /* Get C-values from Prolog terms */\n#PL_EXPORT(int)         PL_get_atom(term_t t, atom_t *a);\nPL_get_atom = _lib.PL_get_atom\nPL_get_atom.argtypes = [term_t, POINTER(atom_t)]\nPL_get_atom.restype = c_int\n#PL_EXPORT(int)         PL_get_bool(term_t t, int *value);\nPL_get_bool = _lib.PL_get_bool\nPL_get_bool.argtypes = [term_t, POINTER(c_int)]\nPL_get_bool.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_atom",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_atom = _lib.PL_get_atom\nPL_get_atom.argtypes = [term_t, POINTER(atom_t)]\nPL_get_atom.restype = c_int\n#PL_EXPORT(int)         PL_get_bool(term_t t, int *value);\nPL_get_bool = _lib.PL_get_bool\nPL_get_bool.argtypes = [term_t, POINTER(c_int)]\nPL_get_bool.restype = c_int\n#PL_EXPORT(int)         PL_get_atom_chars(term_t t, char **a);\nPL_get_atom_chars = _lib.PL_get_atom_chars  # FIXME\nPL_get_atom_chars.argtypes = [term_t, POINTER(c_char_p)]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_atom.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_atom.argtypes = [term_t, POINTER(atom_t)]\nPL_get_atom.restype = c_int\n#PL_EXPORT(int)         PL_get_bool(term_t t, int *value);\nPL_get_bool = _lib.PL_get_bool\nPL_get_bool.argtypes = [term_t, POINTER(c_int)]\nPL_get_bool.restype = c_int\n#PL_EXPORT(int)         PL_get_atom_chars(term_t t, char **a);\nPL_get_atom_chars = _lib.PL_get_atom_chars  # FIXME\nPL_get_atom_chars.argtypes = [term_t, POINTER(c_char_p)]\nPL_get_atom_chars.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_atom.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_atom.restype = c_int\n#PL_EXPORT(int)         PL_get_bool(term_t t, int *value);\nPL_get_bool = _lib.PL_get_bool\nPL_get_bool.argtypes = [term_t, POINTER(c_int)]\nPL_get_bool.restype = c_int\n#PL_EXPORT(int)         PL_get_atom_chars(term_t t, char **a);\nPL_get_atom_chars = _lib.PL_get_atom_chars  # FIXME\nPL_get_atom_chars.argtypes = [term_t, POINTER(c_char_p)]\nPL_get_atom_chars.restype = c_int\nPL_get_atom_chars = check_strings(None, 1)(PL_get_atom_chars)",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_bool",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_bool = _lib.PL_get_bool\nPL_get_bool.argtypes = [term_t, POINTER(c_int)]\nPL_get_bool.restype = c_int\n#PL_EXPORT(int)         PL_get_atom_chars(term_t t, char **a);\nPL_get_atom_chars = _lib.PL_get_atom_chars  # FIXME\nPL_get_atom_chars.argtypes = [term_t, POINTER(c_char_p)]\nPL_get_atom_chars.restype = c_int\nPL_get_atom_chars = check_strings(None, 1)(PL_get_atom_chars)\nPL_get_string_chars = _lib.PL_get_string\nPL_get_string_chars.argtypes = [term_t, POINTER(c_char_p), c_int_p]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_bool.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_bool.argtypes = [term_t, POINTER(c_int)]\nPL_get_bool.restype = c_int\n#PL_EXPORT(int)         PL_get_atom_chars(term_t t, char **a);\nPL_get_atom_chars = _lib.PL_get_atom_chars  # FIXME\nPL_get_atom_chars.argtypes = [term_t, POINTER(c_char_p)]\nPL_get_atom_chars.restype = c_int\nPL_get_atom_chars = check_strings(None, 1)(PL_get_atom_chars)\nPL_get_string_chars = _lib.PL_get_string\nPL_get_string_chars.argtypes = [term_t, POINTER(c_char_p), c_int_p]\nPL_get_chars = _lib.PL_get_chars  # FIXME:",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_bool.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_bool.restype = c_int\n#PL_EXPORT(int)         PL_get_atom_chars(term_t t, char **a);\nPL_get_atom_chars = _lib.PL_get_atom_chars  # FIXME\nPL_get_atom_chars.argtypes = [term_t, POINTER(c_char_p)]\nPL_get_atom_chars.restype = c_int\nPL_get_atom_chars = check_strings(None, 1)(PL_get_atom_chars)\nPL_get_string_chars = _lib.PL_get_string\nPL_get_string_chars.argtypes = [term_t, POINTER(c_char_p), c_int_p]\nPL_get_chars = _lib.PL_get_chars  # FIXME:\nPL_get_chars.argtypes = [term_t, POINTER(c_char_p), c_uint]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_atom_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_atom_chars = _lib.PL_get_atom_chars  # FIXME\nPL_get_atom_chars.argtypes = [term_t, POINTER(c_char_p)]\nPL_get_atom_chars.restype = c_int\nPL_get_atom_chars = check_strings(None, 1)(PL_get_atom_chars)\nPL_get_string_chars = _lib.PL_get_string\nPL_get_string_chars.argtypes = [term_t, POINTER(c_char_p), c_int_p]\nPL_get_chars = _lib.PL_get_chars  # FIXME:\nPL_get_chars.argtypes = [term_t, POINTER(c_char_p), c_uint]\nPL_get_chars.restype = c_int\nPL_get_chars = check_strings(None, 1)(PL_get_chars)",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_atom_chars.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_atom_chars.argtypes = [term_t, POINTER(c_char_p)]\nPL_get_atom_chars.restype = c_int\nPL_get_atom_chars = check_strings(None, 1)(PL_get_atom_chars)\nPL_get_string_chars = _lib.PL_get_string\nPL_get_string_chars.argtypes = [term_t, POINTER(c_char_p), c_int_p]\nPL_get_chars = _lib.PL_get_chars  # FIXME:\nPL_get_chars.argtypes = [term_t, POINTER(c_char_p), c_uint]\nPL_get_chars.restype = c_int\nPL_get_chars = check_strings(None, 1)(PL_get_chars)\nPL_get_integer = _lib.PL_get_integer",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_atom_chars.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_atom_chars.restype = c_int\nPL_get_atom_chars = check_strings(None, 1)(PL_get_atom_chars)\nPL_get_string_chars = _lib.PL_get_string\nPL_get_string_chars.argtypes = [term_t, POINTER(c_char_p), c_int_p]\nPL_get_chars = _lib.PL_get_chars  # FIXME:\nPL_get_chars.argtypes = [term_t, POINTER(c_char_p), c_uint]\nPL_get_chars.restype = c_int\nPL_get_chars = check_strings(None, 1)(PL_get_chars)\nPL_get_integer = _lib.PL_get_integer\nPL_get_integer.argtypes = [term_t, POINTER(c_int)]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_atom_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_atom_chars = check_strings(None, 1)(PL_get_atom_chars)\nPL_get_string_chars = _lib.PL_get_string\nPL_get_string_chars.argtypes = [term_t, POINTER(c_char_p), c_int_p]\nPL_get_chars = _lib.PL_get_chars  # FIXME:\nPL_get_chars.argtypes = [term_t, POINTER(c_char_p), c_uint]\nPL_get_chars.restype = c_int\nPL_get_chars = check_strings(None, 1)(PL_get_chars)\nPL_get_integer = _lib.PL_get_integer\nPL_get_integer.argtypes = [term_t, POINTER(c_int)]\nPL_get_integer.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_string_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_string_chars = _lib.PL_get_string\nPL_get_string_chars.argtypes = [term_t, POINTER(c_char_p), c_int_p]\nPL_get_chars = _lib.PL_get_chars  # FIXME:\nPL_get_chars.argtypes = [term_t, POINTER(c_char_p), c_uint]\nPL_get_chars.restype = c_int\nPL_get_chars = check_strings(None, 1)(PL_get_chars)\nPL_get_integer = _lib.PL_get_integer\nPL_get_integer.argtypes = [term_t, POINTER(c_int)]\nPL_get_integer.restype = c_int\nPL_get_long = _lib.PL_get_long",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_string_chars.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_string_chars.argtypes = [term_t, POINTER(c_char_p), c_int_p]\nPL_get_chars = _lib.PL_get_chars  # FIXME:\nPL_get_chars.argtypes = [term_t, POINTER(c_char_p), c_uint]\nPL_get_chars.restype = c_int\nPL_get_chars = check_strings(None, 1)(PL_get_chars)\nPL_get_integer = _lib.PL_get_integer\nPL_get_integer.argtypes = [term_t, POINTER(c_int)]\nPL_get_integer.restype = c_int\nPL_get_long = _lib.PL_get_long\nPL_get_long.argtypes = [term_t, POINTER(c_long)]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_chars = _lib.PL_get_chars  # FIXME:\nPL_get_chars.argtypes = [term_t, POINTER(c_char_p), c_uint]\nPL_get_chars.restype = c_int\nPL_get_chars = check_strings(None, 1)(PL_get_chars)\nPL_get_integer = _lib.PL_get_integer\nPL_get_integer.argtypes = [term_t, POINTER(c_int)]\nPL_get_integer.restype = c_int\nPL_get_long = _lib.PL_get_long\nPL_get_long.argtypes = [term_t, POINTER(c_long)]\nPL_get_long.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_chars.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_chars.argtypes = [term_t, POINTER(c_char_p), c_uint]\nPL_get_chars.restype = c_int\nPL_get_chars = check_strings(None, 1)(PL_get_chars)\nPL_get_integer = _lib.PL_get_integer\nPL_get_integer.argtypes = [term_t, POINTER(c_int)]\nPL_get_integer.restype = c_int\nPL_get_long = _lib.PL_get_long\nPL_get_long.argtypes = [term_t, POINTER(c_long)]\nPL_get_long.restype = c_int\nPL_get_float = _lib.PL_get_float",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_chars.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_chars.restype = c_int\nPL_get_chars = check_strings(None, 1)(PL_get_chars)\nPL_get_integer = _lib.PL_get_integer\nPL_get_integer.argtypes = [term_t, POINTER(c_int)]\nPL_get_integer.restype = c_int\nPL_get_long = _lib.PL_get_long\nPL_get_long.argtypes = [term_t, POINTER(c_long)]\nPL_get_long.restype = c_int\nPL_get_float = _lib.PL_get_float\nPL_get_float.argtypes = [term_t, c_double_p]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_chars = check_strings(None, 1)(PL_get_chars)\nPL_get_integer = _lib.PL_get_integer\nPL_get_integer.argtypes = [term_t, POINTER(c_int)]\nPL_get_integer.restype = c_int\nPL_get_long = _lib.PL_get_long\nPL_get_long.argtypes = [term_t, POINTER(c_long)]\nPL_get_long.restype = c_int\nPL_get_float = _lib.PL_get_float\nPL_get_float.argtypes = [term_t, c_double_p]\nPL_get_float.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_integer",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_integer = _lib.PL_get_integer\nPL_get_integer.argtypes = [term_t, POINTER(c_int)]\nPL_get_integer.restype = c_int\nPL_get_long = _lib.PL_get_long\nPL_get_long.argtypes = [term_t, POINTER(c_long)]\nPL_get_long.restype = c_int\nPL_get_float = _lib.PL_get_float\nPL_get_float.argtypes = [term_t, c_double_p]\nPL_get_float.restype = c_int\nPL_get_functor = _lib.PL_get_functor",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_integer.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_integer.argtypes = [term_t, POINTER(c_int)]\nPL_get_integer.restype = c_int\nPL_get_long = _lib.PL_get_long\nPL_get_long.argtypes = [term_t, POINTER(c_long)]\nPL_get_long.restype = c_int\nPL_get_float = _lib.PL_get_float\nPL_get_float.argtypes = [term_t, c_double_p]\nPL_get_float.restype = c_int\nPL_get_functor = _lib.PL_get_functor\nPL_get_functor.argtypes = [term_t, POINTER(functor_t)]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_integer.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_integer.restype = c_int\nPL_get_long = _lib.PL_get_long\nPL_get_long.argtypes = [term_t, POINTER(c_long)]\nPL_get_long.restype = c_int\nPL_get_float = _lib.PL_get_float\nPL_get_float.argtypes = [term_t, c_double_p]\nPL_get_float.restype = c_int\nPL_get_functor = _lib.PL_get_functor\nPL_get_functor.argtypes = [term_t, POINTER(functor_t)]\nPL_get_functor.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_long",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_long = _lib.PL_get_long\nPL_get_long.argtypes = [term_t, POINTER(c_long)]\nPL_get_long.restype = c_int\nPL_get_float = _lib.PL_get_float\nPL_get_float.argtypes = [term_t, c_double_p]\nPL_get_float.restype = c_int\nPL_get_functor = _lib.PL_get_functor\nPL_get_functor.argtypes = [term_t, POINTER(functor_t)]\nPL_get_functor.restype = c_int\nPL_get_name_arity = _lib.PL_get_name_arity",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_long.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_long.argtypes = [term_t, POINTER(c_long)]\nPL_get_long.restype = c_int\nPL_get_float = _lib.PL_get_float\nPL_get_float.argtypes = [term_t, c_double_p]\nPL_get_float.restype = c_int\nPL_get_functor = _lib.PL_get_functor\nPL_get_functor.argtypes = [term_t, POINTER(functor_t)]\nPL_get_functor.restype = c_int\nPL_get_name_arity = _lib.PL_get_name_arity\nPL_get_name_arity.argtypes = [term_t, POINTER(atom_t), POINTER(c_int)]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_long.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_long.restype = c_int\nPL_get_float = _lib.PL_get_float\nPL_get_float.argtypes = [term_t, c_double_p]\nPL_get_float.restype = c_int\nPL_get_functor = _lib.PL_get_functor\nPL_get_functor.argtypes = [term_t, POINTER(functor_t)]\nPL_get_functor.restype = c_int\nPL_get_name_arity = _lib.PL_get_name_arity\nPL_get_name_arity.argtypes = [term_t, POINTER(atom_t), POINTER(c_int)]\nPL_get_name_arity.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_float",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_float = _lib.PL_get_float\nPL_get_float.argtypes = [term_t, c_double_p]\nPL_get_float.restype = c_int\nPL_get_functor = _lib.PL_get_functor\nPL_get_functor.argtypes = [term_t, POINTER(functor_t)]\nPL_get_functor.restype = c_int\nPL_get_name_arity = _lib.PL_get_name_arity\nPL_get_name_arity.argtypes = [term_t, POINTER(atom_t), POINTER(c_int)]\nPL_get_name_arity.restype = c_int\nPL_get_arg = _lib.PL_get_arg",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_float.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_float.argtypes = [term_t, c_double_p]\nPL_get_float.restype = c_int\nPL_get_functor = _lib.PL_get_functor\nPL_get_functor.argtypes = [term_t, POINTER(functor_t)]\nPL_get_functor.restype = c_int\nPL_get_name_arity = _lib.PL_get_name_arity\nPL_get_name_arity.argtypes = [term_t, POINTER(atom_t), POINTER(c_int)]\nPL_get_name_arity.restype = c_int\nPL_get_arg = _lib.PL_get_arg\nPL_get_arg.argtypes = [c_int, term_t, term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_float.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_float.restype = c_int\nPL_get_functor = _lib.PL_get_functor\nPL_get_functor.argtypes = [term_t, POINTER(functor_t)]\nPL_get_functor.restype = c_int\nPL_get_name_arity = _lib.PL_get_name_arity\nPL_get_name_arity.argtypes = [term_t, POINTER(atom_t), POINTER(c_int)]\nPL_get_name_arity.restype = c_int\nPL_get_arg = _lib.PL_get_arg\nPL_get_arg.argtypes = [c_int, term_t, term_t]\nPL_get_arg.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_functor",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_functor = _lib.PL_get_functor\nPL_get_functor.argtypes = [term_t, POINTER(functor_t)]\nPL_get_functor.restype = c_int\nPL_get_name_arity = _lib.PL_get_name_arity\nPL_get_name_arity.argtypes = [term_t, POINTER(atom_t), POINTER(c_int)]\nPL_get_name_arity.restype = c_int\nPL_get_arg = _lib.PL_get_arg\nPL_get_arg.argtypes = [c_int, term_t, term_t]\nPL_get_arg.restype = c_int\nPL_get_head = _lib.PL_get_head",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_functor.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_functor.argtypes = [term_t, POINTER(functor_t)]\nPL_get_functor.restype = c_int\nPL_get_name_arity = _lib.PL_get_name_arity\nPL_get_name_arity.argtypes = [term_t, POINTER(atom_t), POINTER(c_int)]\nPL_get_name_arity.restype = c_int\nPL_get_arg = _lib.PL_get_arg\nPL_get_arg.argtypes = [c_int, term_t, term_t]\nPL_get_arg.restype = c_int\nPL_get_head = _lib.PL_get_head\nPL_get_head.argtypes = [term_t, term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_functor.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_functor.restype = c_int\nPL_get_name_arity = _lib.PL_get_name_arity\nPL_get_name_arity.argtypes = [term_t, POINTER(atom_t), POINTER(c_int)]\nPL_get_name_arity.restype = c_int\nPL_get_arg = _lib.PL_get_arg\nPL_get_arg.argtypes = [c_int, term_t, term_t]\nPL_get_arg.restype = c_int\nPL_get_head = _lib.PL_get_head\nPL_get_head.argtypes = [term_t, term_t]\nPL_get_head.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_name_arity",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_name_arity = _lib.PL_get_name_arity\nPL_get_name_arity.argtypes = [term_t, POINTER(atom_t), POINTER(c_int)]\nPL_get_name_arity.restype = c_int\nPL_get_arg = _lib.PL_get_arg\nPL_get_arg.argtypes = [c_int, term_t, term_t]\nPL_get_arg.restype = c_int\nPL_get_head = _lib.PL_get_head\nPL_get_head.argtypes = [term_t, term_t]\nPL_get_head.restype = c_int\nPL_get_tail = _lib.PL_get_tail",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_name_arity.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_name_arity.argtypes = [term_t, POINTER(atom_t), POINTER(c_int)]\nPL_get_name_arity.restype = c_int\nPL_get_arg = _lib.PL_get_arg\nPL_get_arg.argtypes = [c_int, term_t, term_t]\nPL_get_arg.restype = c_int\nPL_get_head = _lib.PL_get_head\nPL_get_head.argtypes = [term_t, term_t]\nPL_get_head.restype = c_int\nPL_get_tail = _lib.PL_get_tail\nPL_get_tail.argtypes = [term_t, term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_name_arity.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_name_arity.restype = c_int\nPL_get_arg = _lib.PL_get_arg\nPL_get_arg.argtypes = [c_int, term_t, term_t]\nPL_get_arg.restype = c_int\nPL_get_head = _lib.PL_get_head\nPL_get_head.argtypes = [term_t, term_t]\nPL_get_head.restype = c_int\nPL_get_tail = _lib.PL_get_tail\nPL_get_tail.argtypes = [term_t, term_t]\nPL_get_tail.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_arg",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_arg = _lib.PL_get_arg\nPL_get_arg.argtypes = [c_int, term_t, term_t]\nPL_get_arg.restype = c_int\nPL_get_head = _lib.PL_get_head\nPL_get_head.argtypes = [term_t, term_t]\nPL_get_head.restype = c_int\nPL_get_tail = _lib.PL_get_tail\nPL_get_tail.argtypes = [term_t, term_t]\nPL_get_tail.restype = c_int\nPL_get_nil = _lib.PL_get_nil",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_arg.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_arg.argtypes = [c_int, term_t, term_t]\nPL_get_arg.restype = c_int\nPL_get_head = _lib.PL_get_head\nPL_get_head.argtypes = [term_t, term_t]\nPL_get_head.restype = c_int\nPL_get_tail = _lib.PL_get_tail\nPL_get_tail.argtypes = [term_t, term_t]\nPL_get_tail.restype = c_int\nPL_get_nil = _lib.PL_get_nil\nPL_get_nil.argtypes = [term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_arg.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_arg.restype = c_int\nPL_get_head = _lib.PL_get_head\nPL_get_head.argtypes = [term_t, term_t]\nPL_get_head.restype = c_int\nPL_get_tail = _lib.PL_get_tail\nPL_get_tail.argtypes = [term_t, term_t]\nPL_get_tail.restype = c_int\nPL_get_nil = _lib.PL_get_nil\nPL_get_nil.argtypes = [term_t]\nPL_get_nil.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_head",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_head = _lib.PL_get_head\nPL_get_head.argtypes = [term_t, term_t]\nPL_get_head.restype = c_int\nPL_get_tail = _lib.PL_get_tail\nPL_get_tail.argtypes = [term_t, term_t]\nPL_get_tail.restype = c_int\nPL_get_nil = _lib.PL_get_nil\nPL_get_nil.argtypes = [term_t]\nPL_get_nil.restype = c_int\nPL_put_atom_chars = _lib.PL_put_atom_chars",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_head.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_head.argtypes = [term_t, term_t]\nPL_get_head.restype = c_int\nPL_get_tail = _lib.PL_get_tail\nPL_get_tail.argtypes = [term_t, term_t]\nPL_get_tail.restype = c_int\nPL_get_nil = _lib.PL_get_nil\nPL_get_nil.argtypes = [term_t]\nPL_get_nil.restype = c_int\nPL_put_atom_chars = _lib.PL_put_atom_chars\nPL_put_atom_chars.argtypes = [term_t, c_char_p]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_head.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_head.restype = c_int\nPL_get_tail = _lib.PL_get_tail\nPL_get_tail.argtypes = [term_t, term_t]\nPL_get_tail.restype = c_int\nPL_get_nil = _lib.PL_get_nil\nPL_get_nil.argtypes = [term_t]\nPL_get_nil.restype = c_int\nPL_put_atom_chars = _lib.PL_put_atom_chars\nPL_put_atom_chars.argtypes = [term_t, c_char_p]\nPL_put_atom_chars.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_tail",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_tail = _lib.PL_get_tail\nPL_get_tail.argtypes = [term_t, term_t]\nPL_get_tail.restype = c_int\nPL_get_nil = _lib.PL_get_nil\nPL_get_nil.argtypes = [term_t]\nPL_get_nil.restype = c_int\nPL_put_atom_chars = _lib.PL_put_atom_chars\nPL_put_atom_chars.argtypes = [term_t, c_char_p]\nPL_put_atom_chars.restype = c_int\nPL_put_atom_chars = check_strings(1, None)(PL_put_atom_chars)",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_tail.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_tail.argtypes = [term_t, term_t]\nPL_get_tail.restype = c_int\nPL_get_nil = _lib.PL_get_nil\nPL_get_nil.argtypes = [term_t]\nPL_get_nil.restype = c_int\nPL_put_atom_chars = _lib.PL_put_atom_chars\nPL_put_atom_chars.argtypes = [term_t, c_char_p]\nPL_put_atom_chars.restype = c_int\nPL_put_atom_chars = check_strings(1, None)(PL_put_atom_chars)\nPL_atom_chars = _lib.PL_atom_chars",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_tail.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_tail.restype = c_int\nPL_get_nil = _lib.PL_get_nil\nPL_get_nil.argtypes = [term_t]\nPL_get_nil.restype = c_int\nPL_put_atom_chars = _lib.PL_put_atom_chars\nPL_put_atom_chars.argtypes = [term_t, c_char_p]\nPL_put_atom_chars.restype = c_int\nPL_put_atom_chars = check_strings(1, None)(PL_put_atom_chars)\nPL_atom_chars = _lib.PL_atom_chars\nPL_atom_chars.argtypes = [atom_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_nil",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_nil = _lib.PL_get_nil\nPL_get_nil.argtypes = [term_t]\nPL_get_nil.restype = c_int\nPL_put_atom_chars = _lib.PL_put_atom_chars\nPL_put_atom_chars.argtypes = [term_t, c_char_p]\nPL_put_atom_chars.restype = c_int\nPL_put_atom_chars = check_strings(1, None)(PL_put_atom_chars)\nPL_atom_chars = _lib.PL_atom_chars\nPL_atom_chars.argtypes = [atom_t]\nPL_atom_chars.restype = c_char_p",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_nil.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_nil.argtypes = [term_t]\nPL_get_nil.restype = c_int\nPL_put_atom_chars = _lib.PL_put_atom_chars\nPL_put_atom_chars.argtypes = [term_t, c_char_p]\nPL_put_atom_chars.restype = c_int\nPL_put_atom_chars = check_strings(1, None)(PL_put_atom_chars)\nPL_atom_chars = _lib.PL_atom_chars\nPL_atom_chars.argtypes = [atom_t]\nPL_atom_chars.restype = c_char_p\nPL_atom_wchars = _lib.PL_atom_wchars",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_nil.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_nil.restype = c_int\nPL_put_atom_chars = _lib.PL_put_atom_chars\nPL_put_atom_chars.argtypes = [term_t, c_char_p]\nPL_put_atom_chars.restype = c_int\nPL_put_atom_chars = check_strings(1, None)(PL_put_atom_chars)\nPL_atom_chars = _lib.PL_atom_chars\nPL_atom_chars.argtypes = [atom_t]\nPL_atom_chars.restype = c_char_p\nPL_atom_wchars = _lib.PL_atom_wchars\nPL_atom_wchars.argtypes = [atom_t, POINTER(c_size_t)]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_atom_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_atom_chars = _lib.PL_put_atom_chars\nPL_put_atom_chars.argtypes = [term_t, c_char_p]\nPL_put_atom_chars.restype = c_int\nPL_put_atom_chars = check_strings(1, None)(PL_put_atom_chars)\nPL_atom_chars = _lib.PL_atom_chars\nPL_atom_chars.argtypes = [atom_t]\nPL_atom_chars.restype = c_char_p\nPL_atom_wchars = _lib.PL_atom_wchars\nPL_atom_wchars.argtypes = [atom_t, POINTER(c_size_t)]\nPL_atom_wchars.restype = c_wchar_p",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_atom_chars.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_atom_chars.argtypes = [term_t, c_char_p]\nPL_put_atom_chars.restype = c_int\nPL_put_atom_chars = check_strings(1, None)(PL_put_atom_chars)\nPL_atom_chars = _lib.PL_atom_chars\nPL_atom_chars.argtypes = [atom_t]\nPL_atom_chars.restype = c_char_p\nPL_atom_wchars = _lib.PL_atom_wchars\nPL_atom_wchars.argtypes = [atom_t, POINTER(c_size_t)]\nPL_atom_wchars.restype = c_wchar_p\nPL_predicate = _lib.PL_predicate",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_atom_chars.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_atom_chars.restype = c_int\nPL_put_atom_chars = check_strings(1, None)(PL_put_atom_chars)\nPL_atom_chars = _lib.PL_atom_chars\nPL_atom_chars.argtypes = [atom_t]\nPL_atom_chars.restype = c_char_p\nPL_atom_wchars = _lib.PL_atom_wchars\nPL_atom_wchars.argtypes = [atom_t, POINTER(c_size_t)]\nPL_atom_wchars.restype = c_wchar_p\nPL_predicate = _lib.PL_predicate\nPL_predicate.argtypes = [c_char_p, c_int, c_char_p]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_atom_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_atom_chars = check_strings(1, None)(PL_put_atom_chars)\nPL_atom_chars = _lib.PL_atom_chars\nPL_atom_chars.argtypes = [atom_t]\nPL_atom_chars.restype = c_char_p\nPL_atom_wchars = _lib.PL_atom_wchars\nPL_atom_wchars.argtypes = [atom_t, POINTER(c_size_t)]\nPL_atom_wchars.restype = c_wchar_p\nPL_predicate = _lib.PL_predicate\nPL_predicate.argtypes = [c_char_p, c_int, c_char_p]\nPL_predicate.restype = predicate_t",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_atom_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_atom_chars = _lib.PL_atom_chars\nPL_atom_chars.argtypes = [atom_t]\nPL_atom_chars.restype = c_char_p\nPL_atom_wchars = _lib.PL_atom_wchars\nPL_atom_wchars.argtypes = [atom_t, POINTER(c_size_t)]\nPL_atom_wchars.restype = c_wchar_p\nPL_predicate = _lib.PL_predicate\nPL_predicate.argtypes = [c_char_p, c_int, c_char_p]\nPL_predicate.restype = predicate_t\nPL_predicate = check_strings([0,2], None)(PL_predicate)",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_atom_chars.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_atom_chars.argtypes = [atom_t]\nPL_atom_chars.restype = c_char_p\nPL_atom_wchars = _lib.PL_atom_wchars\nPL_atom_wchars.argtypes = [atom_t, POINTER(c_size_t)]\nPL_atom_wchars.restype = c_wchar_p\nPL_predicate = _lib.PL_predicate\nPL_predicate.argtypes = [c_char_p, c_int, c_char_p]\nPL_predicate.restype = predicate_t\nPL_predicate = check_strings([0,2], None)(PL_predicate)\nPL_pred = _lib.PL_pred",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_atom_chars.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_atom_chars.restype = c_char_p\nPL_atom_wchars = _lib.PL_atom_wchars\nPL_atom_wchars.argtypes = [atom_t, POINTER(c_size_t)]\nPL_atom_wchars.restype = c_wchar_p\nPL_predicate = _lib.PL_predicate\nPL_predicate.argtypes = [c_char_p, c_int, c_char_p]\nPL_predicate.restype = predicate_t\nPL_predicate = check_strings([0,2], None)(PL_predicate)\nPL_pred = _lib.PL_pred\nPL_pred.argtypes = [functor_t, module_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_atom_wchars",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_atom_wchars = _lib.PL_atom_wchars\nPL_atom_wchars.argtypes = [atom_t, POINTER(c_size_t)]\nPL_atom_wchars.restype = c_wchar_p\nPL_predicate = _lib.PL_predicate\nPL_predicate.argtypes = [c_char_p, c_int, c_char_p]\nPL_predicate.restype = predicate_t\nPL_predicate = check_strings([0,2], None)(PL_predicate)\nPL_pred = _lib.PL_pred\nPL_pred.argtypes = [functor_t, module_t]\nPL_pred.restype = predicate_t",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_atom_wchars.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_atom_wchars.argtypes = [atom_t, POINTER(c_size_t)]\nPL_atom_wchars.restype = c_wchar_p\nPL_predicate = _lib.PL_predicate\nPL_predicate.argtypes = [c_char_p, c_int, c_char_p]\nPL_predicate.restype = predicate_t\nPL_predicate = check_strings([0,2], None)(PL_predicate)\nPL_pred = _lib.PL_pred\nPL_pred.argtypes = [functor_t, module_t]\nPL_pred.restype = predicate_t\nPL_open_query = _lib.PL_open_query",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_atom_wchars.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_atom_wchars.restype = c_wchar_p\nPL_predicate = _lib.PL_predicate\nPL_predicate.argtypes = [c_char_p, c_int, c_char_p]\nPL_predicate.restype = predicate_t\nPL_predicate = check_strings([0,2], None)(PL_predicate)\nPL_pred = _lib.PL_pred\nPL_pred.argtypes = [functor_t, module_t]\nPL_pred.restype = predicate_t\nPL_open_query = _lib.PL_open_query\nPL_open_query.argtypes = [module_t, c_int, predicate_t, term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_predicate",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_predicate = _lib.PL_predicate\nPL_predicate.argtypes = [c_char_p, c_int, c_char_p]\nPL_predicate.restype = predicate_t\nPL_predicate = check_strings([0,2], None)(PL_predicate)\nPL_pred = _lib.PL_pred\nPL_pred.argtypes = [functor_t, module_t]\nPL_pred.restype = predicate_t\nPL_open_query = _lib.PL_open_query\nPL_open_query.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_open_query.restype = qid_t",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_predicate.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_predicate.argtypes = [c_char_p, c_int, c_char_p]\nPL_predicate.restype = predicate_t\nPL_predicate = check_strings([0,2], None)(PL_predicate)\nPL_pred = _lib.PL_pred\nPL_pred.argtypes = [functor_t, module_t]\nPL_pred.restype = predicate_t\nPL_open_query = _lib.PL_open_query\nPL_open_query.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_open_query.restype = qid_t\nPL_next_solution = _lib.PL_next_solution",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_predicate.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_predicate.restype = predicate_t\nPL_predicate = check_strings([0,2], None)(PL_predicate)\nPL_pred = _lib.PL_pred\nPL_pred.argtypes = [functor_t, module_t]\nPL_pred.restype = predicate_t\nPL_open_query = _lib.PL_open_query\nPL_open_query.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_open_query.restype = qid_t\nPL_next_solution = _lib.PL_next_solution\nPL_next_solution.argtypes = [qid_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_predicate",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_predicate = check_strings([0,2], None)(PL_predicate)\nPL_pred = _lib.PL_pred\nPL_pred.argtypes = [functor_t, module_t]\nPL_pred.restype = predicate_t\nPL_open_query = _lib.PL_open_query\nPL_open_query.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_open_query.restype = qid_t\nPL_next_solution = _lib.PL_next_solution\nPL_next_solution.argtypes = [qid_t]\nPL_next_solution.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_pred",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_pred = _lib.PL_pred\nPL_pred.argtypes = [functor_t, module_t]\nPL_pred.restype = predicate_t\nPL_open_query = _lib.PL_open_query\nPL_open_query.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_open_query.restype = qid_t\nPL_next_solution = _lib.PL_next_solution\nPL_next_solution.argtypes = [qid_t]\nPL_next_solution.restype = c_int\nPL_copy_term_ref = _lib.PL_copy_term_ref",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_pred.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_pred.argtypes = [functor_t, module_t]\nPL_pred.restype = predicate_t\nPL_open_query = _lib.PL_open_query\nPL_open_query.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_open_query.restype = qid_t\nPL_next_solution = _lib.PL_next_solution\nPL_next_solution.argtypes = [qid_t]\nPL_next_solution.restype = c_int\nPL_copy_term_ref = _lib.PL_copy_term_ref\nPL_copy_term_ref.argtypes = [term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_pred.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_pred.restype = predicate_t\nPL_open_query = _lib.PL_open_query\nPL_open_query.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_open_query.restype = qid_t\nPL_next_solution = _lib.PL_next_solution\nPL_next_solution.argtypes = [qid_t]\nPL_next_solution.restype = c_int\nPL_copy_term_ref = _lib.PL_copy_term_ref\nPL_copy_term_ref.argtypes = [term_t]\nPL_copy_term_ref.restype = term_t",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_open_query",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_open_query = _lib.PL_open_query\nPL_open_query.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_open_query.restype = qid_t\nPL_next_solution = _lib.PL_next_solution\nPL_next_solution.argtypes = [qid_t]\nPL_next_solution.restype = c_int\nPL_copy_term_ref = _lib.PL_copy_term_ref\nPL_copy_term_ref.argtypes = [term_t]\nPL_copy_term_ref.restype = term_t\nPL_get_list = _lib.PL_get_list",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_open_query.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_open_query.argtypes = [module_t, c_int, predicate_t, term_t]\nPL_open_query.restype = qid_t\nPL_next_solution = _lib.PL_next_solution\nPL_next_solution.argtypes = [qid_t]\nPL_next_solution.restype = c_int\nPL_copy_term_ref = _lib.PL_copy_term_ref\nPL_copy_term_ref.argtypes = [term_t]\nPL_copy_term_ref.restype = term_t\nPL_get_list = _lib.PL_get_list\nPL_get_list.argtypes = [term_t, term_t, term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_open_query.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_open_query.restype = qid_t\nPL_next_solution = _lib.PL_next_solution\nPL_next_solution.argtypes = [qid_t]\nPL_next_solution.restype = c_int\nPL_copy_term_ref = _lib.PL_copy_term_ref\nPL_copy_term_ref.argtypes = [term_t]\nPL_copy_term_ref.restype = term_t\nPL_get_list = _lib.PL_get_list\nPL_get_list.argtypes = [term_t, term_t, term_t]\nPL_get_list.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_next_solution",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_next_solution = _lib.PL_next_solution\nPL_next_solution.argtypes = [qid_t]\nPL_next_solution.restype = c_int\nPL_copy_term_ref = _lib.PL_copy_term_ref\nPL_copy_term_ref.argtypes = [term_t]\nPL_copy_term_ref.restype = term_t\nPL_get_list = _lib.PL_get_list\nPL_get_list.argtypes = [term_t, term_t, term_t]\nPL_get_list.restype = c_int\nPL_get_chars = _lib.PL_get_chars  # FIXME",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_next_solution.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_next_solution.argtypes = [qid_t]\nPL_next_solution.restype = c_int\nPL_copy_term_ref = _lib.PL_copy_term_ref\nPL_copy_term_ref.argtypes = [term_t]\nPL_copy_term_ref.restype = term_t\nPL_get_list = _lib.PL_get_list\nPL_get_list.argtypes = [term_t, term_t, term_t]\nPL_get_list.restype = c_int\nPL_get_chars = _lib.PL_get_chars  # FIXME\nPL_close_query = _lib.PL_close_query",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_next_solution.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_next_solution.restype = c_int\nPL_copy_term_ref = _lib.PL_copy_term_ref\nPL_copy_term_ref.argtypes = [term_t]\nPL_copy_term_ref.restype = term_t\nPL_get_list = _lib.PL_get_list\nPL_get_list.argtypes = [term_t, term_t, term_t]\nPL_get_list.restype = c_int\nPL_get_chars = _lib.PL_get_chars  # FIXME\nPL_close_query = _lib.PL_close_query\nPL_close_query.argtypes = [qid_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_copy_term_ref",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_copy_term_ref = _lib.PL_copy_term_ref\nPL_copy_term_ref.argtypes = [term_t]\nPL_copy_term_ref.restype = term_t\nPL_get_list = _lib.PL_get_list\nPL_get_list.argtypes = [term_t, term_t, term_t]\nPL_get_list.restype = c_int\nPL_get_chars = _lib.PL_get_chars  # FIXME\nPL_close_query = _lib.PL_close_query\nPL_close_query.argtypes = [qid_t]\nPL_close_query.restype = None",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_copy_term_ref.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_copy_term_ref.argtypes = [term_t]\nPL_copy_term_ref.restype = term_t\nPL_get_list = _lib.PL_get_list\nPL_get_list.argtypes = [term_t, term_t, term_t]\nPL_get_list.restype = c_int\nPL_get_chars = _lib.PL_get_chars  # FIXME\nPL_close_query = _lib.PL_close_query\nPL_close_query.argtypes = [qid_t]\nPL_close_query.restype = None\nPL_cut_query = _lib.PL_cut_query",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_copy_term_ref.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_copy_term_ref.restype = term_t\nPL_get_list = _lib.PL_get_list\nPL_get_list.argtypes = [term_t, term_t, term_t]\nPL_get_list.restype = c_int\nPL_get_chars = _lib.PL_get_chars  # FIXME\nPL_close_query = _lib.PL_close_query\nPL_close_query.argtypes = [qid_t]\nPL_close_query.restype = None\nPL_cut_query = _lib.PL_cut_query\nPL_cut_query.argtypes = [qid_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_list",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_list = _lib.PL_get_list\nPL_get_list.argtypes = [term_t, term_t, term_t]\nPL_get_list.restype = c_int\nPL_get_chars = _lib.PL_get_chars  # FIXME\nPL_close_query = _lib.PL_close_query\nPL_close_query.argtypes = [qid_t]\nPL_close_query.restype = None\nPL_cut_query = _lib.PL_cut_query\nPL_cut_query.argtypes = [qid_t]\nPL_cut_query.restype = None",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_list.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_list.argtypes = [term_t, term_t, term_t]\nPL_get_list.restype = c_int\nPL_get_chars = _lib.PL_get_chars  # FIXME\nPL_close_query = _lib.PL_close_query\nPL_close_query.argtypes = [qid_t]\nPL_close_query.restype = None\nPL_cut_query = _lib.PL_cut_query\nPL_cut_query.argtypes = [qid_t]\nPL_cut_query.restype = None\nPL_halt = _lib.PL_halt",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_list.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_list.restype = c_int\nPL_get_chars = _lib.PL_get_chars  # FIXME\nPL_close_query = _lib.PL_close_query\nPL_close_query.argtypes = [qid_t]\nPL_close_query.restype = None\nPL_cut_query = _lib.PL_cut_query\nPL_cut_query.argtypes = [qid_t]\nPL_cut_query.restype = None\nPL_halt = _lib.PL_halt\nPL_halt.argtypes = [c_int]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_get_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_get_chars = _lib.PL_get_chars  # FIXME\nPL_close_query = _lib.PL_close_query\nPL_close_query.argtypes = [qid_t]\nPL_close_query.restype = None\nPL_cut_query = _lib.PL_cut_query\nPL_cut_query.argtypes = [qid_t]\nPL_cut_query.restype = None\nPL_halt = _lib.PL_halt\nPL_halt.argtypes = [c_int]\nPL_halt.restype = None",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_close_query",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_close_query = _lib.PL_close_query\nPL_close_query.argtypes = [qid_t]\nPL_close_query.restype = None\nPL_cut_query = _lib.PL_cut_query\nPL_cut_query.argtypes = [qid_t]\nPL_cut_query.restype = None\nPL_halt = _lib.PL_halt\nPL_halt.argtypes = [c_int]\nPL_halt.restype = None\nPL_cleanup = _lib.PL_cleanup",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_close_query.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_close_query.argtypes = [qid_t]\nPL_close_query.restype = None\nPL_cut_query = _lib.PL_cut_query\nPL_cut_query.argtypes = [qid_t]\nPL_cut_query.restype = None\nPL_halt = _lib.PL_halt\nPL_halt.argtypes = [c_int]\nPL_halt.restype = None\nPL_cleanup = _lib.PL_cleanup\nPL_cleanup.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_close_query.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_close_query.restype = None\nPL_cut_query = _lib.PL_cut_query\nPL_cut_query.argtypes = [qid_t]\nPL_cut_query.restype = None\nPL_halt = _lib.PL_halt\nPL_halt.argtypes = [c_int]\nPL_halt.restype = None\nPL_cleanup = _lib.PL_cleanup\nPL_cleanup.restype = c_int\nPL_unify_integer = _lib.PL_unify_integer",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cut_query",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_cut_query = _lib.PL_cut_query\nPL_cut_query.argtypes = [qid_t]\nPL_cut_query.restype = None\nPL_halt = _lib.PL_halt\nPL_halt.argtypes = [c_int]\nPL_halt.restype = None\nPL_cleanup = _lib.PL_cleanup\nPL_cleanup.restype = c_int\nPL_unify_integer = _lib.PL_unify_integer\nPL_unify_atom_chars = _lib.PL_unify_atom_chars",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cut_query.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_cut_query.argtypes = [qid_t]\nPL_cut_query.restype = None\nPL_halt = _lib.PL_halt\nPL_halt.argtypes = [c_int]\nPL_halt.restype = None\nPL_cleanup = _lib.PL_cleanup\nPL_cleanup.restype = c_int\nPL_unify_integer = _lib.PL_unify_integer\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_float = _lib.PL_unify_float",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cut_query.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_cut_query.restype = None\nPL_halt = _lib.PL_halt\nPL_halt.argtypes = [c_int]\nPL_halt.restype = None\nPL_cleanup = _lib.PL_cleanup\nPL_cleanup.restype = c_int\nPL_unify_integer = _lib.PL_unify_integer\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_float = _lib.PL_unify_float\nPL_unify_float.argtypes = [term_t, c_double]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_halt",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_halt = _lib.PL_halt\nPL_halt.argtypes = [c_int]\nPL_halt.restype = None\nPL_cleanup = _lib.PL_cleanup\nPL_cleanup.restype = c_int\nPL_unify_integer = _lib.PL_unify_integer\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_float = _lib.PL_unify_float\nPL_unify_float.argtypes = [term_t, c_double]\nPL_unify_float.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_halt.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_halt.argtypes = [c_int]\nPL_halt.restype = None\nPL_cleanup = _lib.PL_cleanup\nPL_cleanup.restype = c_int\nPL_unify_integer = _lib.PL_unify_integer\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_float = _lib.PL_unify_float\nPL_unify_float.argtypes = [term_t, c_double]\nPL_unify_float.restype = c_int\nPL_unify_bool = _lib.PL_unify_bool",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_halt.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_halt.restype = None\nPL_cleanup = _lib.PL_cleanup\nPL_cleanup.restype = c_int\nPL_unify_integer = _lib.PL_unify_integer\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_float = _lib.PL_unify_float\nPL_unify_float.argtypes = [term_t, c_double]\nPL_unify_float.restype = c_int\nPL_unify_bool = _lib.PL_unify_bool\nPL_unify_bool.argtypes = [term_t, c_int]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cleanup",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_cleanup = _lib.PL_cleanup\nPL_cleanup.restype = c_int\nPL_unify_integer = _lib.PL_unify_integer\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_float = _lib.PL_unify_float\nPL_unify_float.argtypes = [term_t, c_double]\nPL_unify_float.restype = c_int\nPL_unify_bool = _lib.PL_unify_bool\nPL_unify_bool.argtypes = [term_t, c_int]\nPL_unify_bool.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cleanup.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_cleanup.restype = c_int\nPL_unify_integer = _lib.PL_unify_integer\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_float = _lib.PL_unify_float\nPL_unify_float.argtypes = [term_t, c_double]\nPL_unify_float.restype = c_int\nPL_unify_bool = _lib.PL_unify_bool\nPL_unify_bool.argtypes = [term_t, c_int]\nPL_unify_bool.restype = c_int\nPL_unify_list = _lib.PL_unify_list",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_integer",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_integer = _lib.PL_unify_integer\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_float = _lib.PL_unify_float\nPL_unify_float.argtypes = [term_t, c_double]\nPL_unify_float.restype = c_int\nPL_unify_bool = _lib.PL_unify_bool\nPL_unify_bool.argtypes = [term_t, c_int]\nPL_unify_bool.restype = c_int\nPL_unify_list = _lib.PL_unify_list\nPL_unify_list.argtypes = [term_t, term_t, term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_atom_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_float = _lib.PL_unify_float\nPL_unify_float.argtypes = [term_t, c_double]\nPL_unify_float.restype = c_int\nPL_unify_bool = _lib.PL_unify_bool\nPL_unify_bool.argtypes = [term_t, c_int]\nPL_unify_bool.restype = c_int\nPL_unify_list = _lib.PL_unify_list\nPL_unify_list.argtypes = [term_t, term_t, term_t]\nPL_unify_list.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_float",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_float = _lib.PL_unify_float\nPL_unify_float.argtypes = [term_t, c_double]\nPL_unify_float.restype = c_int\nPL_unify_bool = _lib.PL_unify_bool\nPL_unify_bool.argtypes = [term_t, c_int]\nPL_unify_bool.restype = c_int\nPL_unify_list = _lib.PL_unify_list\nPL_unify_list.argtypes = [term_t, term_t, term_t]\nPL_unify_list.restype = c_int\nPL_unify_nil = _lib.PL_unify_nil",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_float.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_float.argtypes = [term_t, c_double]\nPL_unify_float.restype = c_int\nPL_unify_bool = _lib.PL_unify_bool\nPL_unify_bool.argtypes = [term_t, c_int]\nPL_unify_bool.restype = c_int\nPL_unify_list = _lib.PL_unify_list\nPL_unify_list.argtypes = [term_t, term_t, term_t]\nPL_unify_list.restype = c_int\nPL_unify_nil = _lib.PL_unify_nil\nPL_unify_nil.argtypes = [term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_float.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_float.restype = c_int\nPL_unify_bool = _lib.PL_unify_bool\nPL_unify_bool.argtypes = [term_t, c_int]\nPL_unify_bool.restype = c_int\nPL_unify_list = _lib.PL_unify_list\nPL_unify_list.argtypes = [term_t, term_t, term_t]\nPL_unify_list.restype = c_int\nPL_unify_nil = _lib.PL_unify_nil\nPL_unify_nil.argtypes = [term_t]\nPL_unify_nil.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_bool",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_bool = _lib.PL_unify_bool\nPL_unify_bool.argtypes = [term_t, c_int]\nPL_unify_bool.restype = c_int\nPL_unify_list = _lib.PL_unify_list\nPL_unify_list.argtypes = [term_t, term_t, term_t]\nPL_unify_list.restype = c_int\nPL_unify_nil = _lib.PL_unify_nil\nPL_unify_nil.argtypes = [term_t]\nPL_unify_nil.restype = c_int\nPL_unify_atom = _lib.PL_unify_atom",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_bool.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_bool.argtypes = [term_t, c_int]\nPL_unify_bool.restype = c_int\nPL_unify_list = _lib.PL_unify_list\nPL_unify_list.argtypes = [term_t, term_t, term_t]\nPL_unify_list.restype = c_int\nPL_unify_nil = _lib.PL_unify_nil\nPL_unify_nil.argtypes = [term_t]\nPL_unify_nil.restype = c_int\nPL_unify_atom = _lib.PL_unify_atom\nPL_unify_atom.argtypes = [term_t, atom_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_bool.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_bool.restype = c_int\nPL_unify_list = _lib.PL_unify_list\nPL_unify_list.argtypes = [term_t, term_t, term_t]\nPL_unify_list.restype = c_int\nPL_unify_nil = _lib.PL_unify_nil\nPL_unify_nil.argtypes = [term_t]\nPL_unify_nil.restype = c_int\nPL_unify_atom = _lib.PL_unify_atom\nPL_unify_atom.argtypes = [term_t, atom_t]\nPL_unify_atom.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_list",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_list = _lib.PL_unify_list\nPL_unify_list.argtypes = [term_t, term_t, term_t]\nPL_unify_list.restype = c_int\nPL_unify_nil = _lib.PL_unify_nil\nPL_unify_nil.argtypes = [term_t]\nPL_unify_nil.restype = c_int\nPL_unify_atom = _lib.PL_unify_atom\nPL_unify_atom.argtypes = [term_t, atom_t]\nPL_unify_atom.restype = c_int\nPL_unify_atom_chars = _lib.PL_unify_atom_chars",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_list.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_list.argtypes = [term_t, term_t, term_t]\nPL_unify_list.restype = c_int\nPL_unify_nil = _lib.PL_unify_nil\nPL_unify_nil.argtypes = [term_t]\nPL_unify_nil.restype = c_int\nPL_unify_atom = _lib.PL_unify_atom\nPL_unify_atom.argtypes = [term_t, atom_t]\nPL_unify_atom.restype = c_int\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_atom_chars.argtypes = [term_t, c_char_p]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_list.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_list.restype = c_int\nPL_unify_nil = _lib.PL_unify_nil\nPL_unify_nil.argtypes = [term_t]\nPL_unify_nil.restype = c_int\nPL_unify_atom = _lib.PL_unify_atom\nPL_unify_atom.argtypes = [term_t, atom_t]\nPL_unify_atom.restype = c_int\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_atom_chars.argtypes = [term_t, c_char_p]\nPL_unify_atom_chars.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_nil",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_nil = _lib.PL_unify_nil\nPL_unify_nil.argtypes = [term_t]\nPL_unify_nil.restype = c_int\nPL_unify_atom = _lib.PL_unify_atom\nPL_unify_atom.argtypes = [term_t, atom_t]\nPL_unify_atom.restype = c_int\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_atom_chars.argtypes = [term_t, c_char_p]\nPL_unify_atom_chars.restype = c_int\nPL_unify_string_chars = _lib.PL_unify_string_chars",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_nil.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_nil.argtypes = [term_t]\nPL_unify_nil.restype = c_int\nPL_unify_atom = _lib.PL_unify_atom\nPL_unify_atom.argtypes = [term_t, atom_t]\nPL_unify_atom.restype = c_int\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_atom_chars.argtypes = [term_t, c_char_p]\nPL_unify_atom_chars.restype = c_int\nPL_unify_string_chars = _lib.PL_unify_string_chars\nPL_unify_string_chars.argtypes = [term_t, c_char_p]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_nil.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_nil.restype = c_int\nPL_unify_atom = _lib.PL_unify_atom\nPL_unify_atom.argtypes = [term_t, atom_t]\nPL_unify_atom.restype = c_int\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_atom_chars.argtypes = [term_t, c_char_p]\nPL_unify_atom_chars.restype = c_int\nPL_unify_string_chars = _lib.PL_unify_string_chars\nPL_unify_string_chars.argtypes = [term_t, c_char_p]\nPL_unify_string_chars.restype = c_void_p",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_atom",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_atom = _lib.PL_unify_atom\nPL_unify_atom.argtypes = [term_t, atom_t]\nPL_unify_atom.restype = c_int\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_atom_chars.argtypes = [term_t, c_char_p]\nPL_unify_atom_chars.restype = c_int\nPL_unify_string_chars = _lib.PL_unify_string_chars\nPL_unify_string_chars.argtypes = [term_t, c_char_p]\nPL_unify_string_chars.restype = c_void_p\nPL_foreign_control = _lib.PL_foreign_control",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_atom.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_atom.argtypes = [term_t, atom_t]\nPL_unify_atom.restype = c_int\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_atom_chars.argtypes = [term_t, c_char_p]\nPL_unify_atom_chars.restype = c_int\nPL_unify_string_chars = _lib.PL_unify_string_chars\nPL_unify_string_chars.argtypes = [term_t, c_char_p]\nPL_unify_string_chars.restype = c_void_p\nPL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_atom.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_atom.restype = c_int\nPL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_atom_chars.argtypes = [term_t, c_char_p]\nPL_unify_atom_chars.restype = c_int\nPL_unify_string_chars = _lib.PL_unify_string_chars\nPL_unify_string_chars.argtypes = [term_t, c_char_p]\nPL_unify_string_chars.restype = c_void_p\nPL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restypes = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_atom_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_atom_chars = _lib.PL_unify_atom_chars\nPL_unify_atom_chars.argtypes = [term_t, c_char_p]\nPL_unify_atom_chars.restype = c_int\nPL_unify_string_chars = _lib.PL_unify_string_chars\nPL_unify_string_chars.argtypes = [term_t, c_char_p]\nPL_unify_string_chars.restype = c_void_p\nPL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restypes = c_int\nPL_foreign_context_address = _lib.PL_foreign_context_address",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_atom_chars.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_atom_chars.argtypes = [term_t, c_char_p]\nPL_unify_atom_chars.restype = c_int\nPL_unify_string_chars = _lib.PL_unify_string_chars\nPL_unify_string_chars.argtypes = [term_t, c_char_p]\nPL_unify_string_chars.restype = c_void_p\nPL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restypes = c_int\nPL_foreign_context_address = _lib.PL_foreign_context_address\nPL_foreign_context_address.argtypes = [control_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_atom_chars.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_atom_chars.restype = c_int\nPL_unify_string_chars = _lib.PL_unify_string_chars\nPL_unify_string_chars.argtypes = [term_t, c_char_p]\nPL_unify_string_chars.restype = c_void_p\nPL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restypes = c_int\nPL_foreign_context_address = _lib.PL_foreign_context_address\nPL_foreign_context_address.argtypes = [control_t]\nPL_foreign_context_address.restypes = c_void_p",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_string_chars",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_string_chars = _lib.PL_unify_string_chars\nPL_unify_string_chars.argtypes = [term_t, c_char_p]\nPL_unify_string_chars.restype = c_void_p\nPL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restypes = c_int\nPL_foreign_context_address = _lib.PL_foreign_context_address\nPL_foreign_context_address.argtypes = [control_t]\nPL_foreign_context_address.restypes = c_void_p\nPL_retry_address = _lib._PL_retry_address",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_string_chars.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_string_chars.argtypes = [term_t, c_char_p]\nPL_unify_string_chars.restype = c_void_p\nPL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restypes = c_int\nPL_foreign_context_address = _lib.PL_foreign_context_address\nPL_foreign_context_address.argtypes = [control_t]\nPL_foreign_context_address.restypes = c_void_p\nPL_retry_address = _lib._PL_retry_address\nPL_retry_address.argtypes = [c_void_p]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_string_chars.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_string_chars.restype = c_void_p\nPL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restypes = c_int\nPL_foreign_context_address = _lib.PL_foreign_context_address\nPL_foreign_context_address.argtypes = [control_t]\nPL_foreign_context_address.restypes = c_void_p\nPL_retry_address = _lib._PL_retry_address\nPL_retry_address.argtypes = [c_void_p]\nPL_retry_address.restypes = foreign_t",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_control",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_foreign_control = _lib.PL_foreign_control\nPL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restypes = c_int\nPL_foreign_context_address = _lib.PL_foreign_context_address\nPL_foreign_context_address.argtypes = [control_t]\nPL_foreign_context_address.restypes = c_void_p\nPL_retry_address = _lib._PL_retry_address\nPL_retry_address.argtypes = [c_void_p]\nPL_retry_address.restypes = foreign_t\nPL_unify = _lib.PL_unify",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_control.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_foreign_control.argtypes = [control_t]\nPL_foreign_control.restypes = c_int\nPL_foreign_context_address = _lib.PL_foreign_context_address\nPL_foreign_context_address.argtypes = [control_t]\nPL_foreign_context_address.restypes = c_void_p\nPL_retry_address = _lib._PL_retry_address\nPL_retry_address.argtypes = [c_void_p]\nPL_retry_address.restypes = foreign_t\nPL_unify = _lib.PL_unify\nPL_unify.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_control.restypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_foreign_control.restypes = c_int\nPL_foreign_context_address = _lib.PL_foreign_context_address\nPL_foreign_context_address.argtypes = [control_t]\nPL_foreign_context_address.restypes = c_void_p\nPL_retry_address = _lib._PL_retry_address\nPL_retry_address.argtypes = [c_void_p]\nPL_retry_address.restypes = foreign_t\nPL_unify = _lib.PL_unify\nPL_unify.restype = c_int\nPL_succeed = 1",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_context_address",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_foreign_context_address = _lib.PL_foreign_context_address\nPL_foreign_context_address.argtypes = [control_t]\nPL_foreign_context_address.restypes = c_void_p\nPL_retry_address = _lib._PL_retry_address\nPL_retry_address.argtypes = [c_void_p]\nPL_retry_address.restypes = foreign_t\nPL_unify = _lib.PL_unify\nPL_unify.restype = c_int\nPL_succeed = 1\nPL_unify_arg = _lib.PL_unify_arg",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_context_address.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_foreign_context_address.argtypes = [control_t]\nPL_foreign_context_address.restypes = c_void_p\nPL_retry_address = _lib._PL_retry_address\nPL_retry_address.argtypes = [c_void_p]\nPL_retry_address.restypes = foreign_t\nPL_unify = _lib.PL_unify\nPL_unify.restype = c_int\nPL_succeed = 1\nPL_unify_arg = _lib.PL_unify_arg\nPL_unify_arg.argtypes = [c_int, term_t, term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_foreign_context_address.restypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_foreign_context_address.restypes = c_void_p\nPL_retry_address = _lib._PL_retry_address\nPL_retry_address.argtypes = [c_void_p]\nPL_retry_address.restypes = foreign_t\nPL_unify = _lib.PL_unify\nPL_unify.restype = c_int\nPL_succeed = 1\nPL_unify_arg = _lib.PL_unify_arg\nPL_unify_arg.argtypes = [c_int, term_t, term_t]\nPL_unify_arg.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_retry_address",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_retry_address = _lib._PL_retry_address\nPL_retry_address.argtypes = [c_void_p]\nPL_retry_address.restypes = foreign_t\nPL_unify = _lib.PL_unify\nPL_unify.restype = c_int\nPL_succeed = 1\nPL_unify_arg = _lib.PL_unify_arg\nPL_unify_arg.argtypes = [c_int, term_t, term_t]\nPL_unify_arg.restype = c_int\n# Verify types",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_retry_address.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_retry_address.argtypes = [c_void_p]\nPL_retry_address.restypes = foreign_t\nPL_unify = _lib.PL_unify\nPL_unify.restype = c_int\nPL_succeed = 1\nPL_unify_arg = _lib.PL_unify_arg\nPL_unify_arg.argtypes = [c_int, term_t, term_t]\nPL_unify_arg.restype = c_int\n# Verify types\nPL_term_type = _lib.PL_term_type",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_retry_address.restypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_retry_address.restypes = foreign_t\nPL_unify = _lib.PL_unify\nPL_unify.restype = c_int\nPL_succeed = 1\nPL_unify_arg = _lib.PL_unify_arg\nPL_unify_arg.argtypes = [c_int, term_t, term_t]\nPL_unify_arg.restype = c_int\n# Verify types\nPL_term_type = _lib.PL_term_type\nPL_term_type.argtypes = [term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify = _lib.PL_unify\nPL_unify.restype = c_int\nPL_succeed = 1\nPL_unify_arg = _lib.PL_unify_arg\nPL_unify_arg.argtypes = [c_int, term_t, term_t]\nPL_unify_arg.restype = c_int\n# Verify types\nPL_term_type = _lib.PL_term_type\nPL_term_type.argtypes = [term_t]\nPL_term_type.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify.restype = c_int\nPL_succeed = 1\nPL_unify_arg = _lib.PL_unify_arg\nPL_unify_arg.argtypes = [c_int, term_t, term_t]\nPL_unify_arg.restype = c_int\n# Verify types\nPL_term_type = _lib.PL_term_type\nPL_term_type.argtypes = [term_t]\nPL_term_type.restype = c_int\nPL_is_variable = _lib.PL_is_variable",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_succeed",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_succeed = 1\nPL_unify_arg = _lib.PL_unify_arg\nPL_unify_arg.argtypes = [c_int, term_t, term_t]\nPL_unify_arg.restype = c_int\n# Verify types\nPL_term_type = _lib.PL_term_type\nPL_term_type.argtypes = [term_t]\nPL_term_type.restype = c_int\nPL_is_variable = _lib.PL_is_variable\nPL_is_variable.argtypes = [term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_arg",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_arg = _lib.PL_unify_arg\nPL_unify_arg.argtypes = [c_int, term_t, term_t]\nPL_unify_arg.restype = c_int\n# Verify types\nPL_term_type = _lib.PL_term_type\nPL_term_type.argtypes = [term_t]\nPL_term_type.restype = c_int\nPL_is_variable = _lib.PL_is_variable\nPL_is_variable.argtypes = [term_t]\nPL_is_variable.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_arg.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_arg.argtypes = [c_int, term_t, term_t]\nPL_unify_arg.restype = c_int\n# Verify types\nPL_term_type = _lib.PL_term_type\nPL_term_type.argtypes = [term_t]\nPL_term_type.restype = c_int\nPL_is_variable = _lib.PL_is_variable\nPL_is_variable.argtypes = [term_t]\nPL_is_variable.restype = c_int\nPL_is_ground = _lib.PL_is_ground",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_arg.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_arg.restype = c_int\n# Verify types\nPL_term_type = _lib.PL_term_type\nPL_term_type.argtypes = [term_t]\nPL_term_type.restype = c_int\nPL_is_variable = _lib.PL_is_variable\nPL_is_variable.argtypes = [term_t]\nPL_is_variable.restype = c_int\nPL_is_ground = _lib.PL_is_ground\nPL_is_ground.argtypes = [term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_term_type",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_term_type = _lib.PL_term_type\nPL_term_type.argtypes = [term_t]\nPL_term_type.restype = c_int\nPL_is_variable = _lib.PL_is_variable\nPL_is_variable.argtypes = [term_t]\nPL_is_variable.restype = c_int\nPL_is_ground = _lib.PL_is_ground\nPL_is_ground.argtypes = [term_t]\nPL_is_ground.restype = c_int\nPL_is_atom = _lib.PL_is_atom",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_term_type.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_term_type.argtypes = [term_t]\nPL_term_type.restype = c_int\nPL_is_variable = _lib.PL_is_variable\nPL_is_variable.argtypes = [term_t]\nPL_is_variable.restype = c_int\nPL_is_ground = _lib.PL_is_ground\nPL_is_ground.argtypes = [term_t]\nPL_is_ground.restype = c_int\nPL_is_atom = _lib.PL_is_atom\nPL_is_atom.argtypes = [term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_term_type.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_term_type.restype = c_int\nPL_is_variable = _lib.PL_is_variable\nPL_is_variable.argtypes = [term_t]\nPL_is_variable.restype = c_int\nPL_is_ground = _lib.PL_is_ground\nPL_is_ground.argtypes = [term_t]\nPL_is_ground.restype = c_int\nPL_is_atom = _lib.PL_is_atom\nPL_is_atom.argtypes = [term_t]\nPL_is_atom.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_variable",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_variable = _lib.PL_is_variable\nPL_is_variable.argtypes = [term_t]\nPL_is_variable.restype = c_int\nPL_is_ground = _lib.PL_is_ground\nPL_is_ground.argtypes = [term_t]\nPL_is_ground.restype = c_int\nPL_is_atom = _lib.PL_is_atom\nPL_is_atom.argtypes = [term_t]\nPL_is_atom.restype = c_int\nPL_is_integer = _lib.PL_is_integer",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_variable.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_variable.argtypes = [term_t]\nPL_is_variable.restype = c_int\nPL_is_ground = _lib.PL_is_ground\nPL_is_ground.argtypes = [term_t]\nPL_is_ground.restype = c_int\nPL_is_atom = _lib.PL_is_atom\nPL_is_atom.argtypes = [term_t]\nPL_is_atom.restype = c_int\nPL_is_integer = _lib.PL_is_integer\nPL_is_integer.argtypes = [term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_variable.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_variable.restype = c_int\nPL_is_ground = _lib.PL_is_ground\nPL_is_ground.argtypes = [term_t]\nPL_is_ground.restype = c_int\nPL_is_atom = _lib.PL_is_atom\nPL_is_atom.argtypes = [term_t]\nPL_is_atom.restype = c_int\nPL_is_integer = _lib.PL_is_integer\nPL_is_integer.argtypes = [term_t]\nPL_is_integer.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_ground",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_ground = _lib.PL_is_ground\nPL_is_ground.argtypes = [term_t]\nPL_is_ground.restype = c_int\nPL_is_atom = _lib.PL_is_atom\nPL_is_atom.argtypes = [term_t]\nPL_is_atom.restype = c_int\nPL_is_integer = _lib.PL_is_integer\nPL_is_integer.argtypes = [term_t]\nPL_is_integer.restype = c_int\nPL_is_string = _lib.PL_is_string",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_ground.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_ground.argtypes = [term_t]\nPL_is_ground.restype = c_int\nPL_is_atom = _lib.PL_is_atom\nPL_is_atom.argtypes = [term_t]\nPL_is_atom.restype = c_int\nPL_is_integer = _lib.PL_is_integer\nPL_is_integer.argtypes = [term_t]\nPL_is_integer.restype = c_int\nPL_is_string = _lib.PL_is_string\nPL_is_string.argtypes = [term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_ground.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_ground.restype = c_int\nPL_is_atom = _lib.PL_is_atom\nPL_is_atom.argtypes = [term_t]\nPL_is_atom.restype = c_int\nPL_is_integer = _lib.PL_is_integer\nPL_is_integer.argtypes = [term_t]\nPL_is_integer.restype = c_int\nPL_is_string = _lib.PL_is_string\nPL_is_string.argtypes = [term_t]\nPL_is_string.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_atom",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_atom = _lib.PL_is_atom\nPL_is_atom.argtypes = [term_t]\nPL_is_atom.restype = c_int\nPL_is_integer = _lib.PL_is_integer\nPL_is_integer.argtypes = [term_t]\nPL_is_integer.restype = c_int\nPL_is_string = _lib.PL_is_string\nPL_is_string.argtypes = [term_t]\nPL_is_string.restype = c_int\nPL_is_float = _lib.PL_is_float",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_atom.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_atom.argtypes = [term_t]\nPL_is_atom.restype = c_int\nPL_is_integer = _lib.PL_is_integer\nPL_is_integer.argtypes = [term_t]\nPL_is_integer.restype = c_int\nPL_is_string = _lib.PL_is_string\nPL_is_string.argtypes = [term_t]\nPL_is_string.restype = c_int\nPL_is_float = _lib.PL_is_float\nPL_is_float.argtypes = [term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_atom.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_atom.restype = c_int\nPL_is_integer = _lib.PL_is_integer\nPL_is_integer.argtypes = [term_t]\nPL_is_integer.restype = c_int\nPL_is_string = _lib.PL_is_string\nPL_is_string.argtypes = [term_t]\nPL_is_string.restype = c_int\nPL_is_float = _lib.PL_is_float\nPL_is_float.argtypes = [term_t]\nPL_is_float.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_integer",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_integer = _lib.PL_is_integer\nPL_is_integer.argtypes = [term_t]\nPL_is_integer.restype = c_int\nPL_is_string = _lib.PL_is_string\nPL_is_string.argtypes = [term_t]\nPL_is_string.restype = c_int\nPL_is_float = _lib.PL_is_float\nPL_is_float.argtypes = [term_t]\nPL_is_float.restype = c_int\nPL_is_compound = _lib.PL_is_compound",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_integer.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_integer.argtypes = [term_t]\nPL_is_integer.restype = c_int\nPL_is_string = _lib.PL_is_string\nPL_is_string.argtypes = [term_t]\nPL_is_string.restype = c_int\nPL_is_float = _lib.PL_is_float\nPL_is_float.argtypes = [term_t]\nPL_is_float.restype = c_int\nPL_is_compound = _lib.PL_is_compound\nPL_is_compound.argtypes = [term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_integer.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_integer.restype = c_int\nPL_is_string = _lib.PL_is_string\nPL_is_string.argtypes = [term_t]\nPL_is_string.restype = c_int\nPL_is_float = _lib.PL_is_float\nPL_is_float.argtypes = [term_t]\nPL_is_float.restype = c_int\nPL_is_compound = _lib.PL_is_compound\nPL_is_compound.argtypes = [term_t]\nPL_is_compound.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_string",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_string = _lib.PL_is_string\nPL_is_string.argtypes = [term_t]\nPL_is_string.restype = c_int\nPL_is_float = _lib.PL_is_float\nPL_is_float.argtypes = [term_t]\nPL_is_float.restype = c_int\nPL_is_compound = _lib.PL_is_compound\nPL_is_compound.argtypes = [term_t]\nPL_is_compound.restype = c_int\nPL_is_functor = _lib.PL_is_functor",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_string.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_string.argtypes = [term_t]\nPL_is_string.restype = c_int\nPL_is_float = _lib.PL_is_float\nPL_is_float.argtypes = [term_t]\nPL_is_float.restype = c_int\nPL_is_compound = _lib.PL_is_compound\nPL_is_compound.argtypes = [term_t]\nPL_is_compound.restype = c_int\nPL_is_functor = _lib.PL_is_functor\nPL_is_functor.argtypes = [term_t, functor_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_string.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_string.restype = c_int\nPL_is_float = _lib.PL_is_float\nPL_is_float.argtypes = [term_t]\nPL_is_float.restype = c_int\nPL_is_compound = _lib.PL_is_compound\nPL_is_compound.argtypes = [term_t]\nPL_is_compound.restype = c_int\nPL_is_functor = _lib.PL_is_functor\nPL_is_functor.argtypes = [term_t, functor_t]\nPL_is_functor.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_float",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_float = _lib.PL_is_float\nPL_is_float.argtypes = [term_t]\nPL_is_float.restype = c_int\nPL_is_compound = _lib.PL_is_compound\nPL_is_compound.argtypes = [term_t]\nPL_is_compound.restype = c_int\nPL_is_functor = _lib.PL_is_functor\nPL_is_functor.argtypes = [term_t, functor_t]\nPL_is_functor.restype = c_int\nPL_is_list = _lib.PL_is_list",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_float.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_float.argtypes = [term_t]\nPL_is_float.restype = c_int\nPL_is_compound = _lib.PL_is_compound\nPL_is_compound.argtypes = [term_t]\nPL_is_compound.restype = c_int\nPL_is_functor = _lib.PL_is_functor\nPL_is_functor.argtypes = [term_t, functor_t]\nPL_is_functor.restype = c_int\nPL_is_list = _lib.PL_is_list\nPL_is_list.argtypes = [term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_float.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_float.restype = c_int\nPL_is_compound = _lib.PL_is_compound\nPL_is_compound.argtypes = [term_t]\nPL_is_compound.restype = c_int\nPL_is_functor = _lib.PL_is_functor\nPL_is_functor.argtypes = [term_t, functor_t]\nPL_is_functor.restype = c_int\nPL_is_list = _lib.PL_is_list\nPL_is_list.argtypes = [term_t]\nPL_is_list.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_compound",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_compound = _lib.PL_is_compound\nPL_is_compound.argtypes = [term_t]\nPL_is_compound.restype = c_int\nPL_is_functor = _lib.PL_is_functor\nPL_is_functor.argtypes = [term_t, functor_t]\nPL_is_functor.restype = c_int\nPL_is_list = _lib.PL_is_list\nPL_is_list.argtypes = [term_t]\nPL_is_list.restype = c_int\nPL_is_atomic = _lib.PL_is_atomic",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_compound.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_compound.argtypes = [term_t]\nPL_is_compound.restype = c_int\nPL_is_functor = _lib.PL_is_functor\nPL_is_functor.argtypes = [term_t, functor_t]\nPL_is_functor.restype = c_int\nPL_is_list = _lib.PL_is_list\nPL_is_list.argtypes = [term_t]\nPL_is_list.restype = c_int\nPL_is_atomic = _lib.PL_is_atomic\nPL_is_atomic.argtypes = [term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_compound.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_compound.restype = c_int\nPL_is_functor = _lib.PL_is_functor\nPL_is_functor.argtypes = [term_t, functor_t]\nPL_is_functor.restype = c_int\nPL_is_list = _lib.PL_is_list\nPL_is_list.argtypes = [term_t]\nPL_is_list.restype = c_int\nPL_is_atomic = _lib.PL_is_atomic\nPL_is_atomic.argtypes = [term_t]\nPL_is_atomic.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_functor",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_functor = _lib.PL_is_functor\nPL_is_functor.argtypes = [term_t, functor_t]\nPL_is_functor.restype = c_int\nPL_is_list = _lib.PL_is_list\nPL_is_list.argtypes = [term_t]\nPL_is_list.restype = c_int\nPL_is_atomic = _lib.PL_is_atomic\nPL_is_atomic.argtypes = [term_t]\nPL_is_atomic.restype = c_int\nPL_is_number = _lib.PL_is_number",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_functor.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_functor.argtypes = [term_t, functor_t]\nPL_is_functor.restype = c_int\nPL_is_list = _lib.PL_is_list\nPL_is_list.argtypes = [term_t]\nPL_is_list.restype = c_int\nPL_is_atomic = _lib.PL_is_atomic\nPL_is_atomic.argtypes = [term_t]\nPL_is_atomic.restype = c_int\nPL_is_number = _lib.PL_is_number\nPL_is_number.argtypes = [term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_functor.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_functor.restype = c_int\nPL_is_list = _lib.PL_is_list\nPL_is_list.argtypes = [term_t]\nPL_is_list.restype = c_int\nPL_is_atomic = _lib.PL_is_atomic\nPL_is_atomic.argtypes = [term_t]\nPL_is_atomic.restype = c_int\nPL_is_number = _lib.PL_is_number\nPL_is_number.argtypes = [term_t]\nPL_is_number.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_list",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_list = _lib.PL_is_list\nPL_is_list.argtypes = [term_t]\nPL_is_list.restype = c_int\nPL_is_atomic = _lib.PL_is_atomic\nPL_is_atomic.argtypes = [term_t]\nPL_is_atomic.restype = c_int\nPL_is_number = _lib.PL_is_number\nPL_is_number.argtypes = [term_t]\nPL_is_number.restype = c_int\nPL_put_variable = _lib.PL_put_variable",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_list.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_list.argtypes = [term_t]\nPL_is_list.restype = c_int\nPL_is_atomic = _lib.PL_is_atomic\nPL_is_atomic.argtypes = [term_t]\nPL_is_atomic.restype = c_int\nPL_is_number = _lib.PL_is_number\nPL_is_number.argtypes = [term_t]\nPL_is_number.restype = c_int\nPL_put_variable = _lib.PL_put_variable\nPL_put_variable.argtypes = [term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_list.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_list.restype = c_int\nPL_is_atomic = _lib.PL_is_atomic\nPL_is_atomic.argtypes = [term_t]\nPL_is_atomic.restype = c_int\nPL_is_number = _lib.PL_is_number\nPL_is_number.argtypes = [term_t]\nPL_is_number.restype = c_int\nPL_put_variable = _lib.PL_put_variable\nPL_put_variable.argtypes = [term_t]\nPL_put_variable.restype = None",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_atomic",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_atomic = _lib.PL_is_atomic\nPL_is_atomic.argtypes = [term_t]\nPL_is_atomic.restype = c_int\nPL_is_number = _lib.PL_is_number\nPL_is_number.argtypes = [term_t]\nPL_is_number.restype = c_int\nPL_put_variable = _lib.PL_put_variable\nPL_put_variable.argtypes = [term_t]\nPL_put_variable.restype = None\nPL_put_integer = _lib.PL_put_integer",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_atomic.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_atomic.argtypes = [term_t]\nPL_is_atomic.restype = c_int\nPL_is_number = _lib.PL_is_number\nPL_is_number.argtypes = [term_t]\nPL_is_number.restype = c_int\nPL_put_variable = _lib.PL_put_variable\nPL_put_variable.argtypes = [term_t]\nPL_put_variable.restype = None\nPL_put_integer = _lib.PL_put_integer\nPL_put_integer.argtypes = [term_t, c_long]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_atomic.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_atomic.restype = c_int\nPL_is_number = _lib.PL_is_number\nPL_is_number.argtypes = [term_t]\nPL_is_number.restype = c_int\nPL_put_variable = _lib.PL_put_variable\nPL_put_variable.argtypes = [term_t]\nPL_put_variable.restype = None\nPL_put_integer = _lib.PL_put_integer\nPL_put_integer.argtypes = [term_t, c_long]\nPL_put_integer.restype = None",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_number",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_number = _lib.PL_is_number\nPL_is_number.argtypes = [term_t]\nPL_is_number.restype = c_int\nPL_put_variable = _lib.PL_put_variable\nPL_put_variable.argtypes = [term_t]\nPL_put_variable.restype = None\nPL_put_integer = _lib.PL_put_integer\nPL_put_integer.argtypes = [term_t, c_long]\nPL_put_integer.restype = None\nPL_put_functor = _lib.PL_put_functor",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_number.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_number.argtypes = [term_t]\nPL_is_number.restype = c_int\nPL_put_variable = _lib.PL_put_variable\nPL_put_variable.argtypes = [term_t]\nPL_put_variable.restype = None\nPL_put_integer = _lib.PL_put_integer\nPL_put_integer.argtypes = [term_t, c_long]\nPL_put_integer.restype = None\nPL_put_functor = _lib.PL_put_functor\nPL_put_functor.argtypes = [term_t, functor_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_number.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_number.restype = c_int\nPL_put_variable = _lib.PL_put_variable\nPL_put_variable.argtypes = [term_t]\nPL_put_variable.restype = None\nPL_put_integer = _lib.PL_put_integer\nPL_put_integer.argtypes = [term_t, c_long]\nPL_put_integer.restype = None\nPL_put_functor = _lib.PL_put_functor\nPL_put_functor.argtypes = [term_t, functor_t]\nPL_put_functor.restype = None",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_variable",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_variable = _lib.PL_put_variable\nPL_put_variable.argtypes = [term_t]\nPL_put_variable.restype = None\nPL_put_integer = _lib.PL_put_integer\nPL_put_integer.argtypes = [term_t, c_long]\nPL_put_integer.restype = None\nPL_put_functor = _lib.PL_put_functor\nPL_put_functor.argtypes = [term_t, functor_t]\nPL_put_functor.restype = None\nPL_put_list = _lib.PL_put_list",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_variable.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_variable.argtypes = [term_t]\nPL_put_variable.restype = None\nPL_put_integer = _lib.PL_put_integer\nPL_put_integer.argtypes = [term_t, c_long]\nPL_put_integer.restype = None\nPL_put_functor = _lib.PL_put_functor\nPL_put_functor.argtypes = [term_t, functor_t]\nPL_put_functor.restype = None\nPL_put_list = _lib.PL_put_list\nPL_put_list.argtypes = [term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_variable.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_variable.restype = None\nPL_put_integer = _lib.PL_put_integer\nPL_put_integer.argtypes = [term_t, c_long]\nPL_put_integer.restype = None\nPL_put_functor = _lib.PL_put_functor\nPL_put_functor.argtypes = [term_t, functor_t]\nPL_put_functor.restype = None\nPL_put_list = _lib.PL_put_list\nPL_put_list.argtypes = [term_t]\nPL_put_list.restype = None",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_integer",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_integer = _lib.PL_put_integer\nPL_put_integer.argtypes = [term_t, c_long]\nPL_put_integer.restype = None\nPL_put_functor = _lib.PL_put_functor\nPL_put_functor.argtypes = [term_t, functor_t]\nPL_put_functor.restype = None\nPL_put_list = _lib.PL_put_list\nPL_put_list.argtypes = [term_t]\nPL_put_list.restype = None\nPL_put_nil = _lib.PL_put_nil",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_integer.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_integer.argtypes = [term_t, c_long]\nPL_put_integer.restype = None\nPL_put_functor = _lib.PL_put_functor\nPL_put_functor.argtypes = [term_t, functor_t]\nPL_put_functor.restype = None\nPL_put_list = _lib.PL_put_list\nPL_put_list.argtypes = [term_t]\nPL_put_list.restype = None\nPL_put_nil = _lib.PL_put_nil\nPL_put_nil.argtypes = [term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_integer.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_integer.restype = None\nPL_put_functor = _lib.PL_put_functor\nPL_put_functor.argtypes = [term_t, functor_t]\nPL_put_functor.restype = None\nPL_put_list = _lib.PL_put_list\nPL_put_list.argtypes = [term_t]\nPL_put_list.restype = None\nPL_put_nil = _lib.PL_put_nil\nPL_put_nil.argtypes = [term_t]\nPL_put_nil.restype = None",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_functor",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_functor = _lib.PL_put_functor\nPL_put_functor.argtypes = [term_t, functor_t]\nPL_put_functor.restype = None\nPL_put_list = _lib.PL_put_list\nPL_put_list.argtypes = [term_t]\nPL_put_list.restype = None\nPL_put_nil = _lib.PL_put_nil\nPL_put_nil.argtypes = [term_t]\nPL_put_nil.restype = None\nPL_put_term = _lib.PL_put_term",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_functor.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_functor.argtypes = [term_t, functor_t]\nPL_put_functor.restype = None\nPL_put_list = _lib.PL_put_list\nPL_put_list.argtypes = [term_t]\nPL_put_list.restype = None\nPL_put_nil = _lib.PL_put_nil\nPL_put_nil.argtypes = [term_t]\nPL_put_nil.restype = None\nPL_put_term = _lib.PL_put_term\nPL_put_term.argtypes = [term_t, term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_functor.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_functor.restype = None\nPL_put_list = _lib.PL_put_list\nPL_put_list.argtypes = [term_t]\nPL_put_list.restype = None\nPL_put_nil = _lib.PL_put_nil\nPL_put_nil.argtypes = [term_t]\nPL_put_nil.restype = None\nPL_put_term = _lib.PL_put_term\nPL_put_term.argtypes = [term_t, term_t]\nPL_put_term.restype = None",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_list",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_list = _lib.PL_put_list\nPL_put_list.argtypes = [term_t]\nPL_put_list.restype = None\nPL_put_nil = _lib.PL_put_nil\nPL_put_nil.argtypes = [term_t]\nPL_put_nil.restype = None\nPL_put_term = _lib.PL_put_term\nPL_put_term.argtypes = [term_t, term_t]\nPL_put_term.restype = None\nPL_cons_functor = _lib.PL_cons_functor  # FIXME:",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_list.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_list.argtypes = [term_t]\nPL_put_list.restype = None\nPL_put_nil = _lib.PL_put_nil\nPL_put_nil.argtypes = [term_t]\nPL_put_nil.restype = None\nPL_put_term = _lib.PL_put_term\nPL_put_term.argtypes = [term_t, term_t]\nPL_put_term.restype = None\nPL_cons_functor = _lib.PL_cons_functor  # FIXME:\nPL_cons_functor_v = _lib.PL_cons_functor_v",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_list.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_list.restype = None\nPL_put_nil = _lib.PL_put_nil\nPL_put_nil.argtypes = [term_t]\nPL_put_nil.restype = None\nPL_put_term = _lib.PL_put_term\nPL_put_term.argtypes = [term_t, term_t]\nPL_put_term.restype = None\nPL_cons_functor = _lib.PL_cons_functor  # FIXME:\nPL_cons_functor_v = _lib.PL_cons_functor_v\nPL_cons_functor_v.argtypes = [term_t, functor_t, term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_nil",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_nil = _lib.PL_put_nil\nPL_put_nil.argtypes = [term_t]\nPL_put_nil.restype = None\nPL_put_term = _lib.PL_put_term\nPL_put_term.argtypes = [term_t, term_t]\nPL_put_term.restype = None\nPL_cons_functor = _lib.PL_cons_functor  # FIXME:\nPL_cons_functor_v = _lib.PL_cons_functor_v\nPL_cons_functor_v.argtypes = [term_t, functor_t, term_t]\nPL_cons_functor_v.restype = None",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_nil.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_nil.argtypes = [term_t]\nPL_put_nil.restype = None\nPL_put_term = _lib.PL_put_term\nPL_put_term.argtypes = [term_t, term_t]\nPL_put_term.restype = None\nPL_cons_functor = _lib.PL_cons_functor  # FIXME:\nPL_cons_functor_v = _lib.PL_cons_functor_v\nPL_cons_functor_v.argtypes = [term_t, functor_t, term_t]\nPL_cons_functor_v.restype = None\nPL_cons_list = _lib.PL_cons_list",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_nil.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_nil.restype = None\nPL_put_term = _lib.PL_put_term\nPL_put_term.argtypes = [term_t, term_t]\nPL_put_term.restype = None\nPL_cons_functor = _lib.PL_cons_functor  # FIXME:\nPL_cons_functor_v = _lib.PL_cons_functor_v\nPL_cons_functor_v.argtypes = [term_t, functor_t, term_t]\nPL_cons_functor_v.restype = None\nPL_cons_list = _lib.PL_cons_list\nPL_cons_list.argtypes = [term_t, term_t, term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_term",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_term = _lib.PL_put_term\nPL_put_term.argtypes = [term_t, term_t]\nPL_put_term.restype = None\nPL_cons_functor = _lib.PL_cons_functor  # FIXME:\nPL_cons_functor_v = _lib.PL_cons_functor_v\nPL_cons_functor_v.argtypes = [term_t, functor_t, term_t]\nPL_cons_functor_v.restype = None\nPL_cons_list = _lib.PL_cons_list\nPL_cons_list.argtypes = [term_t, term_t, term_t]\nPL_cons_list.restype = None",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_term.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_term.argtypes = [term_t, term_t]\nPL_put_term.restype = None\nPL_cons_functor = _lib.PL_cons_functor  # FIXME:\nPL_cons_functor_v = _lib.PL_cons_functor_v\nPL_cons_functor_v.argtypes = [term_t, functor_t, term_t]\nPL_cons_functor_v.restype = None\nPL_cons_list = _lib.PL_cons_list\nPL_cons_list.argtypes = [term_t, term_t, term_t]\nPL_cons_list.restype = None\nPL_exception = _lib.PL_exception",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_put_term.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_put_term.restype = None\nPL_cons_functor = _lib.PL_cons_functor  # FIXME:\nPL_cons_functor_v = _lib.PL_cons_functor_v\nPL_cons_functor_v.argtypes = [term_t, functor_t, term_t]\nPL_cons_functor_v.restype = None\nPL_cons_list = _lib.PL_cons_list\nPL_cons_list.argtypes = [term_t, term_t, term_t]\nPL_cons_list.restype = None\nPL_exception = _lib.PL_exception\nPL_exception.argtypes = [qid_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cons_functor",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_cons_functor = _lib.PL_cons_functor  # FIXME:\nPL_cons_functor_v = _lib.PL_cons_functor_v\nPL_cons_functor_v.argtypes = [term_t, functor_t, term_t]\nPL_cons_functor_v.restype = None\nPL_cons_list = _lib.PL_cons_list\nPL_cons_list.argtypes = [term_t, term_t, term_t]\nPL_cons_list.restype = None\nPL_exception = _lib.PL_exception\nPL_exception.argtypes = [qid_t]\nPL_exception.restype = term_t",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cons_functor_v",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_cons_functor_v = _lib.PL_cons_functor_v\nPL_cons_functor_v.argtypes = [term_t, functor_t, term_t]\nPL_cons_functor_v.restype = None\nPL_cons_list = _lib.PL_cons_list\nPL_cons_list.argtypes = [term_t, term_t, term_t]\nPL_cons_list.restype = None\nPL_exception = _lib.PL_exception\nPL_exception.argtypes = [qid_t]\nPL_exception.restype = term_t\nPL_register_foreign = _lib.PL_register_foreign",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cons_functor_v.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_cons_functor_v.argtypes = [term_t, functor_t, term_t]\nPL_cons_functor_v.restype = None\nPL_cons_list = _lib.PL_cons_list\nPL_cons_list.argtypes = [term_t, term_t, term_t]\nPL_cons_list.restype = None\nPL_exception = _lib.PL_exception\nPL_exception.argtypes = [qid_t]\nPL_exception.restype = term_t\nPL_register_foreign = _lib.PL_register_foreign\nPL_register_foreign = check_strings(0, None)(PL_register_foreign)",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cons_functor_v.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_cons_functor_v.restype = None\nPL_cons_list = _lib.PL_cons_list\nPL_cons_list.argtypes = [term_t, term_t, term_t]\nPL_cons_list.restype = None\nPL_exception = _lib.PL_exception\nPL_exception.argtypes = [qid_t]\nPL_exception.restype = term_t\nPL_register_foreign = _lib.PL_register_foreign\nPL_register_foreign = check_strings(0, None)(PL_register_foreign)\nPL_new_atom = _lib.PL_new_atom",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cons_list",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_cons_list = _lib.PL_cons_list\nPL_cons_list.argtypes = [term_t, term_t, term_t]\nPL_cons_list.restype = None\nPL_exception = _lib.PL_exception\nPL_exception.argtypes = [qid_t]\nPL_exception.restype = term_t\nPL_register_foreign = _lib.PL_register_foreign\nPL_register_foreign = check_strings(0, None)(PL_register_foreign)\nPL_new_atom = _lib.PL_new_atom\nPL_new_atom.argtypes = [c_char_p]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cons_list.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_cons_list.argtypes = [term_t, term_t, term_t]\nPL_cons_list.restype = None\nPL_exception = _lib.PL_exception\nPL_exception.argtypes = [qid_t]\nPL_exception.restype = term_t\nPL_register_foreign = _lib.PL_register_foreign\nPL_register_foreign = check_strings(0, None)(PL_register_foreign)\nPL_new_atom = _lib.PL_new_atom\nPL_new_atom.argtypes = [c_char_p]\nPL_new_atom.restype = atom_t",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_cons_list.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_cons_list.restype = None\nPL_exception = _lib.PL_exception\nPL_exception.argtypes = [qid_t]\nPL_exception.restype = term_t\nPL_register_foreign = _lib.PL_register_foreign\nPL_register_foreign = check_strings(0, None)(PL_register_foreign)\nPL_new_atom = _lib.PL_new_atom\nPL_new_atom.argtypes = [c_char_p]\nPL_new_atom.restype = atom_t\nPL_new_atom = check_strings(0, None)(PL_new_atom)",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_exception",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_exception = _lib.PL_exception\nPL_exception.argtypes = [qid_t]\nPL_exception.restype = term_t\nPL_register_foreign = _lib.PL_register_foreign\nPL_register_foreign = check_strings(0, None)(PL_register_foreign)\nPL_new_atom = _lib.PL_new_atom\nPL_new_atom.argtypes = [c_char_p]\nPL_new_atom.restype = atom_t\nPL_new_atom = check_strings(0, None)(PL_new_atom)\nPL_new_functor = _lib.PL_new_functor",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_exception.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_exception.argtypes = [qid_t]\nPL_exception.restype = term_t\nPL_register_foreign = _lib.PL_register_foreign\nPL_register_foreign = check_strings(0, None)(PL_register_foreign)\nPL_new_atom = _lib.PL_new_atom\nPL_new_atom.argtypes = [c_char_p]\nPL_new_atom.restype = atom_t\nPL_new_atom = check_strings(0, None)(PL_new_atom)\nPL_new_functor = _lib.PL_new_functor\nPL_new_functor.argtypes = [atom_t, c_int]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_exception.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_exception.restype = term_t\nPL_register_foreign = _lib.PL_register_foreign\nPL_register_foreign = check_strings(0, None)(PL_register_foreign)\nPL_new_atom = _lib.PL_new_atom\nPL_new_atom.argtypes = [c_char_p]\nPL_new_atom.restype = atom_t\nPL_new_atom = check_strings(0, None)(PL_new_atom)\nPL_new_functor = _lib.PL_new_functor\nPL_new_functor.argtypes = [atom_t, c_int]\nPL_new_functor.restype = functor_t",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_register_foreign",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_register_foreign = _lib.PL_register_foreign\nPL_register_foreign = check_strings(0, None)(PL_register_foreign)\nPL_new_atom = _lib.PL_new_atom\nPL_new_atom.argtypes = [c_char_p]\nPL_new_atom.restype = atom_t\nPL_new_atom = check_strings(0, None)(PL_new_atom)\nPL_new_functor = _lib.PL_new_functor\nPL_new_functor.argtypes = [atom_t, c_int]\nPL_new_functor.restype = functor_t\nPL_compare = _lib.PL_compare",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_register_foreign",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_register_foreign = check_strings(0, None)(PL_register_foreign)\nPL_new_atom = _lib.PL_new_atom\nPL_new_atom.argtypes = [c_char_p]\nPL_new_atom.restype = atom_t\nPL_new_atom = check_strings(0, None)(PL_new_atom)\nPL_new_functor = _lib.PL_new_functor\nPL_new_functor.argtypes = [atom_t, c_int]\nPL_new_functor.restype = functor_t\nPL_compare = _lib.PL_compare\nPL_compare.argtypes = [term_t, term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_atom",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_new_atom = _lib.PL_new_atom\nPL_new_atom.argtypes = [c_char_p]\nPL_new_atom.restype = atom_t\nPL_new_atom = check_strings(0, None)(PL_new_atom)\nPL_new_functor = _lib.PL_new_functor\nPL_new_functor.argtypes = [atom_t, c_int]\nPL_new_functor.restype = functor_t\nPL_compare = _lib.PL_compare\nPL_compare.argtypes = [term_t, term_t]\nPL_compare.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_atom.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_new_atom.argtypes = [c_char_p]\nPL_new_atom.restype = atom_t\nPL_new_atom = check_strings(0, None)(PL_new_atom)\nPL_new_functor = _lib.PL_new_functor\nPL_new_functor.argtypes = [atom_t, c_int]\nPL_new_functor.restype = functor_t\nPL_compare = _lib.PL_compare\nPL_compare.argtypes = [term_t, term_t]\nPL_compare.restype = c_int\nPL_same_compound = _lib.PL_same_compound",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_atom.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_new_atom.restype = atom_t\nPL_new_atom = check_strings(0, None)(PL_new_atom)\nPL_new_functor = _lib.PL_new_functor\nPL_new_functor.argtypes = [atom_t, c_int]\nPL_new_functor.restype = functor_t\nPL_compare = _lib.PL_compare\nPL_compare.argtypes = [term_t, term_t]\nPL_compare.restype = c_int\nPL_same_compound = _lib.PL_same_compound\nPL_same_compound.argtypes = [term_t, term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_atom",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_new_atom = check_strings(0, None)(PL_new_atom)\nPL_new_functor = _lib.PL_new_functor\nPL_new_functor.argtypes = [atom_t, c_int]\nPL_new_functor.restype = functor_t\nPL_compare = _lib.PL_compare\nPL_compare.argtypes = [term_t, term_t]\nPL_compare.restype = c_int\nPL_same_compound = _lib.PL_same_compound\nPL_same_compound.argtypes = [term_t, term_t]\nPL_same_compound.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_functor",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_new_functor = _lib.PL_new_functor\nPL_new_functor.argtypes = [atom_t, c_int]\nPL_new_functor.restype = functor_t\nPL_compare = _lib.PL_compare\nPL_compare.argtypes = [term_t, term_t]\nPL_compare.restype = c_int\nPL_same_compound = _lib.PL_same_compound\nPL_same_compound.argtypes = [term_t, term_t]\nPL_same_compound.restype = c_int\nPL_record = _lib.PL_record",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_functor.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_new_functor.argtypes = [atom_t, c_int]\nPL_new_functor.restype = functor_t\nPL_compare = _lib.PL_compare\nPL_compare.argtypes = [term_t, term_t]\nPL_compare.restype = c_int\nPL_same_compound = _lib.PL_same_compound\nPL_same_compound.argtypes = [term_t, term_t]\nPL_same_compound.restype = c_int\nPL_record = _lib.PL_record\nPL_record.argtypes = [term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_functor.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_new_functor.restype = functor_t\nPL_compare = _lib.PL_compare\nPL_compare.argtypes = [term_t, term_t]\nPL_compare.restype = c_int\nPL_same_compound = _lib.PL_same_compound\nPL_same_compound.argtypes = [term_t, term_t]\nPL_same_compound.restype = c_int\nPL_record = _lib.PL_record\nPL_record.argtypes = [term_t]\nPL_record.restype = record_t",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_compare",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_compare = _lib.PL_compare\nPL_compare.argtypes = [term_t, term_t]\nPL_compare.restype = c_int\nPL_same_compound = _lib.PL_same_compound\nPL_same_compound.argtypes = [term_t, term_t]\nPL_same_compound.restype = c_int\nPL_record = _lib.PL_record\nPL_record.argtypes = [term_t]\nPL_record.restype = record_t\nPL_recorded = _lib.PL_recorded",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_compare.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_compare.argtypes = [term_t, term_t]\nPL_compare.restype = c_int\nPL_same_compound = _lib.PL_same_compound\nPL_same_compound.argtypes = [term_t, term_t]\nPL_same_compound.restype = c_int\nPL_record = _lib.PL_record\nPL_record.argtypes = [term_t]\nPL_record.restype = record_t\nPL_recorded = _lib.PL_recorded\nPL_recorded.argtypes = [record_t, term_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_compare.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_compare.restype = c_int\nPL_same_compound = _lib.PL_same_compound\nPL_same_compound.argtypes = [term_t, term_t]\nPL_same_compound.restype = c_int\nPL_record = _lib.PL_record\nPL_record.argtypes = [term_t]\nPL_record.restype = record_t\nPL_recorded = _lib.PL_recorded\nPL_recorded.argtypes = [record_t, term_t]\nPL_recorded.restype = None",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_same_compound",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_same_compound = _lib.PL_same_compound\nPL_same_compound.argtypes = [term_t, term_t]\nPL_same_compound.restype = c_int\nPL_record = _lib.PL_record\nPL_record.argtypes = [term_t]\nPL_record.restype = record_t\nPL_recorded = _lib.PL_recorded\nPL_recorded.argtypes = [record_t, term_t]\nPL_recorded.restype = None\nPL_erase = _lib.PL_erase",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_same_compound.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_same_compound.argtypes = [term_t, term_t]\nPL_same_compound.restype = c_int\nPL_record = _lib.PL_record\nPL_record.argtypes = [term_t]\nPL_record.restype = record_t\nPL_recorded = _lib.PL_recorded\nPL_recorded.argtypes = [record_t, term_t]\nPL_recorded.restype = None\nPL_erase = _lib.PL_erase\nPL_erase.argtypes = [record_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_same_compound.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_same_compound.restype = c_int\nPL_record = _lib.PL_record\nPL_record.argtypes = [term_t]\nPL_record.restype = record_t\nPL_recorded = _lib.PL_recorded\nPL_recorded.argtypes = [record_t, term_t]\nPL_recorded.restype = None\nPL_erase = _lib.PL_erase\nPL_erase.argtypes = [record_t]\nPL_erase.restype = None",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_record",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_record = _lib.PL_record\nPL_record.argtypes = [term_t]\nPL_record.restype = record_t\nPL_recorded = _lib.PL_recorded\nPL_recorded.argtypes = [record_t, term_t]\nPL_recorded.restype = None\nPL_erase = _lib.PL_erase\nPL_erase.argtypes = [record_t]\nPL_erase.restype = None\nPL_new_module = _lib.PL_new_module",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_record.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_record.argtypes = [term_t]\nPL_record.restype = record_t\nPL_recorded = _lib.PL_recorded\nPL_recorded.argtypes = [record_t, term_t]\nPL_recorded.restype = None\nPL_erase = _lib.PL_erase\nPL_erase.argtypes = [record_t]\nPL_erase.restype = None\nPL_new_module = _lib.PL_new_module\nPL_new_module.argtypes = [atom_t]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_record.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_record.restype = record_t\nPL_recorded = _lib.PL_recorded\nPL_recorded.argtypes = [record_t, term_t]\nPL_recorded.restype = None\nPL_erase = _lib.PL_erase\nPL_erase.argtypes = [record_t]\nPL_erase.restype = None\nPL_new_module = _lib.PL_new_module\nPL_new_module.argtypes = [atom_t]\nPL_new_module.restype = module_t",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_recorded",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_recorded = _lib.PL_recorded\nPL_recorded.argtypes = [record_t, term_t]\nPL_recorded.restype = None\nPL_erase = _lib.PL_erase\nPL_erase.argtypes = [record_t]\nPL_erase.restype = None\nPL_new_module = _lib.PL_new_module\nPL_new_module.argtypes = [atom_t]\nPL_new_module.restype = module_t\nPL_is_initialised = _lib.PL_is_initialised",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_recorded.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_recorded.argtypes = [record_t, term_t]\nPL_recorded.restype = None\nPL_erase = _lib.PL_erase\nPL_erase.argtypes = [record_t]\nPL_erase.restype = None\nPL_new_module = _lib.PL_new_module\nPL_new_module.argtypes = [atom_t]\nPL_new_module.restype = module_t\nPL_is_initialised = _lib.PL_is_initialised\nintptr_t = c_long",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_recorded.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_recorded.restype = None\nPL_erase = _lib.PL_erase\nPL_erase.argtypes = [record_t]\nPL_erase.restype = None\nPL_new_module = _lib.PL_new_module\nPL_new_module.argtypes = [atom_t]\nPL_new_module.restype = module_t\nPL_is_initialised = _lib.PL_is_initialised\nintptr_t = c_long\nssize_t = intptr_t",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_erase",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_erase = _lib.PL_erase\nPL_erase.argtypes = [record_t]\nPL_erase.restype = None\nPL_new_module = _lib.PL_new_module\nPL_new_module.argtypes = [atom_t]\nPL_new_module.restype = module_t\nPL_is_initialised = _lib.PL_is_initialised\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_erase.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_erase.argtypes = [record_t]\nPL_erase.restype = None\nPL_new_module = _lib.PL_new_module\nPL_new_module.argtypes = [atom_t]\nPL_new_module.restype = module_t\nPL_is_initialised = _lib.PL_is_initialised\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nPL_thread_self = _lib.PL_thread_self",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_erase.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_erase.restype = None\nPL_new_module = _lib.PL_new_module\nPL_new_module.argtypes = [atom_t]\nPL_new_module.restype = module_t\nPL_is_initialised = _lib.PL_is_initialised\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nPL_thread_self = _lib.PL_thread_self\nPL_thread_self.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_module",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_new_module = _lib.PL_new_module\nPL_new_module.argtypes = [atom_t]\nPL_new_module.restype = module_t\nPL_is_initialised = _lib.PL_is_initialised\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nPL_thread_self = _lib.PL_thread_self\nPL_thread_self.restype = c_int\nPL_thread_attach_engine = _lib.PL_thread_attach_engine",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_module.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_new_module.argtypes = [atom_t]\nPL_new_module.restype = module_t\nPL_is_initialised = _lib.PL_is_initialised\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nPL_thread_self = _lib.PL_thread_self\nPL_thread_self.restype = c_int\nPL_thread_attach_engine = _lib.PL_thread_attach_engine\nPL_thread_attach_engine.argtypes = [c_void_p]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_new_module.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_new_module.restype = module_t\nPL_is_initialised = _lib.PL_is_initialised\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nPL_thread_self = _lib.PL_thread_self\nPL_thread_self.restype = c_int\nPL_thread_attach_engine = _lib.PL_thread_attach_engine\nPL_thread_attach_engine.argtypes = [c_void_p]\nPL_thread_attach_engine.restype = c_int",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_is_initialised",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_is_initialised = _lib.PL_is_initialised\nintptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nPL_thread_self = _lib.PL_thread_self\nPL_thread_self.restype = c_int\nPL_thread_attach_engine = _lib.PL_thread_attach_engine\nPL_thread_attach_engine.argtypes = [c_void_p]\nPL_thread_attach_engine.restype = c_int\nclass _mbstate_t_value(Union):",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "intptr_t",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "intptr_t = c_long\nssize_t = intptr_t\nwint_t = c_uint\nPL_thread_self = _lib.PL_thread_self\nPL_thread_self.restype = c_int\nPL_thread_attach_engine = _lib.PL_thread_attach_engine\nPL_thread_attach_engine.argtypes = [c_void_p]\nPL_thread_attach_engine.restype = c_int\nclass _mbstate_t_value(Union):\n    _fields_ = [(\"__wch\", wint_t),",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "ssize_t",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "ssize_t = intptr_t\nwint_t = c_uint\nPL_thread_self = _lib.PL_thread_self\nPL_thread_self.restype = c_int\nPL_thread_attach_engine = _lib.PL_thread_attach_engine\nPL_thread_attach_engine.argtypes = [c_void_p]\nPL_thread_attach_engine.restype = c_int\nclass _mbstate_t_value(Union):\n    _fields_ = [(\"__wch\", wint_t),\n                (\"__wchb\", c_char * 4)]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "wint_t",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "wint_t = c_uint\nPL_thread_self = _lib.PL_thread_self\nPL_thread_self.restype = c_int\nPL_thread_attach_engine = _lib.PL_thread_attach_engine\nPL_thread_attach_engine.argtypes = [c_void_p]\nPL_thread_attach_engine.restype = c_int\nclass _mbstate_t_value(Union):\n    _fields_ = [(\"__wch\", wint_t),\n                (\"__wchb\", c_char * 4)]\nclass mbstate_t(Structure):",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_thread_self",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_thread_self = _lib.PL_thread_self\nPL_thread_self.restype = c_int\nPL_thread_attach_engine = _lib.PL_thread_attach_engine\nPL_thread_attach_engine.argtypes = [c_void_p]\nPL_thread_attach_engine.restype = c_int\nclass _mbstate_t_value(Union):\n    _fields_ = [(\"__wch\", wint_t),\n                (\"__wchb\", c_char * 4)]\nclass mbstate_t(Structure):\n    _fields_ = [(\"__count\", c_int),",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_thread_self.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_thread_self.restype = c_int\nPL_thread_attach_engine = _lib.PL_thread_attach_engine\nPL_thread_attach_engine.argtypes = [c_void_p]\nPL_thread_attach_engine.restype = c_int\nclass _mbstate_t_value(Union):\n    _fields_ = [(\"__wch\", wint_t),\n                (\"__wchb\", c_char * 4)]\nclass mbstate_t(Structure):\n    _fields_ = [(\"__count\", c_int),\n                (\"__value\", _mbstate_t_value)]",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_thread_attach_engine",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_thread_attach_engine = _lib.PL_thread_attach_engine\nPL_thread_attach_engine.argtypes = [c_void_p]\nPL_thread_attach_engine.restype = c_int\nclass _mbstate_t_value(Union):\n    _fields_ = [(\"__wch\", wint_t),\n                (\"__wchb\", c_char * 4)]\nclass mbstate_t(Structure):\n    _fields_ = [(\"__count\", c_int),\n                (\"__value\", _mbstate_t_value)]\n# stream related funcs",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_thread_attach_engine.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_thread_attach_engine.argtypes = [c_void_p]\nPL_thread_attach_engine.restype = c_int\nclass _mbstate_t_value(Union):\n    _fields_ = [(\"__wch\", wint_t),\n                (\"__wchb\", c_char * 4)]\nclass mbstate_t(Structure):\n    _fields_ = [(\"__count\", c_int),\n                (\"__value\", _mbstate_t_value)]\n# stream related funcs\nSread_function = CFUNCTYPE(ssize_t, c_void_p, c_char_p, c_size_t)",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_thread_attach_engine.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_thread_attach_engine.restype = c_int\nclass _mbstate_t_value(Union):\n    _fields_ = [(\"__wch\", wint_t),\n                (\"__wchb\", c_char * 4)]\nclass mbstate_t(Structure):\n    _fields_ = [(\"__count\", c_int),\n                (\"__value\", _mbstate_t_value)]\n# stream related funcs\nSread_function = CFUNCTYPE(ssize_t, c_void_p, c_char_p, c_size_t)\nSwrite_function = CFUNCTYPE(ssize_t, c_void_p, c_char_p, c_size_t)",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "Sread_function",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "Sread_function = CFUNCTYPE(ssize_t, c_void_p, c_char_p, c_size_t)\nSwrite_function = CFUNCTYPE(ssize_t, c_void_p, c_char_p, c_size_t)\nSseek_function = CFUNCTYPE(c_long, c_void_p, c_long, c_int)\nSseek64_function = CFUNCTYPE(c_int64, c_void_p, c_int64, c_int)\nSclose_function = CFUNCTYPE(c_int, c_void_p)\nScontrol_function = CFUNCTYPE(c_int, c_void_p, c_int, c_void_p)\n# IOLOCK\nIOLOCK = c_void_p\n# IOFUNCTIONS\nclass IOFUNCTIONS(Structure):",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "Swrite_function",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "Swrite_function = CFUNCTYPE(ssize_t, c_void_p, c_char_p, c_size_t)\nSseek_function = CFUNCTYPE(c_long, c_void_p, c_long, c_int)\nSseek64_function = CFUNCTYPE(c_int64, c_void_p, c_int64, c_int)\nSclose_function = CFUNCTYPE(c_int, c_void_p)\nScontrol_function = CFUNCTYPE(c_int, c_void_p, c_int, c_void_p)\n# IOLOCK\nIOLOCK = c_void_p\n# IOFUNCTIONS\nclass IOFUNCTIONS(Structure):\n    _fields_ = [(\"read\",Sread_function),",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "Sseek_function",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "Sseek_function = CFUNCTYPE(c_long, c_void_p, c_long, c_int)\nSseek64_function = CFUNCTYPE(c_int64, c_void_p, c_int64, c_int)\nSclose_function = CFUNCTYPE(c_int, c_void_p)\nScontrol_function = CFUNCTYPE(c_int, c_void_p, c_int, c_void_p)\n# IOLOCK\nIOLOCK = c_void_p\n# IOFUNCTIONS\nclass IOFUNCTIONS(Structure):\n    _fields_ = [(\"read\",Sread_function),\n                (\"write\",Swrite_function),",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "Sseek64_function",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "Sseek64_function = CFUNCTYPE(c_int64, c_void_p, c_int64, c_int)\nSclose_function = CFUNCTYPE(c_int, c_void_p)\nScontrol_function = CFUNCTYPE(c_int, c_void_p, c_int, c_void_p)\n# IOLOCK\nIOLOCK = c_void_p\n# IOFUNCTIONS\nclass IOFUNCTIONS(Structure):\n    _fields_ = [(\"read\",Sread_function),\n                (\"write\",Swrite_function),\n                (\"seek\",Sseek_function),",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "Sclose_function",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "Sclose_function = CFUNCTYPE(c_int, c_void_p)\nScontrol_function = CFUNCTYPE(c_int, c_void_p, c_int, c_void_p)\n# IOLOCK\nIOLOCK = c_void_p\n# IOFUNCTIONS\nclass IOFUNCTIONS(Structure):\n    _fields_ = [(\"read\",Sread_function),\n                (\"write\",Swrite_function),\n                (\"seek\",Sseek_function),\n                (\"close\",Sclose_function),",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "Scontrol_function",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "Scontrol_function = CFUNCTYPE(c_int, c_void_p, c_int, c_void_p)\n# IOLOCK\nIOLOCK = c_void_p\n# IOFUNCTIONS\nclass IOFUNCTIONS(Structure):\n    _fields_ = [(\"read\",Sread_function),\n                (\"write\",Swrite_function),\n                (\"seek\",Sseek_function),\n                (\"close\",Sclose_function),\n                (\"seek64\",Sseek64_function),",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "IOLOCK",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "IOLOCK = c_void_p\n# IOFUNCTIONS\nclass IOFUNCTIONS(Structure):\n    _fields_ = [(\"read\",Sread_function),\n                (\"write\",Swrite_function),\n                (\"seek\",Sseek_function),\n                (\"close\",Sclose_function),\n                (\"seek64\",Sseek64_function),\n                (\"reserved\",intptr_t*2)]\n# IOENC",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "ENC_UNKNOWN,ENC_OCTET,ENC_ASCII,ENC_ISO_LATIN_1,ENC_ANSI,ENC_UTF8,ENC_UNICODE_BE,ENC_UNICODE_LE,ENC_WCHAR",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "ENC_UNKNOWN,ENC_OCTET,ENC_ASCII,ENC_ISO_LATIN_1,ENC_ANSI,ENC_UTF8,ENC_UNICODE_BE,ENC_UNICODE_LE,ENC_WCHAR = tuple(range(9))\nIOENC = c_int\n# IOPOS\nclass IOPOS(Structure):\n    _fields_ = [(\"byteno\",c_int64),\n                (\"charno\",c_int64),\n                (\"lineno\",c_int),\n                (\"linepos\",c_int),\n                (\"reserved\", intptr_t*2)]\n# IOSTREAM",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "IOENC",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "IOENC = c_int\n# IOPOS\nclass IOPOS(Structure):\n    _fields_ = [(\"byteno\",c_int64),\n                (\"charno\",c_int64),\n                (\"lineno\",c_int),\n                (\"linepos\",c_int),\n                (\"reserved\", intptr_t*2)]\n# IOSTREAM\nclass IOSTREAM(Structure):",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "Sopen_string",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "Sopen_string = _lib.Sopen_string\nSopen_string.argtypes = [POINTER(IOSTREAM), c_char_p, c_size_t, c_char_p]\nSopen_string.restype = POINTER(IOSTREAM)\nSclose = _lib.Sclose\nSclose.argtypes = [POINTER(IOSTREAM)]\nPL_unify_stream = _lib.PL_unify_stream\nPL_unify_stream.argtypes = [term_t, POINTER(IOSTREAM)]\n#create an exit hook which captures the exit code for our cleanup function\nclass ExitHook(object):\n    def __init__(self):",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "Sopen_string.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "Sopen_string.argtypes = [POINTER(IOSTREAM), c_char_p, c_size_t, c_char_p]\nSopen_string.restype = POINTER(IOSTREAM)\nSclose = _lib.Sclose\nSclose.argtypes = [POINTER(IOSTREAM)]\nPL_unify_stream = _lib.PL_unify_stream\nPL_unify_stream.argtypes = [term_t, POINTER(IOSTREAM)]\n#create an exit hook which captures the exit code for our cleanup function\nclass ExitHook(object):\n    def __init__(self):\n        self.exit_code = None",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "Sopen_string.restype",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "Sopen_string.restype = POINTER(IOSTREAM)\nSclose = _lib.Sclose\nSclose.argtypes = [POINTER(IOSTREAM)]\nPL_unify_stream = _lib.PL_unify_stream\nPL_unify_stream.argtypes = [term_t, POINTER(IOSTREAM)]\n#create an exit hook which captures the exit code for our cleanup function\nclass ExitHook(object):\n    def __init__(self):\n        self.exit_code = None\n        self.exception = None",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "Sclose",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "Sclose = _lib.Sclose\nSclose.argtypes = [POINTER(IOSTREAM)]\nPL_unify_stream = _lib.PL_unify_stream\nPL_unify_stream.argtypes = [term_t, POINTER(IOSTREAM)]\n#create an exit hook which captures the exit code for our cleanup function\nclass ExitHook(object):\n    def __init__(self):\n        self.exit_code = None\n        self.exception = None\n    def hook(self):",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "Sclose.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "Sclose.argtypes = [POINTER(IOSTREAM)]\nPL_unify_stream = _lib.PL_unify_stream\nPL_unify_stream.argtypes = [term_t, POINTER(IOSTREAM)]\n#create an exit hook which captures the exit code for our cleanup function\nclass ExitHook(object):\n    def __init__(self):\n        self.exit_code = None\n        self.exception = None\n    def hook(self):\n        self._orig_exit = sys.exit",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_stream",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_stream = _lib.PL_unify_stream\nPL_unify_stream.argtypes = [term_t, POINTER(IOSTREAM)]\n#create an exit hook which captures the exit code for our cleanup function\nclass ExitHook(object):\n    def __init__(self):\n        self.exit_code = None\n        self.exception = None\n    def hook(self):\n        self._orig_exit = sys.exit\n        sys.exit = self.exit",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "PL_unify_stream.argtypes",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "PL_unify_stream.argtypes = [term_t, POINTER(IOSTREAM)]\n#create an exit hook which captures the exit code for our cleanup function\nclass ExitHook(object):\n    def __init__(self):\n        self.exit_code = None\n        self.exception = None\n    def hook(self):\n        self._orig_exit = sys.exit\n        sys.exit = self.exit\n    def exit(self, code=0):",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "_hook",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "_hook = ExitHook()\n_hook.hook()\n_isCleaned = False\n#create a property for Atom's delete method in order to avoid segmentation fault\ncleaned = property(_isCleaned)\n#register the cleanup function to be executed on system exit\n@atexit.register\ndef cleanupProlog():\n    # only do something if prolog has been initialised\n    if PL_is_initialised(None,None):",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "_isCleaned",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "_isCleaned = False\n#create a property for Atom's delete method in order to avoid segmentation fault\ncleaned = property(_isCleaned)\n#register the cleanup function to be executed on system exit\n@atexit.register\ndef cleanupProlog():\n    # only do something if prolog has been initialised\n    if PL_is_initialised(None,None):\n        # clean up the prolog system using the caught exit code\n        # if exit code is None, the program exits normally and we can use 0",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "cleaned",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.core",
        "description": "reqs.pyswip.pyswip.core",
        "peekOfCode": "cleaned = property(_isCleaned)\n#register the cleanup function to be executed on system exit\n@atexit.register\ndef cleanupProlog():\n    # only do something if prolog has been initialised\n    if PL_is_initialised(None,None):\n        # clean up the prolog system using the caught exit code\n        # if exit code is None, the program exits normally and we can use 0\n        # instead.\n        # TODO Prolog documentation says cleanup with code 0 may be interrupted",
        "detail": "reqs.pyswip.pyswip.core",
        "documentation": {}
    },
    {
        "label": "InvalidTypeError",
        "kind": 6,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "class InvalidTypeError(TypeError):\n    def __init__(self, *args):\n        type_ = args and args[0] or \"Unknown\"\n        msg = \"Term is expected to be of type: '%s'\" % type_\n        Exception.__init__(self, msg, *args)\nclass ArgumentTypeError(Exception):\n    \"\"\"\n    Thrown when an argument has the wrong type.\n    \"\"\"\n    def __init__(self, expected, got):",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "ArgumentTypeError",
        "kind": 6,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "class ArgumentTypeError(Exception):\n    \"\"\"\n    Thrown when an argument has the wrong type.\n    \"\"\"\n    def __init__(self, expected, got):\n        msg = \"Expected an argument of type '%s' but got '%s'\" % (expected, got)\n        Exception.__init__(self, msg)\nclass Atom(object):\n    __slots__ = \"handle\", \"chars\"\n    def __init__(self, handleOrChars, chars=None):",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "Atom",
        "kind": 6,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "class Atom(object):\n    __slots__ = \"handle\", \"chars\"\n    def __init__(self, handleOrChars, chars=None):\n        \"\"\"Create an atom.\n        ``handleOrChars``: handle or string of the atom.\n        \"\"\"\n        if isinstance(handleOrChars, str):\n            self.handle = PL_new_atom(handleOrChars)\n            self.chars = handleOrChars\n        else:",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "Term",
        "kind": 6,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "class Term(object):\n    __slots__ = \"handle\", \"chars\", \"__value\", \"a0\"\n    def __init__(self, handle=None, a0=None):\n        if handle:\n            #self.handle = PL_copy_term_ref(handle)\n            self.handle = handle\n        else:\n            self.handle = PL_new_term_ref()\n        self.chars = None\n        self.a0 = a0",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "Variable",
        "kind": 6,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "class Variable(object):\n    __slots__ = \"handle\", \"chars\"\n    def __init__(self, handle=None, name=None):\n        self.chars = None\n        if name:\n            self.chars = name\n        if handle:\n            self.handle = handle\n            s = create_string_buffer(b\"\\00\"*64)  # FIXME:\n            ptr = cast(s, c_char_p)",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "Functor",
        "kind": 6,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "class Functor(object):\n    __slots__ = \"handle\", \"name\", \"arity\", \"args\", \"__value\", \"a0\"\n    func = {}\n    def __init__(self, handleOrName, arity=1, args=None, a0=None):\n        \"\"\"Create a functor.\n        ``handleOrName``: functor handle, a string or an atom.\n        \"\"\"\n        self.args = args or []\n        self.arity = arity\n        self.a0 = a0",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "Query",
        "kind": 6,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "class Query(object):\n    qid = None\n    fid = None\n    def __init__(self, *terms, **kwargs):\n        for key in kwargs:\n            if key not in [\"flags\", \"module\"]:\n                raise Exception(\"Invalid kwarg: %s\" % key, key)\n        flags = kwargs.get(\"flags\", PL_Q_NODEBUG|PL_Q_CATCH_EXCEPTION)\n        module = kwargs.get(\"module\", None)\n        t = terms[0]",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "putTerm",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "def putTerm(term, value):\n    if isinstance(value, Term):\n        PL_put_term(term, value.handle)\n    elif isinstance(value, str):\n        PL_put_atom_chars(term, value)\n    elif isinstance(value, int):\n        PL_put_integer(term, value)\n    elif isinstance(value, Variable):\n        value.put(term)\n    elif isinstance(value, list):",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "putList",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "def putList(l, ls):\n    PL_put_nil(l)\n    for item in reversed(ls):\n        a = PL_new_term_ref()  #PL_new_term_refs(len(ls))\n        putTerm(a, item)\n        PL_cons_list(l, a, l)\ndef getAtomChars(t):\n    \"\"\"If t is an atom, return it as a string, otherwise raise InvalidTypeError.\n    \"\"\"\n    s = c_char_p()",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getAtomChars",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "def getAtomChars(t):\n    \"\"\"If t is an atom, return it as a string, otherwise raise InvalidTypeError.\n    \"\"\"\n    s = c_char_p()\n    if PL_get_chars(t, byref(s), CVT_ATOM|REP_UTF8):\n        return s.value\n    else:\n        raise InvalidTypeError(\"atom\")\ndef getAtom(t):\n    \"\"\"If t is an atom, return it , otherwise raise InvalidTypeError.",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getAtom",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "def getAtom(t):\n    \"\"\"If t is an atom, return it , otherwise raise InvalidTypeError.\n    \"\"\"\n    return Atom.fromTerm(t)\ndef getBool(t):\n    \"\"\"If t is of type bool, return it, otherwise raise InvalidTypeError.\n    \"\"\"\n    b = c_int()\n    if PL_get_long(t, byref(b)):\n        return bool(b.value)",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getBool",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "def getBool(t):\n    \"\"\"If t is of type bool, return it, otherwise raise InvalidTypeError.\n    \"\"\"\n    b = c_int()\n    if PL_get_long(t, byref(b)):\n        return bool(b.value)\n    else:\n        raise InvalidTypeError(\"bool\")\ndef getLong(t):\n    \"\"\"If t is of type long, return it, otherwise raise InvalidTypeError.",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getLong",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "def getLong(t):\n    \"\"\"If t is of type long, return it, otherwise raise InvalidTypeError.\n    \"\"\"\n    i = c_long()\n    if PL_get_long(t, byref(i)):\n        return i.value\n    else:\n        raise InvalidTypeError(\"long\")\ngetInteger = getLong  # just an alias for getLong\ndef getFloat(t):",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getFloat",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "def getFloat(t):\n    \"\"\"If t is of type float, return it, otherwise raise InvalidTypeError.\n    \"\"\"\n    d = c_double()\n    if PL_get_float(t, byref(d)):\n        return d.value\n    else:\n        raise InvalidTypeError(\"float\")\ndef getString(t):\n    \"\"\"If t is of type string, return it, otherwise raise InvalidTypeError.",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getString",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "def getString(t):\n    \"\"\"If t is of type string, return it, otherwise raise InvalidTypeError.\n    \"\"\"\n    s = c_char_p()\n    if PL_get_chars(t, byref(s), REP_UTF8|CVT_STRING):\n        return s.value\n    else:\n        raise InvalidTypeError(\"string\")\ndef getTerm(t):\n    if t is None:",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getTerm",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "def getTerm(t):\n    if t is None:\n        return None\n    with PL_STRINGS_MARK():\n        p = PL_term_type(t)\n        if p < PL_TERM:\n            res = _getterm_router[p](t)\n        elif PL_is_list(t):\n            res = getList(t)\n        elif p == PL_DICT:",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getDict",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "def getDict(term):\n    \"\"\"\n    Return term as a dictionary.\n    \"\"\"\n    if isinstance(term, Term):\n        term = term.handle\n    elif not isinstance(term, (c_void_p, int)):\n        raise ArgumentTypeError((str(Term), str(int)), str(type(term)))\n    f = functor_t()\n    if PL_get_functor(term, byref(f)):",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getList",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "def getList(x):\n    \"\"\"\n    Return t as a list.\n    \"\"\"\n    t = PL_copy_term_ref(x)\n    head = PL_new_term_ref()\n    result = []\n    while PL_get_list(t, head, t):\n        result.append(getTerm(head))\n        head = PL_new_term_ref()",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getFunctor",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "def getFunctor(t):\n    \"\"\"Return t as a functor\n    \"\"\"\n    return Functor.fromTerm(t)\ndef getVariable(t):\n    return Variable(t)\n_getterm_router = {\n                   PL_VARIABLE: getVariable,\n                   PL_ATOM: getAtom,\n                   PL_STRING: getString,",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getVariable",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "def getVariable(t):\n    return Variable(t)\n_getterm_router = {\n                   PL_VARIABLE: getVariable,\n                   PL_ATOM: getAtom,\n                   PL_STRING: getString,\n                   PL_INTEGER: getInteger,\n                   PL_FLOAT: getFloat,\n                   PL_TERM: getTerm,\n                  }",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "registerForeign",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "def registerForeign(func, name=None, arity=None, flags=0):\n    \"\"\"Register a Python predicate\n    ``func``: Function to be registered. The function should return a value in\n    ``foreign_t``, ``True`` or ``False``.\n    ``name`` : Name of the function. If this value is not used, ``func.func_name``\n    should exist.\n    ``arity``: Arity (number of arguments) of the function. If this value is not\n    used, ``func.arity`` should exist.\n    \"\"\"\n    global cwraps",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "newTermRefs",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "def newTermRefs(count):\n    a = PL_new_term_refs(count)\n    return list(range(a, a + count))\ndef call(*terms, **kwargs):\n    \"\"\"Call term in module.\n    ``term``: a Term or term handle\n    \"\"\"\n    for kwarg in kwargs:\n        if kwarg not in [\"module\"]:\n            raise KeyError",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "call",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "def call(*terms, **kwargs):\n    \"\"\"Call term in module.\n    ``term``: a Term or term handle\n    \"\"\"\n    for kwarg in kwargs:\n        if kwarg not in [\"module\"]:\n            raise KeyError\n    module = kwargs.get(\"module\", None)\n    t = terms[0]\n    for tx in terms[1:]:",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "newModule",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "def newModule(name):\n    \"\"\"Create a new module.\n    ``name``: An Atom or a string\n    \"\"\"\n    if isinstance(name, str):\n        name = Atom(name)\n    return PL_new_module(name.handle)\nclass Query(object):\n    qid = None\n    fid = None",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "_unify",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "_unify = Functor(\"=\", 2)\nFunctor.func[_unify.handle] = _unifier\n_not = Functor(\"not\", 1)\n_comma = Functor(\",\", 2)\ndef putTerm(term, value):\n    if isinstance(value, Term):\n        PL_put_term(term, value.handle)\n    elif isinstance(value, str):\n        PL_put_atom_chars(term, value)\n    elif isinstance(value, int):",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "Functor.func[_unify.handle]",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "Functor.func[_unify.handle] = _unifier\n_not = Functor(\"not\", 1)\n_comma = Functor(\",\", 2)\ndef putTerm(term, value):\n    if isinstance(value, Term):\n        PL_put_term(term, value.handle)\n    elif isinstance(value, str):\n        PL_put_atom_chars(term, value)\n    elif isinstance(value, int):\n        PL_put_integer(term, value)",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "_not",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "_not = Functor(\"not\", 1)\n_comma = Functor(\",\", 2)\ndef putTerm(term, value):\n    if isinstance(value, Term):\n        PL_put_term(term, value.handle)\n    elif isinstance(value, str):\n        PL_put_atom_chars(term, value)\n    elif isinstance(value, int):\n        PL_put_integer(term, value)\n    elif isinstance(value, Variable):",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "_comma",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "_comma = Functor(\",\", 2)\ndef putTerm(term, value):\n    if isinstance(value, Term):\n        PL_put_term(term, value.handle)\n    elif isinstance(value, str):\n        PL_put_atom_chars(term, value)\n    elif isinstance(value, int):\n        PL_put_integer(term, value)\n    elif isinstance(value, Variable):\n        value.put(term)",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "getInteger",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "getInteger = getLong  # just an alias for getLong\ndef getFloat(t):\n    \"\"\"If t is of type float, return it, otherwise raise InvalidTypeError.\n    \"\"\"\n    d = c_double()\n    if PL_get_float(t, byref(d)):\n        return d.value\n    else:\n        raise InvalidTypeError(\"float\")\ndef getString(t):",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "_getterm_router",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "_getterm_router = {\n                   PL_VARIABLE: getVariable,\n                   PL_ATOM: getAtom,\n                   PL_STRING: getString,\n                   PL_INTEGER: getInteger,\n                   PL_FLOAT: getFloat,\n                   PL_TERM: getTerm,\n                  }\narities = {}\ndef _callbackWrapper(arity=1, nondeterministic=False):",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "arities",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "arities = {}\ndef _callbackWrapper(arity=1, nondeterministic=False):\n    global arities\n    res = arities.get((arity, nondeterministic))\n    if res is None:\n        if nondeterministic:\n            res = CFUNCTYPE(*([foreign_t] + [term_t] * arity + [control_t]))\n        else:\n            res = CFUNCTYPE(*([foreign_t] + [term_t] * arity))\n        arities[(arity, nondeterministic)] = res",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "funwraps",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "funwraps = {}\ndef _foreignWrapper(fun, nondeterministic=False):\n    global funwraps\n    res = funwraps.get(fun)\n    if res is None:\n        def wrapper(*args):\n            if nondeterministic:\n                args = [getTerm(arg) for arg in args[:-1]] + [args[-1]]\n            else:\n                args = [getTerm(arg) for arg in args]",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "cwraps",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "cwraps = []\ndef registerForeign(func, name=None, arity=None, flags=0):\n    \"\"\"Register a Python predicate\n    ``func``: Function to be registered. The function should return a value in\n    ``foreign_t``, ``True`` or ``False``.\n    ``name`` : Name of the function. If this value is not used, ``func.func_name``\n    should exist.\n    ``arity``: Arity (number of arguments) of the function. If this value is not\n    used, ``func.arity`` should exist.\n    \"\"\"",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "newTermRef",
        "kind": 5,
        "importPath": "reqs.pyswip.pyswip.easy",
        "description": "reqs.pyswip.pyswip.easy",
        "peekOfCode": "newTermRef = PL_new_term_ref\ndef newTermRefs(count):\n    a = PL_new_term_refs(count)\n    return list(range(a, a + count))\ndef call(*terms, **kwargs):\n    \"\"\"Call term in module.\n    ``term``: a Term or term handle\n    \"\"\"\n    for kwarg in kwargs:\n        if kwarg not in [\"module\"]:",
        "detail": "reqs.pyswip.pyswip.easy",
        "documentation": {}
    },
    {
        "label": "PrologError",
        "kind": 6,
        "importPath": "reqs.pyswip.pyswip.prolog",
        "description": "reqs.pyswip.pyswip.prolog",
        "peekOfCode": "class PrologError(Exception):\n    pass\nclass NestedQueryError(PrologError):\n    \"\"\"\n    SWI-Prolog does not accept nested queries, that is, opening a query while\n    the previous one was not closed.\n    As this error may be somewhat difficult to debug in foreign code, it is\n    automatically treated inside pySWIP\n    \"\"\"\n    pass",
        "detail": "reqs.pyswip.pyswip.prolog",
        "documentation": {}
    },
    {
        "label": "NestedQueryError",
        "kind": 6,
        "importPath": "reqs.pyswip.pyswip.prolog",
        "description": "reqs.pyswip.pyswip.prolog",
        "peekOfCode": "class NestedQueryError(PrologError):\n    \"\"\"\n    SWI-Prolog does not accept nested queries, that is, opening a query while\n    the previous one was not closed.\n    As this error may be somewhat difficult to debug in foreign code, it is\n    automatically treated inside pySWIP\n    \"\"\"\n    pass\ndef _initialize():\n    args = []",
        "detail": "reqs.pyswip.pyswip.prolog",
        "documentation": {}
    },
    {
        "label": "Prolog",
        "kind": 6,
        "importPath": "reqs.pyswip.pyswip.prolog",
        "description": "reqs.pyswip.pyswip.prolog",
        "peekOfCode": "class Prolog:\n    \"\"\"Easily query SWI-Prolog.\n    This is a singleton class\n    \"\"\"\n    # We keep track of open queries to avoid nested queries.\n    _queryIsOpen = False\n    class _QueryWrapper(object):\n        def __init__(self):\n            if Prolog._queryIsOpen:\n                raise NestedQueryError(\"The last query was not closed\")",
        "detail": "reqs.pyswip.pyswip.prolog",
        "documentation": {}
    },
    {
        "label": "normalize_values",
        "kind": 2,
        "importPath": "reqs.pyswip.pyswip.prolog",
        "description": "reqs.pyswip.pyswip.prolog",
        "peekOfCode": "def normalize_values(values):\n    from pyswip.easy import Atom, Functor\n    if isinstance(values, Atom):\n        return values.value\n    if isinstance(values, Functor):\n        normalized = str(values.name.value)\n        if values.arity:\n            normalized_args = ([str(normalize_values(arg)) for arg in values.args])\n            normalized = normalized + '(' + ', '.join(normalized_args) + ')'\n        return normalized",
        "detail": "reqs.pyswip.pyswip.prolog",
        "documentation": {}
    },
    {
        "label": "TestExamples",
        "kind": 6,
        "importPath": "reqs.pyswip.tests.test_examples",
        "description": "reqs.pyswip.tests.test_examples",
        "peekOfCode": "class TestExamples(unittest.TestCase):\n    \"\"\"\n    Each test method is named after one example in $PYSWIP/examples.\n    WARNING: Since it is not possible to unload things from the Prolog base, the\n    examples have to be 'orthogonal'.\n    \"\"\"\n    def test_create_term(self):\n        \"\"\"\n        Simple example of term creation.\n        \"\"\"",
        "detail": "reqs.pyswip.tests.test_examples",
        "documentation": {}
    },
    {
        "label": "example_path",
        "kind": 2,
        "importPath": "reqs.pyswip.tests.test_examples",
        "description": "reqs.pyswip.tests.test_examples",
        "peekOfCode": "def example_path(path):\n    import os.path\n    return os.path.normpath(os.path.join(os.path.split(os.path.abspath(__file__))[0], \"..\", \"examples\", path)).replace(\"\\\\\", \"\\\\\\\\\")",
        "detail": "reqs.pyswip.tests.test_examples",
        "documentation": {}
    },
    {
        "label": "MyTestCase",
        "kind": 6,
        "importPath": "reqs.pyswip.tests.test_foreign",
        "description": "reqs.pyswip.tests.test_foreign",
        "peekOfCode": "class MyTestCase(unittest.TestCase):\n    def test_deterministic_foreign(self):\n        def hello(t):\n            print(\"Hello,\", t)\n        hello.arity = 1\n        registerForeign(hello)\n        prolog = Prolog()\n        prolog.assertz(\"father(michael,john)\")\n        prolog.assertz(\"father(michael,gina)\")\n        result = list(prolog.query(\"father(michael,X), hello(X)\"))",
        "detail": "reqs.pyswip.tests.test_foreign",
        "documentation": {}
    },
    {
        "label": "TestIssues",
        "kind": 6,
        "importPath": "reqs.pyswip.tests.test_issues",
        "description": "reqs.pyswip.tests.test_issues",
        "peekOfCode": "class TestIssues(unittest.TestCase):\n    \"\"\"Each test method is named after the issue it is testing. The docstring\n       contains the link for the issue and the issue's description.\n    \"\"\"\n    def test_issue_13_17_and_6(self):\n        \"\"\"\n        Improve library loading.\n        This issue used to manifest as an inability to load SWI-Prolog's\n        SO/DLL. If this test fails, it will usually kill Python, so the test is\n        very simple.",
        "detail": "reqs.pyswip.tests.test_issues",
        "documentation": {}
    },
    {
        "label": "TestProlog",
        "kind": 6,
        "importPath": "reqs.pyswip.tests.test_prolog",
        "description": "reqs.pyswip.tests.test_prolog",
        "peekOfCode": "class TestProlog(unittest.TestCase):\n    \"\"\"\n    Unit tests for prolog module (contains only Prolog class).\n    \"\"\"\n    def test_nested_queries(self):\n        \"\"\"\n        SWI-Prolog cannot have nested queries called by the foreign function\n        interface, that is, if we open a query and are getting results from it,\n        we cannot open another query before closing that one.\n        Since this is a user error, we just ensure that a appropriate error",
        "detail": "reqs.pyswip.tests.test_prolog",
        "documentation": {}
    },
    {
        "label": "IsolatedProlog",
        "kind": 6,
        "importPath": "reqs.pyswip-notebook.build.lib.pyswip_notebook.prolog_notebook",
        "description": "reqs.pyswip-notebook.build.lib.pyswip_notebook.prolog_notebook",
        "peekOfCode": "class IsolatedProlog(pl.Prolog):\n    \"\"\"\n    Simple wrapper around the basic Prolog-class from pyswip for use in notebooks. This wrapper uses a dedictated\n    Prolog module for each of it's instances, separating them from one another.\n    \"\"\"\n    class _QueryWrapper(pl.Prolog._QueryWrapper):\n        def __call__(self, query, maxresult, catcherrors, normalize):\n            for t in super().__call__(query, maxresult, catcherrors, False):\n                if normalize:\n                    try:",
        "detail": "reqs.pyswip-notebook.build.lib.pyswip_notebook.prolog_notebook",
        "documentation": {}
    },
    {
        "label": "temp_file",
        "kind": 2,
        "importPath": "reqs.pyswip-notebook.build.lib.pyswip_notebook.prolog_notebook",
        "description": "reqs.pyswip-notebook.build.lib.pyswip_notebook.prolog_notebook",
        "peekOfCode": "def temp_file(temp_dir=None):\n    pltfrm = platform.system()\n    if pltfrm == \"Windows\":\n        # create a temporary file manually and delete it on close\n        if temp_dir is not None:\n            # convert to a raw string for windows\n            temp_dir = temp_dir.encode('unicode-escape').decode().replace('\\\\\\\\', '\\\\')\n        else:\n            temp_dir = \"\"\n        fname = os.path.join(temp_dir, uuid.uuid4().hex)",
        "detail": "reqs.pyswip-notebook.build.lib.pyswip_notebook.prolog_notebook",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "reqs.pyswip-notebook.build.lib.pyswip_notebook._version",
        "description": "reqs.pyswip-notebook.build.lib.pyswip_notebook._version",
        "peekOfCode": "__version__ = \"0.1.1\"",
        "detail": "reqs.pyswip-notebook.build.lib.pyswip_notebook._version",
        "documentation": {}
    },
    {
        "label": "IsolatedProlog",
        "kind": 6,
        "importPath": "reqs.pyswip-notebook.pyswip_notebook.prolog_notebook",
        "description": "reqs.pyswip-notebook.pyswip_notebook.prolog_notebook",
        "peekOfCode": "class IsolatedProlog(pl.Prolog):\n    \"\"\"\n    Simple wrapper around the basic Prolog-class from pyswip for use in notebooks. This wrapper uses a dedictated\n    Prolog module for each of it's instances, separating them from one another.\n    \"\"\"\n    class _QueryWrapper(pl.Prolog._QueryWrapper):\n        def __call__(self, query, maxresult, catcherrors, normalize):\n            for t in super().__call__(query, maxresult, catcherrors, False):\n                if normalize:\n                    try:",
        "detail": "reqs.pyswip-notebook.pyswip_notebook.prolog_notebook",
        "documentation": {}
    },
    {
        "label": "temp_file",
        "kind": 2,
        "importPath": "reqs.pyswip-notebook.pyswip_notebook.prolog_notebook",
        "description": "reqs.pyswip-notebook.pyswip_notebook.prolog_notebook",
        "peekOfCode": "def temp_file(temp_dir=None):\n    pltfrm = platform.system()\n    if pltfrm == \"Windows\":\n        # create a temporary file manually and delete it on close\n        if temp_dir is not None:\n            # convert to a raw string for windows\n            temp_dir = temp_dir.encode('unicode-escape').decode().replace('\\\\\\\\', '\\\\')\n        else:\n            temp_dir = \"\"\n        fname = os.path.join(temp_dir, uuid.uuid4().hex)",
        "detail": "reqs.pyswip-notebook.pyswip_notebook.prolog_notebook",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "reqs.pyswip-notebook.pyswip_notebook._version",
        "description": "reqs.pyswip-notebook.pyswip_notebook._version",
        "peekOfCode": "__version__ = \"0.1.1\"",
        "detail": "reqs.pyswip-notebook.pyswip_notebook._version",
        "documentation": {}
    },
    {
        "label": "import_module_from_path",
        "kind": 2,
        "importPath": "reqs.pyswip-notebook.setup",
        "description": "reqs.pyswip-notebook.setup",
        "peekOfCode": "def import_module_from_path(path):\n    \"\"\"Import a module from the given path without executing any code above it\n    \"\"\"\n    import importlib\n    import pathlib\n    import sys\n    module_path = pathlib.Path(path).resolve()\n    module_name = module_path.stem  # 'path/x.py' -> 'x'\n    spec = importlib.util.spec_from_file_location(module_name, module_path)\n    module = importlib.util.module_from_spec(spec)",
        "detail": "reqs.pyswip-notebook.setup",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "reqs.pyswip-notebook.setup",
        "description": "reqs.pyswip-notebook.setup",
        "peekOfCode": "version = import_module_from_path('pyswip_notebook/_version.py').__version__\nsetup(\n    name=\"pyswip-notebook\",\n    version=version,\n    author=\"Felix Igelbrink\",\n    author_email=\"felix.igelbrink@uni-osnabrueck.de\",\n    description=\"Wrapper around the pyswip prolog interpreter to make it useable from within jupyter notebooks.\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/mortacious/pyswip-notebook\",",
        "detail": "reqs.pyswip-notebook.setup",
        "documentation": {}
    }
]